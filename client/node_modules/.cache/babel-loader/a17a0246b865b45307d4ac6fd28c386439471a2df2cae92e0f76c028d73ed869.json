{"ast":null,"code":"// const dateValid = () => {\n\n//     console.log(this.$refs.taskListDate)\n//     if(this.$refs.taskListDate.value.length > 0){\n//         return true\n//     }\n//     else {\n//         dateValid.$message = 'Выберите дату';\n//         return false;\n//     }\n// }\n\nimport axios from \"axios\";\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\nimport ColorPicker from \"primevue/colorpicker\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport { required } from \"@vuelidate/validators\";\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    this.formattedDate = this.USER_REGISTRATIONS.split(\"-\").reverse().join(\"-\") + \"T00:00\";\n  },\n  data() {\n    return {\n      taskListTitle: \"\",\n      taskListInfo: \"\",\n      taskListDate: \"\",\n      taskListColor: \"#15616D\",\n      taskListStartTime: \"\",\n      taskListEndTime: \"\",\n      formattedDate: \"\",\n      isSelectColor: false\n    };\n  },\n  validations: {\n    taskListTitle: {\n      required\n    },\n    taskListInfo: {\n      required\n    },\n    taskListDate: {\n      required\n    }\n    // taskListColor: { required }\n  },\n\n  methods: {\n    ...mapActions([\"ADD_TASK\", \"GET_TASKLIST\"]),\n    ...mapMutations([\"UPDATE_IS_ADDED_TASKLIST\"]),\n    splitDateRange(dateRange) {\n      const [startDate, endDate] = dateRange.split(\" - \");\n      return {\n        startDate,\n        endDate\n      };\n    },\n    formatToISODate(dateString) {\n      const date = new Date(dateString);\n      if (!isNaN(date.getTime())) {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, \"0\");\n        const day = String(date.getDate()).padStart(2, \"0\");\n        return `${year}-${month}-${day}T00:00:00Z`;\n      } else {\n        return null;\n      }\n    },\n    async addTaskList(event) {\n      event.preventDefault();\n      const taskDateInput = this.$refs.taskListDate;\n      this.taskListDate = taskDateInput.value;\n      const isFormCorrect = await this.v$.$validate();\n      if (!isFormCorrect) return;\n      const {\n        startDate,\n        endDate\n      } = this.splitDateRange(this.taskListDate);\n      axios({\n        method: \"POST\",\n        url: \"http://localhost:5000/task/createTaskList\",\n        headers: {\n          authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`\n        },\n        data: {\n          title: this.taskListTitle,\n          toggleCircle: false,\n          isTasklistVisible: false,\n          startTime: this.formatToISODate(startDate),\n          endTime: this.formatToISODate(endDate)\n          // taskListColor: this.taskListColor\n        }\n      }).then(() => {\n        this.UPDATE_IS_ADDED_TASKLIST();\n        this.GET_TASKLIST();\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  },\n  computed: {\n    ...mapGetters([\"USER_REGISTRATIONS\"])\n  },\n  components: {\n    ColorPicker\n  }\n};","map":{"version":3,"names":["axios","mapActions","mapMutations","mapGetters","ColorPicker","useVuelidate","required","setup","v$","mounted","formattedDate","USER_REGISTRATIONS","split","reverse","join","data","taskListTitle","taskListInfo","taskListDate","taskListColor","taskListStartTime","taskListEndTime","isSelectColor","validations","methods","splitDateRange","dateRange","startDate","endDate","formatToISODate","dateString","date","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","addTaskList","event","preventDefault","taskDateInput","$refs","value","isFormCorrect","$validate","method","url","headers","authorization","localStorage","getItem","title","toggleCircle","isTasklistVisible","startTime","endTime","then","UPDATE_IS_ADDED_TASKLIST","GET_TASKLIST","catch","err","console","log","computed","components"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\ModalWindows\\AddTaskList.vue"],"sourcesContent":["<template>\r\n    <div class=\"form-task\">\r\n        <h3 class=\"form-title\">Создание списка задач</h3>\r\n\r\n        <form\r\n            action=\"\"\r\n            type=\"post\"\r\n            @submit=\"addTaskList\"\r\n            style=\"display: flex; flex-direction: column; row-gap: 20px\"\r\n        >\r\n            <div>\r\n                <input\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Название списка\"\r\n                    v-model=\"taskListTitle\"\r\n                />\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskListTitle.$invalid && v$.taskListTitle.$dirty\"\r\n                    >Заполните поле</span\r\n                >\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Описание списка\"\r\n                    v-model=\"taskListInfo\"\r\n                />\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskListInfo.$invalid && v$.taskListInfo.$dirty\"\r\n                    >Заполните поле\r\n                </span>\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    ref=\"taskDate\"\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Дата выполнения\"\r\n                    v-model=\"taskStartDate\"\r\n                    :min=\"this.formattedDate\"\r\n                    onfocus=\"(this.type='date')\" onblur=\"(this.type='text')\"\r\n                />\r\n\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskListEndTime.$invalid && v$.taskListEndTime.$dirty\"\r\n                    >Введите дату</span\r\n                >\r\n            </div>\r\n\r\n            <div class=\"form-color-select\">\r\n                <h4 class=\"form-title\">Цвет</h4>\r\n                <!-- <div class=\"form-color-button\" @click=\"selectColor()\"><ColorPicker v-model=\"color\" /></div> -->\r\n                <div class=\"form-button-color\" v-if=\"!isSelectColor\" @click=\"this.isSelectColor = !this.isSelectColor\">Выберите цвет</div>\r\n                <ColorPicker v-model=\"taskListColor\"  v-else/>\r\n            </div>\r\n\r\n            <button\r\n                class=\"form-submit\"\r\n                type=\"submit\"\r\n                :class=\"{ 'form-submit_filled': !this.v$.$invalid }\"\r\n            >\r\n                Создать\r\n            </button>\r\n            <button\r\n                class=\"form-submit_exit\"\r\n                @click=\"UPDATE_IS_ADDED_TASKLIST()\"\r\n            >\r\n                Отмена\r\n            </button>\r\n        </form>\r\n    </div>\r\n</template>\r\n<script>\r\n// const dateValid = () => {\r\n\r\n//     console.log(this.$refs.taskListDate)\r\n//     if(this.$refs.taskListDate.value.length > 0){\r\n//         return true\r\n//     }\r\n//     else {\r\n//         dateValid.$message = 'Выберите дату';\r\n//         return false;\r\n//     }\r\n// }\r\n\r\nimport axios from \"axios\";\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport ColorPicker from \"primevue/colorpicker\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { required } from \"@vuelidate/validators\";\r\n\r\nexport default {\r\n    setup() {\r\n        return {\r\n            v$: useVuelidate(),\r\n        };\r\n    },\r\n    mounted() {\r\n        this.formattedDate =\r\n            this.USER_REGISTRATIONS.split(\"-\").reverse().join(\"-\") + \"T00:00\";\r\n    },\r\n    data() {\r\n        return {\r\n            taskListTitle: \"\",\r\n            taskListInfo: \"\",\r\n            taskListDate: \"\",\r\n\r\n            taskListColor: \"#15616D\",\r\n\r\n            taskListStartTime: \"\",\r\n            taskListEndTime: \"\",\r\n\r\n            formattedDate: \"\",\r\n\r\n            isSelectColor: false,\r\n        };\r\n    },\r\n    validations: {\r\n        taskListTitle: { required },\r\n        taskListInfo: { required },\r\n        taskListDate: { required },\r\n        // taskListColor: { required }\r\n    },\r\n    methods: {\r\n        ...mapActions([\"ADD_TASK\", \"GET_TASKLIST\"]),\r\n        ...mapMutations([\"UPDATE_IS_ADDED_TASKLIST\"]),\r\n        splitDateRange(dateRange) {\r\n            const [startDate, endDate] = dateRange.split(\" - \");\r\n            return { startDate, endDate };\r\n        },\r\n\r\n        formatToISODate(dateString) {\r\n            const date = new Date(dateString);\r\n            if (!isNaN(date.getTime())) {\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n                return `${year}-${month}-${day}T00:00:00Z`;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        async addTaskList(event) {\r\n            event.preventDefault();\r\n\r\n            const taskDateInput = this.$refs.taskListDate;\r\n            this.taskListDate = taskDateInput.value;\r\n\r\n            const isFormCorrect = await this.v$.$validate();\r\n            if (!isFormCorrect) return;\r\n\r\n            const { startDate, endDate } = this.splitDateRange(\r\n                this.taskListDate\r\n            );\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: \"http://localhost:5000/task/createTaskList\",\r\n                headers: {\r\n                    authorization: `Bearer ${localStorage.getItem(\r\n                        \"AccessToken\"\r\n                    )}`,\r\n                },\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.formatToISODate(startDate),\r\n                    endTime: this.formatToISODate(endDate),\r\n                    // taskListColor: this.taskListColor\r\n                },\r\n            })\r\n                .then(() => {\r\n                    this.UPDATE_IS_ADDED_TASKLIST();\r\n                    this.GET_TASKLIST();\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        },\r\n    },\r\n    computed: {\r\n        ...mapGetters([\"USER_REGISTRATIONS\"]),\r\n    },\r\n\r\n    components: {\r\n        ColorPicker,\r\n    },\r\n};\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}