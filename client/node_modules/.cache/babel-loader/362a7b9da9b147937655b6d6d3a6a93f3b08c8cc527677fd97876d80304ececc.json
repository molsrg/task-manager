{"ast":null,"code":"import axios from 'axios';\nexport default {\n  state() {\n    return {\n      registration: '23-07-2023',\n      tasklist: [{\n        title: 'Текущий день',\n        toggleCircle: false,\n        isTasklistVisible: false,\n        tasks: []\n      }, {\n        title: 'Неделя на календаре',\n        toggleCircle: false,\n        isTasklistVisible: false,\n        tasks: []\n      }],\n      selectTask: []\n    };\n  },\n  getters: {\n    USER_REGISTRATIONS: state => {\n      return state.registration;\n    },\n    USER_TASKLISTS: state => {\n      return state.tasklist;\n    },\n    USER_SELECT_TASKS: state => {\n      return state.selectTask;\n    },\n    USER_TASKS_IN_CALENDAR: state => {\n      return state.tasklist[1].tasks;\n    }\n  },\n  mutations: {\n    UPDATE_VISIBLE_TASKLIST: (state, idx) => {\n      state.tasklist[idx].toggleCircle = !state.tasklist[idx].toggleCircle;\n      state.tasklist[idx].isTasklistVisible = !state.tasklist[idx].isTasklistVisible;\n    },\n    UPDATE_SELECT_TASKS: (state, response) => {\n      state.selectTask = response;\n    },\n    UPDATE_THIS_DAY_TASKS: (state, response) => {\n      state.tasklist[0].tasks = response;\n    },\n    UPDATE_THIS_WEEK_TASKS: (state, response) => {\n      state.tasklist[1].tasks = response;\n    },\n    UPDATE_TASKLIST: (state, data) => {\n      const baseList = state.tasklist.slice(0, 2);\n      console.log(baseList);\n      state.tasklist = [];\n      state.tasklist;\n    }\n  },\n  actions: {\n    GET_THIS_DAY_TASKS({\n      commit\n    }, day) {\n      const presentDay = `${day[2]}-${day[3]}-${day[0]}`;\n      let nextDay_day = day[0].split('0');\n      const nextDay = `${day[2]}-${day[3]}-${Number(day[0]) > 10 ? Number(day[0]) + 1 : `0${Number(nextDay_day[1]) + 1}`}`;\n      axios({\n        method: 'GET',\n        url: 'http://localhost:5000/task/getTask',\n        headers: {\n          'authorization': `Bearer ${localStorage.getItem('AccessToken')}`\n        },\n        params: {\n          startTime: `${presentDay}T00:00:00Z`,\n          endTime: `${nextDay}T00:00:00Z`\n        }\n      }).then(response => {\n        commit('UPDATE_THIS_DAY_TASKS', response.data.tasks);\n      }).catch(() => {\n        alert(\"Запрос на этот день не удался\");\n      });\n    },\n    GET_THIS_WEEK_TASKS({\n      commit\n    }, week) {\n      const startTime = `${week[0][3]}-${week[0][4]}-${week[0][1]}`;\n      const endTime = `${week[6][3]}-${week[6][4]}-${week[6][1]}`;\n      axios({\n        method: 'GET',\n        url: 'http://localhost:5000/task/getTask',\n        headers: {\n          'authorization': `Bearer ${localStorage.getItem('AccessToken')}`\n        },\n        params: {\n          startTime: `${startTime}T00:00:00Z`,\n          endTime: `${endTime}T00:00:00Z`\n        }\n      }).then(response => {\n        commit('UPDATE_THIS_WEEK_TASKS', response.data.tasks);\n      }).catch(() => {\n        alert(\"Запрос на эту неделю не удался\");\n      });\n    },\n    ADDED_TASKLIST() {\n      axios({\n        method: 'POST',\n        url: 'http://localhost:5000/task/createTaskList',\n        headers: {\n          'authorization': `Bearer ${localStorage.getItem('AccessToken')}`\n        },\n        data: {\n          title: 'мужиков нет xixix',\n          toggleCircle: false,\n          isTasklistVisible: false,\n          startTime: \"2023-10-04T11:00:00Z\",\n          endTime: \"2023-10-08T16:30:00Z\"\n        }\n      }).then(() => {\n        this.dispatch('GET_TASKLIST');\n        alert('vse good');\n      }).catch(err => {\n        console.log(err);\n        alert(\"Создание списка не удалось\");\n      });\n    },\n    GET_TASKLIST({\n      commit\n    }) {\n      axios({\n        method: 'GET',\n        url: 'http://localhost:5000/task/getTaskList',\n        headers: {\n          'authorization': `Bearer ${localStorage.getItem('AccessToken')}`\n        }\n      }).then(response => {\n        commit('UPDATE_TASKLIST', response.data.tasksList);\n      }).catch(() => {\n        alert(\"Запрос на кастомный список не удался\");\n      });\n    },\n    ADD_TASK() {\n      axios({\n        method: \"POST\",\n        url: \"http://localhost:5000/task/createTask\",\n        headers: {\n          authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`\n        },\n        data: {\n          name: \"Занятие спортом и пивом\",\n          type: \"Working\",\n          text: \"Люблю заниматься по утрам и пить пиво\",\n          status: \"Done\",\n          startTime: \"2023-10-03T16:00:00Z\",\n          endTime: \"2023-10-03T19:00:00Z\"\n        }\n      }).then(() => {\n        this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n        this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n      }).catch(err => {\n        console.log(err);\n        alert(\"Создание задачи не удалось\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","state","registration","tasklist","title","toggleCircle","isTasklistVisible","tasks","selectTask","getters","USER_REGISTRATIONS","USER_TASKLISTS","USER_SELECT_TASKS","USER_TASKS_IN_CALENDAR","mutations","UPDATE_VISIBLE_TASKLIST","idx","UPDATE_SELECT_TASKS","response","UPDATE_THIS_DAY_TASKS","UPDATE_THIS_WEEK_TASKS","UPDATE_TASKLIST","data","baseList","slice","console","log","actions","GET_THIS_DAY_TASKS","commit","day","presentDay","nextDay_day","split","nextDay","Number","method","url","headers","localStorage","getItem","params","startTime","endTime","then","catch","alert","GET_THIS_WEEK_TASKS","week","ADDED_TASKLIST","dispatch","err","GET_TASKLIST","tasksList","ADD_TASK","authorization","name","type","text","status","CURRENT_WEEK","PRESENT_DAY"],"sources":["C:/Users/Sergey/Documents/GitHub/task-manager/client/src/store/modules/User.js"],"sourcesContent":["import axios from 'axios'\r\nexport default {\r\n\r\n    state() {\r\n        return {\r\n            registration: '23-07-2023',\r\n            tasklist: [\r\n                {\r\n                    title: 'Текущий день',\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    tasks: [],\r\n                }, \r\n                {\r\n                    title: 'Неделя на календаре',\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    tasks: [],\r\n                }, \r\n            ], \r\n            selectTask: []\r\n        }\r\n        \r\n    }, \r\n    getters: {\r\n        USER_REGISTRATIONS: state => {\r\n            return state.registration\r\n        },\r\n        USER_TASKLISTS: state => {\r\n            return state.tasklist\r\n        }, \r\n        USER_SELECT_TASKS: state => {\r\n            return state.selectTask\r\n        }, \r\n\r\n        USER_TASKS_IN_CALENDAR: state => {\r\n            return state.tasklist[1].tasks\r\n        }\r\n    }, \r\n    mutations: {\r\n        UPDATE_VISIBLE_TASKLIST: (state, idx) => {\r\n            state.tasklist[idx].toggleCircle = !state.tasklist[idx].toggleCircle\r\n            state.tasklist[idx].isTasklistVisible = !state.tasklist[idx].isTasklistVisible\r\n        }, \r\n        UPDATE_SELECT_TASKS: (state, response) => {\r\n            state.selectTask = response\r\n        }, \r\n        UPDATE_THIS_DAY_TASKS: (state, response) => {\r\n            state.tasklist[0].tasks = response\r\n        }, \r\n        UPDATE_THIS_WEEK_TASKS: (state, response) => {\r\n            state.tasklist[1].tasks = response\r\n        }, \r\n        UPDATE_TASKLIST: (state, data) => {\r\n            const baseList = state.tasklist.slice(0,2)\r\n            console.log(baseList)\r\n            state.tasklist = []\r\n            state.tasklist\r\n        }, \r\n    }, \r\n    actions: {\r\n        GET_THIS_DAY_TASKS({commit}, day) {\r\n            const presentDay = `${day[2]}-${day[3]}-${day[0]}`\r\n            let nextDay_day =  day[0].split('0')\r\n            const nextDay = `${day[2]}-${day[3]}-${Number(day[0]) > 10 ? Number(day[0]) + 1 : `0${Number(nextDay_day[1]) + 1}`}`\r\n            \r\n            axios({\r\n                method: 'GET', \r\n                url: 'http://localhost:5000/task/getTask',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                params: {\r\n                    startTime: `${presentDay}T00:00:00Z`, \r\n                    endTime: `${nextDay}T00:00:00Z`, \r\n                }\r\n            })\r\n            .then((response) => {\r\n                commit('UPDATE_THIS_DAY_TASKS', response.data.tasks)\r\n            })\r\n            .catch(() => {\r\n                alert(\"Запрос на этот день не удался\")\r\n            })   \r\n        },\r\n\r\n        GET_THIS_WEEK_TASKS({commit}, week) {\r\n            const startTime = `${week[0][3]}-${week[0][4]}-${week[0][1]}`\r\n            const endTime = `${week[6][3]}-${week[6][4]}-${week[6][1]}`\r\n\r\n            axios({\r\n                method: 'GET', \r\n                url: 'http://localhost:5000/task/getTask',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                params: {\r\n                    startTime: `${startTime}T00:00:00Z`, \r\n                    endTime: `${endTime}T00:00:00Z`, \r\n                }\r\n            })\r\n            .then((response) => {\r\n                commit('UPDATE_THIS_WEEK_TASKS', response.data.tasks)\r\n            })\r\n            .catch(() => {\r\n                alert(\"Запрос на эту неделю не удался\")\r\n            })   \r\n        },\r\n\r\n        ADDED_TASKLIST(){\r\n            axios({\r\n                method: 'POST',\r\n                url: 'http://localhost:5000/task/createTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                data: {\r\n                    title: 'мужиков нет xixix',\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: \"2023-10-04T11:00:00Z\",\r\n                    endTime: \"2023-10-08T16:30:00Z\",\r\n                },\r\n            })\r\n            .then(() => {\r\n                this.dispatch('GET_TASKLIST')\r\n                alert('vse good')\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                alert(\"Создание списка не удалось\")\r\n            }) \r\n\r\n            \r\n        }, \r\n\r\n        GET_TASKLIST({commit}){\r\n            axios({\r\n                method: 'GET', \r\n                url: 'http://localhost:5000/task/getTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n            })\r\n            .then((response) => {\r\n                commit('UPDATE_TASKLIST', response.data.tasksList)\r\n            })\r\n            .catch(() => {\r\n                alert(\"Запрос на кастомный список не удался\")\r\n            })  \r\n        },\r\n\r\n        ADD_TASK(){\r\n            axios({\r\n                method: \"POST\",\r\n                url: \"http://localhost:5000/task/createTask\",\r\n                headers: {\r\n                    authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`,\r\n                },\r\n                data: {\r\n                    name: \"Занятие спортом и пивом\",\r\n                    type: \"Working\",\r\n                    text: \"Люблю заниматься по утрам и пить пиво\",\r\n                    status: \"Done\",\r\n                    startTime: \"2023-10-03T16:00:00Z\",\r\n                    endTime: \"2023-10-03T19:00:00Z\",\r\n                },\r\n                })\r\n                .then(() => {\r\n                    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n                    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    alert(\"Создание задачи не удалось\");\r\n                });\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}