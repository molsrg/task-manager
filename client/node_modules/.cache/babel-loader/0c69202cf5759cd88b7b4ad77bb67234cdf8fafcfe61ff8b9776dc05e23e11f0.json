{"ast":null,"code":"import axios from 'axios';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, minLength, email } from '@vuelidate/validators';\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  data() {\n    return {\n      login: '',\n      mail: '',\n      password: '',\n      confirm_password: '',\n      auth: 'Зарегестрироваться',\n      isReg: false,\n      errors: [],\n      isInvalidEmail: false,\n      isInvalidLogin: false,\n      isInvalidPassword_incorrect: false,\n      isInvalidMail_incorrect: false,\n      isInvalidPassword_valid: false,\n      isInvalidPassword_dsntmatch: false\n    };\n  },\n  validations: {\n    login: {\n      required,\n      minLength: minLength(6)\n    },\n    mail: {\n      required,\n      email\n    },\n    password: {\n      required,\n      minLength: minLength(8)\n    },\n    confirm_password: {\n      required,\n      minLength: minLength(8)\n    }\n  },\n  mounted() {\n    if (localStorage.getItem('AccessToken')) {\n      window.location.href = \"http://localhost:8080/home\";\n    }\n  },\n  methods: {\n    changeReg() {\n      this.isReg = !this.isReg;\n      this.auth = this.auth == 'Войти' ? 'Зарегестрироваться' : 'Войти';\n    },\n    async authUser(event) {\n      event.preventDefault();\n      this.isInvalidEmail = false;\n      this.isInvalidLogin = false;\n      this.isInvalidPassword_valid = false;\n      this.isInvalidPassword_incorrect = false;\n      this.isInvalidMail_incorrect = false;\n      const isFormCorrect = await this.v$.$validate();\n      const validPass = await this.validForm();\n      console.log(validPass);\n      if (!isFormCorrect && validPass && this.auth == 'Зарегестрироваться') {\n        console.log('Валидация формы не прошла');\n        return;\n      }\n      if (this.errors.length == 0) {\n        let data = {};\n        let type = '';\n        if (this.auth == 'Зарегестрироваться') {\n          data = {\n            username: this.login,\n            email: this.mail,\n            password: this.password\n          };\n          type = 'registration';\n        } else if (this.auth == 'Войти') {\n          data = {\n            email: this.mail,\n            password: this.password\n          };\n          type = 'login';\n        }\n        axios.post(`http://localhost:5000/auth/${type}`, data).then(response => {\n          this.login = '';\n          this.mail = '', this.password = '', this.confirm_password = '';\n          const token = response.data.AccessToken;\n          localStorage.setItem('AccessToken', token); // write\n          // console.log(localStorage.getItem('AccessToken')); // read\n          window.location.href = \"http://localhost:8080/home\";\n        }).catch(error => {\n          console.log(error);\n          // this.errors = [error.response.data?.errors]\n          // this.errors = [error.response.data?.message]\n\n          if (error.response.data?.message == \"Почтовый адрес уже был зарегистрирован\") {\n            this.isInvalidEmail = true;\n            this.mail = \"\";\n          }\n          if (error.response.data?.message == \"Пользователь с таким именем уже существует\") {\n            this.isInvalidLogin = true;\n            this.login = \"\";\n          }\n          if (error.response.data?.message == \"Введен неверный пароль\") {\n            this.isInvalidPassword_incorrect = true;\n            this.password = \"\";\n          }\n          if (error.response.data?.message == `Почта ${this.mail} не найдена`) {\n            this.isInvalidMail_incorrect = true;\n            this.mail = \"\";\n          }\n        });\n      }\n    },\n    validForm() {\n      const regex = /^(?=.*[A-Za-z])([A-Za-z0-9]+)$/;\n      if (this.auth == 'Зарегестрироваться') {\n        if (this.password !== this.confirm_password) {\n          this.isInvalidPassword_dsntmatch = true;\n        }\n      }\n      if (!regex.test(this.password)) {\n        this.isInvalidPassword_valid = true;\n        this.password = '';\n        this.confirm_password = '';\n      }\n      if (this.isInvalidPassword_dsntmatch || this.isInvalidPassword_valid) {\n        return false;\n      }\n      return true;\n    }\n  }\n};","map":{"version":3,"names":["axios","useVuelidate","required","minLength","email","setup","v$","data","login","mail","password","confirm_password","auth","isReg","errors","isInvalidEmail","isInvalidLogin","isInvalidPassword_incorrect","isInvalidMail_incorrect","isInvalidPassword_valid","isInvalidPassword_dsntmatch","validations","mounted","localStorage","getItem","window","location","href","methods","changeReg","authUser","event","preventDefault","isFormCorrect","$validate","validPass","validForm","console","log","length","type","username","post","then","response","token","AccessToken","setItem","catch","error","message","regex","test"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\views\\AuthorizationClient.vue"],"sourcesContent":["<template>\r\n<div class=\"auth\">\r\n  <div class=\"auth-container\">\r\n    <div :class=\"isReg ? 'auth-form auth-form-short' : 'auth-form '\">\r\n      <div class=\"auth-form__section\">\r\n        <img\r\n          src=\"../assets/images/logo/logo.svg\"\r\n          alt=\"logo\"\r\n        />\r\n        <h3 class=\"auth-form__section_text\">Task Unity Tech</h3>\r\n      </div>\r\n      <div class=\"auth-form__section\">\r\n        <button @click=\"changeReg\" :class=\"isReg ? 'auth-form__section_button-inactive' : 'auth-form__section_button'\">Регистрация</button>\r\n        <button @click=\"changeReg\" :class=\"isReg ? 'auth-form__section_button' : 'auth-form__section_button-inactive'\">Вход</button>\r\n      </div>\r\n      <div style=\"overflow: hidden; max-height: 410px;\"  >\r\n        <form @submit=\"authUser\"\r\n          :class=\"isReg ? 'form-signin ' : 'form-signin form-signin-left'\"\r\n          action=\"\"\r\n          method=\"post\"\r\n          name=\"form\"\r\n        >\r\n        <div>\r\n          <input class=\"auth-form-input\"  type=\"email\" placeholder=\"E-mail\" v-model=\"mail\">\r\n          <!-- <span class=\"invalid-span\" v-if=\"v$.mail.$invalid && !v$.login.$dirty\">Некорректный email</span>           -->\r\n          <span class=\"invalid-span\" v-if=\"this.isInvalidMail_incorrect\">Почта не найдена</span>  \r\n        </div>\r\n        \r\n        <div>\r\n          <input class=\"auth-form-input\"  type=\"password\" placeholder=\"Пароль\" v-model=\"password\">\r\n          <!-- <span class=\"invalid-span\" v-if=\"v$.password.$invalid && !v$.password.$dirty\">Введите пароль</span> -->\r\n          <span class=\"invalid-span\" v-if=\"this.isInvalidPassword_incorrect\">Введён неверный пароль</span>\r\n        </div>\r\n        \r\n        <a class=\"auth-form-input_forget\">Забыли пароль?</a>\r\n\r\n        <button type=\"submit\" class=\"auth-form-button\">{{ auth }}</button>\r\n\r\n        </form>\r\n\r\n        <form @submit=\"authUser\"\r\n          :class=\"isReg ? 'form-signup' : 'form-signup form-signup-left'\"\r\n          action=\"\"\r\n          method=\"post\"\r\n          name=\"form\"\r\n          \r\n        >\r\n        <div>\r\n          <input class=\"auth-form-input\" type=\"text\" placeholder=\"Имя пользователя\" v-model=\"login\" >\r\n          <span class=\"invalid-span\" v-if=\"v$.login.$invalid && !v$.login.$dirty\">Минимальная длина 6 символов</span>\r\n          <!-- <span class=\"invalid-span\" v-if=\"v$.login.$invalid && v$.login.$dirty\">Проверьте правильность введённых данных</span> -->\r\n          <span class=\"invalid-span\" v-if=\"isInvalidLogin\">Пользователь с таким именем уже существует</span>\r\n          \r\n        </div>\r\n\r\n        <div>\r\n          <input class=\"auth-form-input\"  type=\"text\" placeholder=\"E-mail\" v-model=\"mail\">\r\n          <span class=\"invalid-span\" v-if=\"v$.mail.$invalid && !v$.login.$dirty\">Некорректный email</span>          \r\n          <span class=\"invalid-span\" v-if=\"isInvalidEmail\">Эта почта уже была зерегестрирована</span>\r\n        </div>\r\n\r\n        <div>\r\n          <input class=\"auth-form-input\"  type=\"text\" placeholder=\"Пароль\" v-model=\"password\">\r\n          <span class=\"invalid-span\" v-if=\"v$.password.$invalid && !v$.password.$dirty\">Минимальная длина 8 символов. Допускаются только буквы латинницы и цифры. Обязательно наличие 1 буквы.</span>\r\n          <span class=\"invalid-span\" v-if=\"isInvalidPassword_valid\">Пароль не прошел валидацию</span>\r\n        </div>\r\n        <div>\r\n          <input class=\"auth-form-input\"  type=\"text\" placeholder=\"Подтверждение пароля\" v-model=\"confirm_password\">\r\n          <!-- <span class=\"invalid-span\" v-if=\"v$.confirm_password.$invalid\">Минимальная длина 8 символов</span> -->\r\n          <!-- {{ v$.confirm_password.sameAsPassword }} -->\r\n          <span class=\"invalid-span\" v-if=\"(this.password !== this.confirm_password && !v$.confirm_password.$dirty) || this.isInvalidPassword_dsntmatch\">Пароли не совпадают</span>\r\n        </div>\r\n          \r\n          <button type=\"submit\" class=\"auth-form-button\">{{ auth }}</button>\r\n      </form>\r\n      \r\n      </div> \r\n\r\n      <div class=\"auth-form-or\">\r\n          <div class=\"auth-form-or__text\">\r\n              <span>или</span>\r\n            </div>\r\n          <div class=\"auth-form-container\">\r\n            <a href=\"https://accounts.google.com/o/oauth2/auth?client_id=429829081659-l7g63tlu2g45o46vkf54l5sk8i2rqjq1&redirect_uri=http://localhost:8080/waiting&response_type=code&scope=https://www.googleapis.com/auth/userinfo.profile&state=123\"><img src=\"../assets/images/auth/google.svg\"></a>\r\n\r\n            <a href=\"https://github.com/login/oauth/authorize?scope=user:email&client_id=db3492f883c60a412c39&redirect_uri=http://localhost:8080/waiting\"> <img src=\"../assets/images/auth/github.svg\"></a>\r\n\r\n            <a href=\"https://oauth.yandex.ru/authorize?client_id=5b1b15fa24b542948bbd72ac320d6b9f&redirect_uri=http://localhost:8080/waiting&response_type=code\"> <img src=\"../assets/images/auth/yandex.svg\"></a>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n\r\n  \r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, minLength, email } from '@vuelidate/validators'\r\n\r\nexport default {\r\n  setup () {\r\n        return {\r\n            v$: useVuelidate()\r\n        }\r\n    },\r\n  data(){\r\n    return { \r\n      login: '', \r\n      mail: '', \r\n      password: '', \r\n      confirm_password: '', \r\n      auth: 'Зарегестрироваться',\r\n\r\n    isReg: false,\r\n      errors: [],\r\n\r\n\r\n      isInvalidEmail: false, \r\n      isInvalidLogin: false, \r\n      isInvalidPassword_incorrect: false,\r\n      isInvalidMail_incorrect: false,\r\n      isInvalidPassword_valid: false, \r\n      isInvalidPassword_dsntmatch: false\r\n    }\r\n  }, \r\n  validations: {\r\n    login: { required, minLength: minLength(6) },\r\n    mail: { required, email },\r\n    password: { required,  minLength: minLength(8)},\r\n    confirm_password: { required,  minLength: minLength(8)},\r\n    },\r\n\r\n  mounted(){\r\n    if(localStorage.getItem('AccessToken')){\r\n      window.location.href = \"http://localhost:8080/home\"\r\n    }\r\n  },\r\n  methods: {\r\n    changeReg(){\r\n      this.isReg = !this.isReg\r\n      this.auth = this.auth == 'Войти' ?  'Зарегестрироваться' : 'Войти'\r\n    },\r\n\r\n    async authUser(event) {\r\n      event.preventDefault();\r\n      this.isInvalidEmail = false\r\n      this.isInvalidLogin = false\r\n      this.isInvalidPassword_valid = false\r\n      this.isInvalidPassword_incorrect = false\r\n      this.isInvalidMail_incorrect = false\r\n    \r\n      const isFormCorrect = await this.v$.$validate()\r\n      const validPass =  await this.validForm()\r\n      console.log(validPass)\r\n\r\n\r\n\r\n            if (!isFormCorrect && validPass && this.auth == 'Зарегестрироваться') {\r\n              \r\n              console.log('Валидация формы не прошла')\r\n              return\r\n            }\r\n      \r\n      if(this.errors.length == 0){\r\n        let data = {}\r\n        let type = ''\r\n\r\n        if(this.auth == 'Зарегестрироваться'){\r\n          data = {\r\n          username: this.login,\r\n          email: this.mail,\r\n          password: this.password,\r\n            } \r\n          \r\n          type = 'registration'\r\n        }\r\n        else if (this.auth == 'Войти') {\r\n          data = {\r\n            email: this.mail,\r\n            password: this.password,\r\n          }\r\n\r\n          type = 'login'\r\n        }\r\n        axios.post(`http://localhost:5000/auth/${type}`, data)\r\n          .then((response) => {\r\n              this.login = ''\r\n              this.mail = '', \r\n              this.password = '', \r\n              this.confirm_password = ''\r\n\r\n              const token = response.data.AccessToken\r\n              localStorage.setItem('AccessToken', token); // write\r\n              // console.log(localStorage.getItem('AccessToken')); // read\r\n              window.location.href = \"http://localhost:8080/home\"\r\n\r\n              \r\n      \r\n                \r\n          }\r\n          )\r\n\r\n          .catch((error) => {\r\n            console.log(error)\r\n            // this.errors = [error.response.data?.errors]\r\n            // this.errors = [error.response.data?.message]\r\n\r\n            if(error.response.data?.message == \"Почтовый адрес уже был зарегистрирован\"){\r\n              this.isInvalidEmail = true\r\n              this.mail = \"\"\r\n            }\r\n            if(error.response.data?.message == \"Пользователь с таким именем уже существует\"){\r\n              this.isInvalidLogin = true\r\n              this.login = \"\"\r\n            }\r\n            if(error.response.data?.message == \"Введен неверный пароль\"){\r\n              this.isInvalidPassword_incorrect = true\r\n              this.password = \"\"\r\n            }\r\n\r\n            if(error.response.data?.message == `Почта ${this.mail} не найдена`){\r\n              this.isInvalidMail_incorrect = true\r\n              this.mail = \"\"\r\n            }\r\n\r\n          })   \r\n      }\r\n      \r\n    },     \r\n    validForm(){\r\n      const regex = /^(?=.*[A-Za-z])([A-Za-z0-9]+)$/;\r\n      if(this.auth == 'Зарегестрироваться'){\r\n        if(this.password !== this.confirm_password){\r\n                this.isInvalidPassword_dsntmatch = true\r\n          }\r\n      }\r\n      if(!regex.test(this.password)){\r\n        this.isInvalidPassword_valid = true\r\n        this.password = ''\r\n        this.confirm_password = ''\r\n      }\r\n\r\n      if(this.isInvalidPassword_dsntmatch || this.isInvalidPassword_valid){\r\n        return false\r\n      }\r\n\r\n      return true\r\n    },\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}