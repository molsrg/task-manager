{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5ecd9784\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"start-time\"\n}, \"Выберите время и дату начала отслеживания нового списка\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"end-time\"\n}, \"Выберите время и дату окончания отслеживания нового списка\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Добавить список\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    action: \"\",\n    type: \"post\",\n    onSubmit: _cache[3] || (_cache[3] = (...args) => _ctx.addTaskList && _ctx.addTaskList(...args))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"Название списка\",\n    required: \"\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.taskListTitle = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListTitle]]), _hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    id: \"start-time\",\n    type: \"datetime-local\",\n    placeholder: \"Начало задачи\",\n    required: \"\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.taskListStartTime = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListStartTime]]), _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"datetime-local\",\n    id: \"end-time\",\n    placeholder: \"Окончание задачи\",\n    required: \"\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.taskListEndTime = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListEndTime]]), _hoisted_3], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"names":["_createElementVNode","for","type","_createElementBlock","action","onSubmit","_cache","args","_ctx","addTaskList","placeholder","required","taskListTitle","$event","_hoisted_1","id","taskListStartTime","_hoisted_2","taskListEndTime","_hoisted_3"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddTaskList.vue"],"sourcesContent":["<template>\r\n    <form action=\"\" type=\"post\" @submit=\"addTaskList\">\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Название списка\"\r\n        required\r\n        v-model=\"taskListTitle\"\r\n        />\r\n\r\n        <label for=\"start-time\">Выберите время и дату начала отслеживания нового списка</label>\r\n        <input\r\n        id=\"start-time\"\r\n        type=\"datetime-local\"\r\n        placeholder=\"Начало задачи\"\r\n        required\r\n        v-model=\"taskListStartTime\"\r\n        />\r\n        <label for=\"end-time\">Выберите время и дату окончания отслеживания нового списка</label>\r\n        <input\r\n        type=\"datetime-local\"\r\n        id=\"end-time\"\r\n        placeholder=\"Окончание задачи\"\r\n        required\r\n        v-model=\"taskListEndTime\"\r\n        />\r\n\r\n        <button type=\"submit\">Добавить список</button>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\nexport default {\r\n\r\n  mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n    },\r\n    data(){\r\n        return {\r\n            taskListTitle: '',\r\n            taskListStartTime: '',\r\n            taskListEndTime: ''\r\n\r\n            formattedDate: ''\r\n        }\r\n    }, \r\n    methods: {\r\n        ...mapActions(['ADD_TASK']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASK']),\r\n        addTaskList(event) {\r\n            event.preventDefault();\r\n            axios({\r\n                method: 'POST',\r\n                url: 'http://localhost:5000/task/createTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.taskListStartTime,\r\n                    endTime: this.taskListEndTime,\r\n                },\r\n            })\r\n            .then(() => {\r\n                this.UPDATE_IS_ADDED_TASKLIST()\r\n\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                alert(\"Создание списка не удалось\")\r\n            }) \r\n\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Стили для модального окна */\r\n.modal {\r\n  position: fixed;\r\n  top: 25%;\r\n  left: 25%;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5); /* Затемненный фон */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000; /* Выше других элементов на странице */\r\n}\r\n\r\n.modal-content {\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  width: 400px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n/* Стили для формы и её элементов */\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"datetime-local\"] {\r\n  margin: 5px 0;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n}\r\n\r\ninput[type=\"radio\"] {\r\n  margin-right: 5px;\r\n}\r\n\r\nlabel {\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Стили для радиокнопок */\r\ninput[type=\"radio\"] + label {\r\n    font-weight: normal;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Стили для кнопок и других элементов формы (если есть) */\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":";;gEASQA,mBAAA,CAAuF;EAAhFC,GAAG,EAAC;AAAY,GAAC,yDAAuD;gEAQ/ED,mBAAA,CAAwF;EAAjFC,GAAG,EAAC;AAAU,GAAC,4DAA0D;gEAShFD,mBAAA,CAA8C;EAAtCE,IAAI,EAAC;AAAQ,GAAC,iBAAe;;;uBAzBzCC,mBAAA,CA0BO;IA1BDC,MAAM,EAAC,EAAE;IAACF,IAAI,EAAC,MAAM;IAAEG,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,WAAA,IAAAD,IAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;sBAC5CP,mBAAA,CAKE;IAJFE,IAAI,EAAC,MAAM;IACXQ,WAAW,EAAC,iBAAiB;IAC7BC,QAAQ,EAAR,EAAQ;+DACCH,IAAA,CAAAI,aAAa,GAAAC,MAAA;iDAAbL,IAAA,CAAAI,aAAa,E,GAGtBE,UAAuF,E,gBACvFd,mBAAA,CAME;IALFe,EAAE,EAAC,YAAY;IACfb,IAAI,EAAC,gBAAgB;IACrBQ,WAAW,EAAC,eAAe;IAC3BC,QAAQ,EAAR,EAAQ;+DACCH,IAAA,CAAAQ,iBAAiB,GAAAH,MAAA;iDAAjBL,IAAA,CAAAQ,iBAAiB,E,GAE1BC,UAAwF,E,gBACxFjB,mBAAA,CAME;IALFE,IAAI,EAAC,gBAAgB;IACrBa,EAAE,EAAC,UAAU;IACbL,WAAW,EAAC,kBAAkB;IAC9BC,QAAQ,EAAR,EAAQ;+DACCH,IAAA,CAAAU,eAAe,GAAAL,MAAA;iDAAfL,IAAA,CAAAU,eAAe,E,GAGxBC,UAA8C,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}