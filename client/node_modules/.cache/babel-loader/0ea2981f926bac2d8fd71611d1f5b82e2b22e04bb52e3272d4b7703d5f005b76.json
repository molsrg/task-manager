{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport moment from \"moment\";\n// eslint-disable-next-line no-unused-vars\nimport Task from '../../store/modules/Task/Task';\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\nmoment.locale(\"ru\");\nexport default {\n  data() {\n    return {\n      currentWeek: moment().clone().startOf(\"week\"),\n      showSelect: false,\n      // меняет состоянике стрелки в списке месяцев\n      isArrowShow: true,\n      // убирает стрелку при достижении недели регистрации\n      isFirstWeekReg: false,\n      // тоже для первой регистрации\n\n      // загрузка данных с сервера\n      showLoader: false,\n      showCalendar: true\n    };\n  },\n  computed: {\n    ...mapGetters(['USER_SELECT_TASKS', 'CURRENT_HOURS', 'CURRENT_MONTHS', 'USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK', 'FIRST_DAY', 'USER_TASKS_IN_CALENDAR', 'CHECKED_TASK'])\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.scrollToCurrentHour();\n    });\n    this.CHANGE_WEEK(moment());\n    this.GET_HOURS();\n    this.GET_PRESENT_DAY();\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n    this.GET_TASKLIST(); // other\n  },\n\n  methods: {\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS', 'GET_THIS_DAY_TASKS', 'GET_TASKLIST']),\n    ...mapMutations(['UPDATE_WEEK', 'UPDATE_FIRST_DAY_WEEK', 'UPDATE_CHECKED_TASK']),\n    isTaskOverflowed(task) {\n      const taskElement = this.$refs[`${task.id}`];\n      console.log(taskElement);\n    },\n    // обновляет выбранную задачу \n    showTask(task) {\n      this.UPDATE_CHECKED_TASK(task);\n    },\n    // приводит дату к нужному формату в отображении задачи на календаре\n    formatTime(dateTime) {\n      const options = {\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      return new Date(dateTime).toLocaleTimeString(undefined, options);\n    },\n    // автоматически скролит к нужному времени при открытии страницы\n    scrollToCurrentHour() {\n      const taskboardContainer = document.querySelector('.calendar__taskboard');\n      if (taskboardContainer) {\n        const currentHour = `${Number(moment().format('HH'))}:00`;\n        const hourElements = taskboardContainer.querySelectorAll('.time__name');\n        for (let i = 0; i < hourElements.length; i++) {\n          if (hourElements[i].textContent === currentHour) {\n            const containerRect = taskboardContainer.getBoundingClientRect();\n            const hourRect = hourElements[i].getBoundingClientRect();\n            const scrollTop = hourRect.top - containerRect.top;\n            taskboardContainer.scrollTop = scrollTop;\n            console.log(taskboardContainer.scrollTop);\n            if (taskboardContainer.scrollTop == 0) {\n              this.scrollToCurrentHour();\n            }\n            return; // Выходим из цикла, когда нашли нужный час\n          }\n        }\n\n        console.error(\"Час не найден в .calendar__taskboard.\");\n      } else {\n        console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\n      }\n    },\n    // Функция для вычисления стиля задачи \n    taskStyle(task) {\n      const heightInPixels = Task.calculateTaskLengthInPixels(task);\n      // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\n      const colorTask = Task.calculateTaskColor(task);\n      const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK);\n      const startPosition = Task.calculateTaskStartPosition(task);\n      return {\n        height: heightInPixels + 'px',\n        'background-color': colorTask,\n        top: startPosition + 'px',\n        left: leftPosition + 'px'\n      };\n    },\n    // заполнение днями недели текущей\n    fillDays(startDate) {\n      const daysArray = [];\n      for (let i = 0; i <= 6; i++) {\n        const day = moment(startDate).add(i, \"days\").format(\"ddd-DD-MMMM-YYYY-MM\");\n        daysArray.push(day.split(\"-\"));\n      }\n      return daysArray;\n    },\n    // изменяет выбранный месяц в списке (визуально)\n    changeCurrentMonth(value) {\n      this.startLoading();\n      this.UPDATE_FIRST_DAY_WEEK(`${value[0]} ${value[1]}`);\n      const newDate = moment(`${value[0]}-${value[1]}`, \"MMMM-YYYY\").startOf(\"month\");\n      this.CHANGE_WEEK(newDate);\n      this.showSelect = false;\n      this.currentWeek = newDate;\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n      this.loading();\n    },\n    // переключает неделю на предыдущую (стрелка)\n    prevWeek(startDate) {\n      this.startLoading();\n      const previousWeek = this.currentWeek ? this.currentWeek.clone().subtract(1, \"week\") : moment().startOf(\"isoWeek\").subtract(1, \"week\");\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\n      if (previousWeek.isBefore(startDateNormalized)) {\n        if (!this.isFirstWeekReg) {\n          this.currentWeek = previousWeek;\n          this.isArrowShow = false;\n        }\n        this.isFirstWeekReg = true;\n      } else {\n        this.currentWeek.subtract(1, \"week\");\n      }\n      this.UPDATE_WEEK(this.fillDays(this.currentWeek));\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n      this.UPDATE_FIRST_DAY_WEEK(`${this.capitalizeFirstLetter(this.CURRENT_WEEK[0][2])}  ${this.CURRENT_WEEK[0][3]}`);\n      this.loading();\n      this.scrollToCurrentHour();\n    },\n    // переключает неделю на следующую (стрелка)\n    nextWeek() {\n      this.startLoading();\n      this.isFirstWeekReg = false;\n      this.isArrowShow = true;\n      if (!this.currentWeek) {\n        // Если текущая неделя не определена, создаем ее и устанавливаем в текущую неделю\n        this.currentWeek = moment().add(1, \"week\").startOf(\"isoWeek\");\n      } else {\n        // Иначе переключаемся на следующую неделю\n        this.currentWeek.add(1, \"week\");\n      }\n      this.UPDATE_WEEK(this.fillDays(this.currentWeek));\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n      this.UPDATE_FIRST_DAY_WEEK(`${this.capitalizeFirstLetter(this.CURRENT_WEEK[0][2])}  ${this.CURRENT_WEEK[0][3]}`);\n      this.$nextTick(() => {\n        const calendarTaskboard = document.querySelector('.calendar_taskboard');\n        if (calendarTaskboard) {\n          // Если элемент .calendar_taskboard доступен в DOM, вызываем метод scrollToCurrentHour\n          this.scrollToCurrentHour();\n        } else {\n          // В противном случае можно выполнить другие действия или подождать, если необходимо\n          console.error(\"Элемент .calendar_taskboard не найден в DOM.\");\n        }\n      });\n    },\n    // делает заглавным первые буквы месяцев в списке (мб костыль)\n    capitalizeFirstLetter(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n    goToCurrentWeek() {\n      this.startLoading();\n      this.CHANGE_WEEK(moment());\n      this.currentWeek = moment().clone().startOf(\"week\");\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n      this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n      this.loading();\n    },\n    // старт загрузки\n    startLoading() {\n      this.showLoader = true;\n      this.showCalendar = false;\n    },\n    // процесс загрузки\n    loading() {\n      // здесь будем получать данные с сервера\n      setTimeout(() => {\n        this.showLoader = false;\n        this.showCalendar = true;\n      }, 1000);\n    }\n  }\n};","map":{"version":3,"names":["moment","Task","mapGetters","mapActions","mapMutations","locale","data","currentWeek","clone","startOf","showSelect","isArrowShow","isFirstWeekReg","showLoader","showCalendar","computed","mounted","$nextTick","scrollToCurrentHour","CHANGE_WEEK","GET_HOURS","GET_PRESENT_DAY","GET_MONTHS","USER_REGISTRATIONS","GET_THIS_WEEK_TASKS","CURRENT_WEEK","GET_THIS_DAY_TASKS","PRESENT_DAY","GET_TASKLIST","methods","isTaskOverflowed","task","taskElement","$refs","id","console","log","showTask","UPDATE_CHECKED_TASK","formatTime","dateTime","options","hour","minute","Date","toLocaleTimeString","undefined","taskboardContainer","document","querySelector","currentHour","Number","format","hourElements","querySelectorAll","i","length","textContent","containerRect","getBoundingClientRect","hourRect","scrollTop","top","error","taskStyle","heightInPixels","calculateTaskLengthInPixels","colorTask","calculateTaskColor","leftPosition","calculateLeftPosition","startPosition","calculateTaskStartPosition","height","left","fillDays","startDate","daysArray","day","add","push","split","changeCurrentMonth","value","startLoading","UPDATE_FIRST_DAY_WEEK","newDate","loading","prevWeek","previousWeek","subtract","startDateNormalized","isBefore","UPDATE_WEEK","capitalizeFirstLetter","nextWeek","calendarTaskboard","string","charAt","toUpperCase","slice","goToCurrentWeek","setTimeout"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CalendarComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar__component\">\r\n    <div class=\"select__arrow\">\r\n    <div class=\"select\">\r\n      <div class=\"select__header\">\r\n        <div class=\"select__current\">{{ FIRST_DAY }} </div>\r\n        <img\r\n          @click=\"showSelect = !showSelect\"\r\n          :class=\"showSelect ? 'select__btn' : 'select__btn-isActive'\"\r\n          src=\"../../assets/images/home/select__btn.svg\"\r\n          alt=\"\"\r\n          />\r\n      </div>\r\n      <div :class=\"showSelect ? 'select__body-show' : 'select__body'\">\r\n        <div\r\n          @click=\"changeCurrentMonth(month)\"\r\n          class=\"select__item\"\r\n          v-for=\"month in CURRENT_MONTHS\"\r\n          :key=\"month\"\r\n        >\r\n          {{ month[0] }} {{ month[1] }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"arrows\">\r\n      <img\r\n        @click=\"prevWeek(this.USER_REGISTRATIONS)\"\r\n        src=\"../../assets/images/home/left-arrow.svg\"\r\n        alt=\"\"\r\n        :class=\"isArrowShow ? 'arrows__item' : 'arrows__item-hidden'\"\r\n      />\r\n      <img\r\n        @click=\"nextWeek()\"\r\n        src=\"../../assets/images/home/right-arrow.svg\"\r\n        alt=\"\"\r\n        class=\"arrows__item\"\r\n      />\r\n      <img @click=\"goToCurrentWeek\" class=\"arrows__item\" src=\"../../assets/images/home/home.svg\" alt=\"\">\r\n    </div>\r\n  </div>\r\n  <div class=\"calendar\">\r\n    <div class=\"week\">\r\n      <div\r\n        :class=\"\r\n          day[1] == PRESENT_DAY[0] && day[2] == PRESENT_DAY[1] &&day[3] == PRESENT_DAY[2] \r\n            ? 'present-day'\r\n            : 'day'\r\n        \"\r\n        v-for=\"day in CURRENT_WEEK\"\r\n        :key=\"day\"\r\n      >\r\n        <div class=\"day__number\">{{ day[1] }}</div>\r\n        <div class=\"day__text\">{{ day[0] }}</div>\r\n        <!-- <div class=\"day__text\">{{ day[2] }}</div>\r\n        <div class=\"day__text\">{{ day[3] }}</div> -->\r\n\r\n        <div class=\"day__line\">―</div>\r\n      </div>\r\n    </div>\r\n    <!-- заглушка -->\r\n    <div class=\"wrapper\" v-if=\"showLoader\">\r\n      <span class=\"loader\"></span>\r\n    </div>\r\n  \r\n    <div class=\"calendar__taskboard\" v-else>\r\n      <div class=\"time\">\r\n        <div class=\"time__container\" >\r\n          <span class=\"time__name\" v-for=\"hour in CURRENT_HOURS\" :key=\"hour\" >{{ hour }}</span>\r\n          \r\n        </div>\r\n      </div>\r\n      <div class=\"task\" v-for=\"task in USER_TASKS_IN_CALENDAR\" :key=\"task.id\" :style=\"taskStyle(task)\" @click=\"showTask(task)\">  \r\n        <h5 class=\"task__name\">{{ task.name }}</h5>\r\n        <span class=\"task__time\">{{ formatTime(task.startTime) }} - {{ formatTime(task.endTime) }}</span>\r\n        <!-- <button @click=\"isTaskOverflowed\">Выбрать</button> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport Task from '../../store/modules/Task/Task'\r\n\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\nmoment.locale(\"ru\");\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      currentWeek: moment().clone().startOf(\"week\"),\r\n\r\n      showSelect: false, // меняет состоянике стрелки в списке месяцев\r\n      isArrowShow: true, // убирает стрелку при достижении недели регистрации\r\n      isFirstWeekReg: false, // тоже для первой регистрации\r\n\r\n      // загрузка данных с сервера\r\n      showLoader: false,\r\n      showCalendar: true,\r\n\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['USER_SELECT_TASKS', 'CURRENT_HOURS', 'CURRENT_MONTHS', 'USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK', 'FIRST_DAY',  'USER_TASKS_IN_CALENDAR', 'CHECKED_TASK']), \r\n    \r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scrollToCurrentHour();\r\n    });\r\n\r\n    this.CHANGE_WEEK(moment())\r\n    this.GET_HOURS();\r\n    this.GET_PRESENT_DAY()\r\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\r\n\r\n\r\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n    this.GET_TASKLIST() // other\r\n  \r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS','GET_THIS_DAY_TASKS', 'GET_TASKLIST']), \r\n    ...mapMutations(['UPDATE_WEEK', 'UPDATE_FIRST_DAY_WEEK', 'UPDATE_CHECKED_TASK']),\r\n\r\n    isTaskOverflowed(task) {\r\n      const taskElement = this.$refs[`${task.id}`]; \r\n      console.log(taskElement)\r\n    },\r\n\r\n    // обновляет выбранную задачу \r\n    showTask(task){\r\n      this.UPDATE_CHECKED_TASK(task)\r\n    },\r\n\r\n    // приводит дату к нужному формату в отображении задачи на календаре\r\n    formatTime(dateTime){\r\n      const options = { hour: '2-digit', minute: '2-digit' };\r\n        return new Date(dateTime).toLocaleTimeString(undefined, options);\r\n    },\r\n    // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n  const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n  if (taskboardContainer) {\r\n    const currentHour = `${Number(moment().format('HH'))}:00`; \r\n    const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n    \r\n    for (let i = 0; i < hourElements.length; i++) {\r\n      if (hourElements[i].textContent === currentHour) {\r\n        const containerRect = taskboardContainer.getBoundingClientRect();\r\n        const hourRect = hourElements[i].getBoundingClientRect();\r\n        const scrollTop = hourRect.top - containerRect.top;\r\n        taskboardContainer.scrollTop = scrollTop;\r\n        console.log(taskboardContainer.scrollTop)\r\n        if(taskboardContainer.scrollTop == 0){\r\n          this.scrollToCurrentHour()\r\n        }\r\n        return; // Выходим из цикла, когда нашли нужный час\r\n      }\r\n    }\r\n    \r\n    console.error(\"Час не найден в .calendar__taskboard.\");\r\n  } else {\r\n    console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n  }\r\n},\r\n    // Функция для вычисления стиля задачи \r\n    taskStyle(task) {\r\n      const heightInPixels = Task.calculateTaskLengthInPixels(task);\r\n      // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\r\n      const colorTask = Task.calculateTaskColor(task)\r\n      const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK)\r\n      const startPosition = Task.calculateTaskStartPosition(task)\r\n\r\n      return {\r\n        height: heightInPixels + 'px', \r\n        'background-color': colorTask, \r\n        top: startPosition + 'px',\r\n        left: leftPosition + 'px', \r\n      }\r\n    },\r\n  \r\n    // заполнение днями недели текущей\r\n    fillDays(startDate) {\r\n      const daysArray = [];\r\n      for (let i = 0; i <= 6; i++) {\r\n        const day = moment(startDate).add(i, \"days\").format(\"ddd-DD-MMMM-YYYY-MM\");\r\n        daysArray.push(day.split(\"-\"));\r\n      }\r\n      return daysArray;\r\n    },\r\n\r\n    // изменяет выбранный месяц в списке (визуально)\r\n    changeCurrentMonth(value) {\r\n      this.startLoading();\r\n      this.UPDATE_FIRST_DAY_WEEK(`${value[0]} ${value[1]}`);\r\n      const newDate = moment(`${value[0]}-${value[1]}`, \"MMMM-YYYY\").startOf(\"month\");\r\n      this.CHANGE_WEEK(newDate);\r\n      this.showSelect = false\r\n      this.currentWeek = newDate\r\n\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n      this.loading()\r\n    },\r\n\r\n    // переключает неделю на предыдущую (стрелка)\r\n    prevWeek(startDate) {\r\n      this.startLoading();\r\n      const previousWeek = this.currentWeek\r\n            ? this.currentWeek.clone().subtract(1, \"week\")\r\n            : moment().startOf(\"isoWeek\").subtract(1, \"week\");\r\n\r\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\r\n\r\n      if (previousWeek.isBefore(startDateNormalized)) {\r\n        if(!this.isFirstWeekReg){\r\n          this.currentWeek = previousWeek;\r\n          this.isArrowShow = false;\r\n        }\r\n        this.isFirstWeekReg = true;\r\n      }\r\n      else {\r\n        this.currentWeek.subtract(1, \"week\");\r\n      }\r\n\r\n      this.UPDATE_WEEK(this.fillDays(this.currentWeek));\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n      this.UPDATE_FIRST_DAY_WEEK(`${this.capitalizeFirstLetter(this.CURRENT_WEEK[0][2])}  ${this.CURRENT_WEEK[0][3]}`);\r\n      this.loading();\r\n      this.scrollToCurrentHour()\r\n      \r\n    },\r\n\r\n    // переключает неделю на следующую (стрелка)\r\n    nextWeek() {\r\n      this.startLoading();\r\n      this.isFirstWeekReg = false;\r\n      this.isArrowShow = true;\r\n      if (!this.currentWeek) {\r\n        // Если текущая неделя не определена, создаем ее и устанавливаем в текущую неделю\r\n        this.currentWeek = moment().add(1, \"week\").startOf(\"isoWeek\");\r\n      } else {\r\n        // Иначе переключаемся на следующую неделю\r\n        this.currentWeek.add(1, \"week\");\r\n      }\r\n\r\n      this.UPDATE_WEEK(this.fillDays(this.currentWeek));\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\r\n      this.UPDATE_FIRST_DAY_WEEK(`${this.capitalizeFirstLetter(this.CURRENT_WEEK[0][2])}  ${this.CURRENT_WEEK[0][3]}`);\r\n    \r\n      this.$nextTick(() => {\r\n      const calendarTaskboard = document.querySelector('.calendar_taskboard');\r\n      if (calendarTaskboard) {\r\n        // Если элемент .calendar_taskboard доступен в DOM, вызываем метод scrollToCurrentHour\r\n        this.scrollToCurrentHour();\r\n      } else {\r\n        // В противном случае можно выполнить другие действия или подождать, если необходимо\r\n        console.error(\"Элемент .calendar_taskboard не найден в DOM.\");\r\n      }})\r\n\r\n      \r\n    },\r\n\r\n\r\n    // делает заглавным первые буквы месяцев в списке (мб костыль)\r\n    capitalizeFirstLetter(string) {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n    },\r\n\r\n    goToCurrentWeek(){\r\n      this.startLoading()\r\n      this.CHANGE_WEEK(moment())\r\n      this.currentWeek =  moment().clone().startOf(\"week\")\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n      this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n      this.loading()\r\n    },\r\n\r\n    // старт загрузки\r\n    startLoading() {\r\n      this.showLoader = true;\r\n      this.showCalendar = false;\r\n    },\r\n    // процесс загрузки\r\n    loading() {\r\n    // здесь будем получать данные с сервера\r\n      setTimeout(() => {\r\n        this.showLoader = false;\r\n        this.showCalendar = true;\r\n      }, 1000);\r\n    },\r\n    \r\n  },\r\n  \r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.wrapper {\r\n  width: 1340px;\r\n  margin: 100px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n.loader {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 5px solid black;\r\n  border-bottom-color: transparent;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n  box-sizing: border-box;\r\n  animation: rotation 1s linear infinite;\r\n}\r\n\r\n@keyframes rotation {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}