{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import axios from 'axios'\nimport moment from 'moment';\nmoment.locale('ru');\nexport default {\n  state() {\n    return {\n      hours: [],\n      days: [],\n      months: []\n    };\n  },\n  getters: {\n    CURRENT_HOURS: state => {\n      return state.hours;\n    },\n    CURRENT_MONTHS: state => {\n      return state.months;\n    }\n  },\n  mutations: {\n    UPDATE_HOURS: (state, response) => {\n      state.hours = response;\n    },\n    UPDATE_MONTHS: (state, response) => {\n      state.months = response;\n    }\n  },\n  actions: {\n    // загружаем часы с текущего на день вперед\n    GET_HOURS({\n      commit\n    }) {\n      const hours = [];\n      const currentHour = Number(moment().format('HH'));\n      for (let i = 0; i < 24; i++) {\n        let hour = currentHour + i;\n        if (hour > 23) {\n          hour -= 24;\n        }\n        hours.push(`${hour}:00`);\n      }\n      commit('UPDATE_HOURS', hours);\n    },\n    GET_MONTHS({\n      commit\n    }, startDate, monthAfter = 3) {\n      const months = [];\n      const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\n      while (startDateNormalized.isBefore(nowNormalized)) {\n        months.push(startDateNormalized.format(\"MMMM YYYY MM\")).split(\" \");\n        startDateNormalized.add(1, \"M\");\n      }\n\n      // Добавляем месяцы после текущего\n      // for (let i = 0; i < monthAfter; i++) {\n      //     const monthslater = nowNormalized.clone().add(i, \"M\");\n      //     months.push(monthslater.format(\"MMMM YYYY MM\")).split(\" \")\n      // }\n\n      console.log(monthAfter);\n      commit('UPDATE_MONTHS', months);\n    }\n  }\n};","map":{"version":3,"names":["moment","locale","state","hours","days","months","getters","CURRENT_HOURS","CURRENT_MONTHS","mutations","UPDATE_HOURS","response","UPDATE_MONTHS","actions","GET_HOURS","commit","currentHour","Number","format","i","hour","push","GET_MONTHS","startDate","monthAfter","nowNormalized","startOf","startDateNormalized","isBefore","split","add","console","log"],"sources":["C:/Users/Sergey/Documents/GitHub/task-manager/client/src/store/modules/Calendar.js"],"sourcesContent":["// import axios from 'axios'\r\nimport moment from 'moment'\r\nmoment.locale('ru')\r\n\r\nexport default {\r\n    state() {\r\n        return {\r\n            hours: [],\r\n            days: [],\r\n            months: []\r\n        }\r\n        \r\n    }, \r\n    getters: {\r\n        CURRENT_HOURS: state => {\r\n            return state.hours\r\n        }, \r\n        CURRENT_MONTHS: state => {\r\n            return state.months\r\n        }\r\n    }, \r\n    mutations: {\r\n        UPDATE_HOURS: (state, response) => {\r\n            state.hours = response\r\n        }, \r\n        UPDATE_MONTHS: (state, response) => {\r\n            state.months = response\r\n        }, \r\n    }, \r\n    actions: {\r\n        // загружаем часы с текущего на день вперед\r\n        GET_HOURS ({ commit }) {\r\n            const hours = [];\r\n            const currentHour = Number(moment().format('HH'));\r\n            for (let i = 0; i < 24; i++) {\r\n            let hour = currentHour + i;\r\n            if (hour > 23) {\r\n                hour -= 24; \r\n            }\r\n            hours.push(`${hour}:00`);\r\n            }\r\n            commit('UPDATE_HOURS', hours);\r\n        },\r\n        \r\n        GET_MONTHS ({commit}, startDate, monthAfter = 3){\r\n            const months = []\r\n            const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\r\n            const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\r\n            while (startDateNormalized.isBefore(nowNormalized)) {\r\n                months.push(startDateNormalized.format(\"MMMM YYYY MM\")).split(\" \")\r\n                startDateNormalized.add(1, \"M\");\r\n            }\r\n\r\n            // Добавляем месяцы после текущего\r\n            // for (let i = 0; i < monthAfter; i++) {\r\n            //     const monthslater = nowNormalized.clone().add(i, \"M\");\r\n            //     months.push(monthslater.format(\"MMMM YYYY MM\")).split(\" \")\r\n            // }\r\n\r\n            console.log(monthAfter)\r\n            commit('UPDATE_MONTHS', months);\r\n        }\r\n\r\n        \r\n\r\n\r\n\r\n    }\r\n}"],"mappings":";AAAA;AACA,OAAOA,MAAM,MAAM,QAAQ;AAC3BA,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAEnB,eAAe;EACXC,KAAKA,CAAA,EAAG;IACJ,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,MAAM,EAAE;IACZ,CAAC;EAEL,CAAC;EACDC,OAAO,EAAE;IACLC,aAAa,EAAEL,KAAK,IAAI;MACpB,OAAOA,KAAK,CAACC,KAAK;IACtB,CAAC;IACDK,cAAc,EAAEN,KAAK,IAAI;MACrB,OAAOA,KAAK,CAACG,MAAM;IACvB;EACJ,CAAC;EACDI,SAAS,EAAE;IACPC,YAAY,EAAEA,CAACR,KAAK,EAAES,QAAQ,KAAK;MAC/BT,KAAK,CAACC,KAAK,GAAGQ,QAAQ;IAC1B,CAAC;IACDC,aAAa,EAAEA,CAACV,KAAK,EAAES,QAAQ,KAAK;MAChCT,KAAK,CAACG,MAAM,GAAGM,QAAQ;IAC3B;EACJ,CAAC;EACDE,OAAO,EAAE;IACL;IACAC,SAASA,CAAE;MAAEC;IAAO,CAAC,EAAE;MACnB,MAAMZ,KAAK,GAAG,EAAE;MAChB,MAAMa,WAAW,GAAGC,MAAM,CAACjB,MAAM,CAAC,CAAC,CAACkB,MAAM,CAAC,IAAI,CAAC,CAAC;MACjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC7B,IAAIC,IAAI,GAAGJ,WAAW,GAAGG,CAAC;QAC1B,IAAIC,IAAI,GAAG,EAAE,EAAE;UACXA,IAAI,IAAI,EAAE;QACd;QACAjB,KAAK,CAACkB,IAAI,CAAE,GAAED,IAAK,KAAI,CAAC;MACxB;MACAL,MAAM,CAAC,cAAc,EAAEZ,KAAK,CAAC;IACjC,CAAC;IAEDmB,UAAUA,CAAE;MAACP;IAAM,CAAC,EAAEQ,SAAS,EAAEC,UAAU,GAAG,CAAC,EAAC;MAC5C,MAAMnB,MAAM,GAAG,EAAE;MACjB,MAAMoB,aAAa,GAAGzB,MAAM,CAAC,CAAC,CAACC,MAAM,CAAC,IAAI,CAAC,CAACyB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;MAC9D,MAAMC,mBAAmB,GAAG3B,MAAM,CAACuB,SAAS,EAAE,YAAY,CAAC,CAACG,OAAO,CAAC,OAAO,CAAC;MAC5E,OAAOC,mBAAmB,CAACC,QAAQ,CAACH,aAAa,CAAC,EAAE;QAChDpB,MAAM,CAACgB,IAAI,CAACM,mBAAmB,CAACT,MAAM,CAAC,cAAc,CAAC,CAAC,CAACW,KAAK,CAAC,GAAG,CAAC;QAClEF,mBAAmB,CAACG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;MACnC;;MAEA;MACA;MACA;MACA;MACA;;MAEAC,OAAO,CAACC,GAAG,CAACR,UAAU,CAAC;MACvBT,MAAM,CAAC,eAAe,EAAEV,MAAM,CAAC;IACnC;EAMJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}