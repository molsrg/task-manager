{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import axios from 'axios'\nimport moment from 'moment';\nmoment.locale('ru');\nexport default {\n  state() {\n    return {\n      hours: [],\n      week: [],\n      months: [],\n      presentDay: [],\n      firstDayWeek: []\n    };\n  },\n  getters: {\n    CURRENT_HOURS: state => {\n      return state.hours;\n    },\n    CURRENT_WEEK: state => {\n      return state.week;\n    },\n    CURRENT_MONTHS: state => {\n      return state.months;\n    },\n    PRESENT_DAY: state => {\n      return state.presentDay;\n    },\n    FIRST_DAY: state => {\n      return state.firstDayWeek;\n    }\n  },\n  mutations: {\n    UPDATE_HOURS: (state, response) => {\n      state.hours = response;\n    },\n    UPDATE_MONTHS: (state, response) => {\n      state.months = response;\n    },\n    UPDATE_PRESENT_DAY: (state, response) => {\n      state.presentDay = response;\n    },\n    UPDATE_WEEK: (state, response) => {\n      state.week = response;\n    },\n    UPDATE_FIRST_DAY_WEEK: (state, response) => {\n      state.firstDayWeek = response;\n    }\n  },\n  actions: {\n    // загружаем часы с текущего на день вперед\n    GET_HOURS({\n      commit\n    }) {\n      const hours = [];\n      const currentHour = Number(moment().format('HH'));\n      for (let i = 0; i < 24; i++) {\n        let hour = currentHour + i;\n        if (hour > 23) {\n          hour -= 24;\n        }\n        hours.push(`${hour}:00`);\n      }\n      commit('UPDATE_HOURS', hours);\n    },\n    GET_MONTHS({\n      commit\n    }, startDate, monthAfter = 3) {\n      const months = [];\n      const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\n      while (startDateNormalized.isBefore(nowNormalized)) {\n        const formattedMonth = startDateNormalized.format(\"MMMM YYYY MM\");\n        const formattedMonthArray = formattedMonth.split(\" \").map(word => {\n          return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n        });\n        months.push(formattedMonthArray);\n        startDateNormalized.add(1, \"M\");\n      }\n\n      // Добавляем месяцы после текущего\n      for (let i = 0; i < monthAfter; i++) {\n        const monthslater = nowNormalized.clone().add(i, \"M\");\n        const formattedMonth = monthslater.format(\"MMMM YYYY MM\");\n        const formattedMonthArray = formattedMonth.split(\" \").map(word => {\n          return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n        });\n        months.push(formattedMonthArray);\n      }\n      commit('UPDATE_MONTHS', months);\n    },\n    GET_PRESENT_DAY({\n      commit\n    }) {\n      const day = moment().format(\"DD-MMMM\").split(\"-\");\n      commit('UPDATE_PRESENT_DAY', day);\n    },\n    // показывает текущую неделю на календаре (выбранную)\n    CHANGE_WEEK({\n      commit\n    }, currentDate) {\n      let days = [];\n      const weekStart = currentDate.clone().startOf(\"week\");\n      for (let i = 0; i <= 6; i++) {\n        const day = moment(weekStart).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\n        days.push(day.split(\"-\"));\n      }\n      commit('UPDATE_FIRST_DAY_WEEK', `${days[0][2]}  ${days[0][3]}`);\n      commit('UPDATE_FIRST_DAY_WEEK', `${days[0][2].charAt(0).toUpperCase() + days[0][2].slice(1)} ${days[0][3]}`);\n      commit('UPDATE_WEEK', days);\n    }\n  }\n};","map":{"version":3,"names":["moment","locale","state","hours","week","months","presentDay","firstDayWeek","getters","CURRENT_HOURS","CURRENT_WEEK","CURRENT_MONTHS","PRESENT_DAY","FIRST_DAY","mutations","UPDATE_HOURS","response","UPDATE_MONTHS","UPDATE_PRESENT_DAY","UPDATE_WEEK","UPDATE_FIRST_DAY_WEEK","actions","GET_HOURS","commit","currentHour","Number","format","i","hour","push","GET_MONTHS","startDate","monthAfter","nowNormalized","startOf","startDateNormalized","isBefore","formattedMonth","formattedMonthArray","split","map","word","charAt","toUpperCase","slice","toLowerCase","add","monthslater","clone","GET_PRESENT_DAY","day","CHANGE_WEEK","currentDate","days","weekStart"],"sources":["C:/Users/Sergey/Documents/GitHub/task-manager/client/src/store/modules/Calendar.js"],"sourcesContent":["// import axios from 'axios'\r\nimport moment from 'moment'\r\nmoment.locale('ru')\r\n\r\nexport default {\r\n    state() {\r\n        return {\r\n            hours: [],\r\n            week: [],\r\n            months: [], \r\n\r\n            presentDay: [],\r\n            firstDayWeek: [], \r\n        }\r\n        \r\n    }, \r\n    getters: {\r\n        CURRENT_HOURS: state => {\r\n            return state.hours\r\n        }, \r\n        CURRENT_WEEK: state => {\r\n            return state.week\r\n        }, \r\n        CURRENT_MONTHS: state => {\r\n            return state.months\r\n        }, \r\n\r\n        PRESENT_DAY: state => {\r\n            return state.presentDay\r\n        }, \r\n        FIRST_DAY: state => {\r\n            return state.firstDayWeek\r\n        }, \r\n\r\n\r\n    \r\n    }, \r\n    mutations: {\r\n        UPDATE_HOURS: (state, response) => {\r\n            state.hours = response\r\n        }, \r\n        UPDATE_MONTHS: (state, response) => {\r\n            state.months = response\r\n        }, \r\n        UPDATE_PRESENT_DAY: (state, response) => {\r\n            state.presentDay = response\r\n        }, \r\n        UPDATE_WEEK:(state, response) => {\r\n            state.week = response\r\n        }, \r\n        UPDATE_FIRST_DAY_WEEK: (state, response) => {\r\n            state.firstDayWeek = response\r\n        }\r\n    }, \r\n    actions: {\r\n        // загружаем часы с текущего на день вперед\r\n        GET_HOURS ({ commit }) {\r\n            const hours = [];\r\n            const currentHour = Number(moment().format('HH'));\r\n            for (let i = 0; i < 24; i++) {\r\n            let hour = currentHour + i;\r\n            if (hour > 23) {\r\n                hour -= 24; \r\n            }\r\n            hours.push(`${hour}:00`);\r\n            }\r\n            commit('UPDATE_HOURS', hours);\r\n        },\r\n        \r\n        GET_MONTHS ({commit}, startDate, monthAfter = 3){\r\n            const months = []\r\n            const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\r\n            const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\r\n            while (startDateNormalized.isBefore(nowNormalized)) {\r\n                const formattedMonth = startDateNormalized.format(\"MMMM YYYY MM\");\r\n                const formattedMonthArray = formattedMonth.split(\" \").map(word => {\r\n                    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n                });\r\n                months.push(formattedMonthArray);\r\n                startDateNormalized.add(1, \"M\");\r\n            }\r\n            \r\n        \r\n            // Добавляем месяцы после текущего\r\n            for (let i = 0; i < monthAfter; i++) {\r\n                const monthslater = nowNormalized.clone().add(i, \"M\");\r\n                const formattedMonth = monthslater.format(\"MMMM YYYY MM\");\r\n                const formattedMonthArray = formattedMonth.split(\" \").map(word => {\r\n                    return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n                });\r\n                months.push(formattedMonthArray);\r\n            }\r\n        \r\n            commit('UPDATE_MONTHS', months);\r\n        }, \r\n\r\n        GET_PRESENT_DAY ({commit}){\r\n            const day = moment().format(\"DD-MMMM\").split(\"-\")\r\n            commit('UPDATE_PRESENT_DAY', day)\r\n        }, \r\n\r\n        // показывает текущую неделю на календаре (выбранную)\r\n        CHANGE_WEEK({commit}, currentDate) {\r\n            let days = [];\r\n            const weekStart = currentDate.clone().startOf(\"week\");\r\n\r\n            for (let i = 0; i <= 6; i++) {\r\n                const day = moment(weekStart).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\r\n                days.push(day.split(\"-\"));\r\n            }\r\n            commit('UPDATE_FIRST_DAY_WEEK', `${days[0][2]}  ${days[0][3]}`)\r\n\r\n            commit('UPDATE_FIRST_DAY_WEEK', `${days[0][2].charAt(0).toUpperCase() + days[0][2].slice(1)} ${days[0][3]}`);\r\n\r\n\r\n            commit('UPDATE_WEEK', days)\r\n        },\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}