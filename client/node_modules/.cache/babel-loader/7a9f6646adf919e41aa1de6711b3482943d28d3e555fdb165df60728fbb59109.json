{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-task form-tasklist\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"form-title\"\n}, \" Создание списка задач \", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_5 = {\n  class: \"form-color-select\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"form-title\"\n}, \"Цвет\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ColorPicker = _resolveComponent(\"ColorPicker\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_ColorPicker, {\n    modelValue: _ctx.color,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.color = $event)\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"form\", {\n    action: \"\",\n    type: \"post\",\n    onSubmit: _cache[6] || (_cache[6] = (...args) => $options.addTaskList && $options.addTaskList(...args)),\n    style: {\n      \"display\": \"flex\",\n      \"flex-direction\": \"column\",\n      \"row-gap\": \"20px\"\n    }\n  }, [_createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Название списка\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.taskListTitle = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListTitle]]), $setup.v$.taskListTitle.$invalid && $setup.v$.taskListTitle.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Заполните поле\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Описание списка\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.taskListInfo = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListInfo]]), $setup.v$.taskListInfo.$invalid && $setup.v$.taskListInfo.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \"Заполните поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"taskListDate\",\n    ref: \"taskListDate\",\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Дата выполнения\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.taskListDate = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListDate]])]), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createElementVNode(\"div\", {\n    class: \"form-color-button\",\n    onClick: _cache[4] || (_cache[4] = $event => $options.selectColor())\n  }, \"Выберите цвет\")]), _createElementVNode(\"button\", {\n    class: _normalizeClass([\"form-submit\", {\n      'form-submit_filled': !this.v$.$invalid\n    }]),\n    type: \"submit\"\n  }, \"Создать\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    class: \"form-submit_exit\",\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.UPDATE_IS_ADDED_TASKLIST())\n  }, \"Отмена\")], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_ColorPicker","_ctx","color","$event","action","type","onSubmit","_cache","args","$options","addTaskList","style","placeholder","$data","taskListTitle","$setup","v$","$invalid","$dirty","_hoisted_3","taskListInfo","_hoisted_4","id","ref","taskListDate","_hoisted_5","_hoisted_6","onClick","selectColor","_normalizeClass","UPDATE_IS_ADDED_TASKLIST"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTaskList.vue"],"sourcesContent":["<template>\r\n        <div class=\"form-task form-tasklist\">\r\n            <h3 class=\"form-title\">\r\n                Создание списка задач\r\n            </h3>\r\n            <ColorPicker v-model=\"color\" />\r\n            <form action=\"\" type=\"post\" @submit=\"addTaskList\" style=\"display: flex; flex-direction: column; row-gap: 20px;\"> \r\n                <div>\r\n                    <input \r\n                        class=\"form-input\" \r\n                        type=\"text\" \r\n                        placeholder=\"Название списка\" \r\n                        v-model=\"taskListTitle\"\r\n                    > \r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListTitle.$invalid && v$.taskListTitle.$dirty\">Заполните поле</span>\r\n                </div>\r\n                \r\n                <div>\r\n                    <input class=\"form-input\" type=\"text\" placeholder=\"Описание списка\" v-model=\"taskListInfo\">\r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListInfo.$invalid && v$.taskListInfo.$dirty\">Заполните поле </span>\r\n                </div>\r\n                \r\n                <div>\r\n                    <input  id=\"taskListDate\" ref=\"taskListDate\" class=\"form-input\" type=\"text\" placeholder=\"Дата выполнения\" v-model=\"taskListDate\">\r\n                </div>\r\n\r\n                <div class=\"form-color-select\">\r\n                    <h4 class=\"form-title\">Цвет</h4>\r\n                    <div class=\"form-color-button\" @click=\"selectColor()\">Выберите цвет</div>\r\n                </div>\r\n\r\n\r\n                <button class=\"form-submit\" type=\"submit\" :class=\"{ 'form-submit_filled': !this.v$.$invalid }\">Создать</button>\r\n                <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASKLIST()\">Отмена</button>\r\n            </form>\r\n    </div>\r\n</template>\r\n<script>\r\n// const dateValid = () => {\r\n\r\n//     console.log(this.$refs.taskListDate)\r\n//     if(this.$refs.taskListDate.value.length > 0){\r\n//         return true\r\n//     }\r\n//     else {\r\n//         dateValid.$message = 'Выберите дату';\r\n//         return false;\r\n//     }\r\n// }\r\n\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport ColorPicker from 'primevue/colorpicker';\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required } from '@vuelidate/validators'\r\n\r\n\r\nexport default {\r\n    setup () {\r\n        return {\r\n            v$: useVuelidate()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n    },\r\n    data(){\r\n        return {\r\n            taskListTitle: '',\r\n            taskListInfo: '',\r\n            taskListDate:'',\r\n\r\n\r\n            taskListStartTime: '',\r\n            taskListEndTime: '',\r\n\r\n            formattedDate: ''\r\n        }\r\n    }, \r\n    validations: {\r\n        taskListTitle: { required },\r\n        taskListInfo: { required },\r\n        taskListDate: { required },\r\n\r\n    },\r\n    methods: {\r\n        selectColor(){\r\n\r\n        }, \r\n        ...mapActions(['ADD_TASK', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASKLIST']),\r\n        splitDateRange(dateRange) {\r\n            const [startDate, endDate] = dateRange.split(' - ');\r\n            return { startDate, endDate };\r\n        },\r\n\r\n        formatToISODate(dateString) {\r\n            const date = new Date(dateString);\r\n            if (!isNaN(date.getTime())) {\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                const day = String(date.getDate()).padStart(2, '0');\r\n                return `${year}-${month}-${day}T00:00:00Z`;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        \r\n        async addTaskList(event) {\r\n            event.preventDefault();\r\n\r\n            const taskDateInput = this.$refs.taskListDate\r\n            this.taskListDate = taskDateInput.value\r\n\r\n\r\n            const isFormCorrect = await this.v$.$validate()\r\n            if (!isFormCorrect) return\r\n\r\n            const { startDate, endDate } = this.splitDateRange(this.taskListDate);\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'http://localhost:5000/task/createTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.formatToISODate(startDate),\r\n                    endTime: this.formatToISODate(endDate),\r\n                },\r\n            })\r\n            .then(() => {\r\n                this.UPDATE_IS_ADDED_TASKLIST()\r\n                this.GET_TASKLIST()\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            }) \r\n        }\r\n    },\r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS']),\r\n    },\r\n\r\n    components: {\r\n        ColorPicker\r\n    }\r\n};\r\n</script>"],"mappings":";;EACaA,KAAK,EAAC;AAAyB;gCAChCC,mBAAA,CAEK;EAFDD,KAAK,EAAC;AAAY,GAAC,yBAEvB;;;EAUcA,KAAK,EAAC;;;;EAKNA,KAAK,EAAC;;;EAOXA,KAAK,EAAC;AAAmB;gCAC1BC,mBAAA,CAAgC;EAA5BD,KAAK,EAAC;AAAY,GAAC,MAAI;;;;uBA1BvCE,mBAAA,CAkCE,OAlCFC,UAkCE,GAjCEC,UAEK,EACLC,YAAA,CAA+BC,sBAAA;gBAATC,IAAA,CAAAC,KAAK;+DAALD,IAAA,CAAAC,KAAK,GAAAC,MAAA;2CAC3BR,mBAAA,CA4BO;IA5BDS,MAAM,EAAC,EAAE;IAACC,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,KAA6D,EAA7D;MAAA;MAAA;MAAA;IAAA;MAC9ChB,mBAAA,CAQM,c,gBAPFA,mBAAA,CAKC;IAJGD,KAAK,EAAC,YAAY;IAClBW,IAAI,EAAC,MAAM;IACXO,WAAW,EAAC,iBAAiB;+DACpBC,KAAA,CAAAC,aAAa,GAAAX,MAAA;iDAAbU,KAAA,CAAAC,aAAa,E,GAEOC,MAAA,CAAAC,EAAE,CAACF,aAAa,CAACG,QAAQ,IAAIF,MAAA,CAAAC,EAAE,CAACF,aAAa,CAACI,MAAM,I,cAArFtB,mBAAA,CAA4G,QAA5GuB,UAA4G,EAArB,gBAAc,K,qCAGzGxB,mBAAA,CAGM,c,gBAFFA,mBAAA,CAA2F;IAApFD,KAAK,EAAC,YAAY;IAACW,IAAI,EAAC,MAAM;IAACO,WAAW,EAAC,iBAAiB;+DAAUC,KAAA,CAAAO,YAAY,GAAAjB,MAAA;iDAAZU,KAAA,CAAAO,YAAY,E,GACxDL,MAAA,CAAAC,EAAE,CAACI,YAAY,CAACH,QAAQ,IAAIF,MAAA,CAAAC,EAAE,CAACI,YAAY,CAACF,MAAM,I,cAAnFtB,mBAAA,CAA2G,QAA3GyB,UAA2G,EAAtB,iBAAe,K,qCAGxG1B,mBAAA,CAEM,c,gBADFA,mBAAA,CAAiI;IAAzH2B,EAAE,EAAC,cAAc;IAACC,GAAG,EAAC,cAAc;IAAC7B,KAAK,EAAC,YAAY;IAACW,IAAI,EAAC,MAAM;IAACO,WAAW,EAAC,iBAAiB;+DAAUC,KAAA,CAAAW,YAAY,GAAArB,MAAA;iDAAZU,KAAA,CAAAW,YAAY,E,KAGnI7B,mBAAA,CAGM,OAHN8B,UAGM,GAFFC,UAAgC,EAChC/B,mBAAA,CAAyE;IAApED,KAAK,EAAC,mBAAmB;IAAEiC,OAAK,EAAApB,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEM,QAAA,CAAAmB,WAAW;KAAI,eAAa,E,GAIvEjC,mBAAA,CAA+G;IAAvGD,KAAK,EAAAmC,eAAA,EAAC,aAAa;MAAA,4BAAqDb,EAAE,CAACC;IAAQ;IAA/DZ,IAAI,EAAC;KAA8D,SAAO,kBACtGV,mBAAA,CAAoF;IAA5ED,KAAK,EAAC,kBAAkB;IAAEiC,OAAK,EAAApB,MAAA,QAAAA,MAAA,MAAAJ,MAAA,IAAEF,IAAA,CAAA6B,wBAAwB;KAAI,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}