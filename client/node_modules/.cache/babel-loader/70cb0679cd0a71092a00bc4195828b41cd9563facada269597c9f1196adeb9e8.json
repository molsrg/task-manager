{"ast":null,"code":"import { mapGetters, mapActions, mapMutations } from 'vuex';\nexport default {\n  computed: {\n    ...mapGetters(['USER_SELECT_TASKS', 'CURRENT_HOURS', 'CURRENT_MONTHS', 'USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK', 'FIRST_DAY', 'USER_TASKS_IN_CALENDAR', 'CHECKED_TASK'])\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.scrollToCurrentHour();\n    });\n    this.CHANGE_WEEK(moment());\n    this.GET_HOURS();\n    this.GET_PRESENT_DAY();\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n    this.GET_TASKLIST(); // other\n  },\n\n  methods: {\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS', 'GET_THIS_DAY_TASKS', 'GET_TASKLIST']),\n    ...mapMutations(['UPDATE_WEEK', 'UPDATE_FIRST_DAY_WEEK', 'UPDATE_CHECKED_TASK']),\n    isTaskOverflowed(task) {\n      const taskElement = this.$refs[`${task.id}`];\n      console.log(taskElement);\n    },\n    // обновляет выбранную задачу \n    showTask(task) {\n      this.UPDATE_CHECKED_TASK(task);\n    },\n    // приводит дату к нужному формату в отображении задачи на календаре\n    formatTime(dateTime) {\n      const d = new Date(dateTime);\n      const res = [d.getHours(), d.getMinutes()].map(function (x) {\n        return x < 10 ? \"0\" + x : x;\n      }).join(\":\");\n      return res;\n    },\n    // автоматически скролит к нужному времени при открытии страницы\n    scrollToCurrentHour() {\n      const taskboardContainer = document.querySelector('.calendar__taskboard');\n      if (taskboardContainer) {\n        const currentHour = `${Number(moment().format('HH'))}:00`;\n        const hourElements = taskboardContainer.querySelectorAll('.time__name');\n        for (let i = 0; i < hourElements.length; i++) {\n          if (hourElements[i].textContent === currentHour) {\n            const containerRect = taskboardContainer.getBoundingClientRect();\n            const hourRect = hourElements[i].getBoundingClientRect();\n            const scrollTop = hourRect.top - containerRect.top;\n            taskboardContainer.scrollTop = scrollTop;\n            return; // Выходим из цикла, когда нашли нужный час\n          }\n        }\n\n        console.error(\"Час не найден в .calendar__taskboard.\");\n      } else {\n        console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\n      }\n    },\n    // Функция для вычисления стиля задачи \n    taskStyle(task) {\n      const heightInPixels = Task.calculateTaskLengthInPixels(task);\n      // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\n      const colorTask = Task.calculateTaskColor(task);\n      const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK);\n      const startPosition = Task.calculateTaskStartPosition(task);\n      return {\n        height: heightInPixels + 'px',\n        'background-color': colorTask,\n        top: startPosition + 'px',\n        left: leftPosition + 'px'\n      };\n    },\n    // старт загрузки\n    startLoading() {\n      this.showLoader = true;\n      this.showCalendar = false;\n    },\n    // процесс загрузки\n    async loading() {\n      return new Promise(resolve => {\n        // Здесь выполняются асинхронные действия, например, задержка в 1 секунду\n        setTimeout(() => {\n          this.showLoader = false;\n          this.showCalendar = true;\n          resolve(); // Разрешить промис после выполнения\n        }, 1000);\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","mapMutations","computed","mounted","$nextTick","scrollToCurrentHour","CHANGE_WEEK","moment","GET_HOURS","GET_PRESENT_DAY","GET_MONTHS","USER_REGISTRATIONS","GET_THIS_WEEK_TASKS","CURRENT_WEEK","GET_THIS_DAY_TASKS","PRESENT_DAY","GET_TASKLIST","methods","isTaskOverflowed","task","taskElement","$refs","id","console","log","showTask","UPDATE_CHECKED_TASK","formatTime","dateTime","d","Date","res","getHours","getMinutes","map","x","join","taskboardContainer","document","querySelector","currentHour","Number","format","hourElements","querySelectorAll","i","length","textContent","containerRect","getBoundingClientRect","hourRect","scrollTop","top","error","taskStyle","heightInPixels","Task","calculateTaskLengthInPixels","colorTask","calculateTaskColor","leftPosition","calculateLeftPosition","startPosition","calculateTaskStartPosition","height","left","startLoading","showLoader","showCalendar","loading","Promise","resolve","setTimeout"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CALENDAR\\CurrentWeek.vue"],"sourcesContent":["<template>\r\n    <div class=\"week\">\r\n        <div\r\n        :class=\"\r\n            day[1] == PRESENT_DAY[0] && day[2] == PRESENT_DAY[1] &&day[3] == PRESENT_DAY[2] \r\n            ? 'present-day'\r\n            : 'day'\r\n        \"\r\n        v-for=\"day in CURRENT_WEEK\"\r\n        :key=\"day\"\r\n        >\r\n        <div class=\"day__number\">{{ day[1] }}</div>\r\n        <div class=\"day__text\">{{ day[0] }}</div>\r\n        <!-- <div class=\"day__text\">{{ day[2] }}</div>\r\n        <div class=\"day__text\">{{ day[3] }}</div> -->\r\n\r\n        <div class=\"day__line\">―</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\n\r\nexport default {\r\n\r\n  computed: {\r\n    ...mapGetters(['USER_SELECT_TASKS', 'CURRENT_HOURS', 'CURRENT_MONTHS', 'USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK', 'FIRST_DAY',  'USER_TASKS_IN_CALENDAR', 'CHECKED_TASK']), \r\n    \r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scrollToCurrentHour();\r\n    });\r\n\r\n    this.CHANGE_WEEK(moment())\r\n    this.GET_HOURS();\r\n    this.GET_PRESENT_DAY()\r\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\r\n\r\n\r\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n    this.GET_TASKLIST() // other\r\n  \r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS','GET_THIS_DAY_TASKS', 'GET_TASKLIST']), \r\n    ...mapMutations(['UPDATE_WEEK', 'UPDATE_FIRST_DAY_WEEK', 'UPDATE_CHECKED_TASK']),\r\n\r\n    isTaskOverflowed(task) {\r\n      const taskElement = this.$refs[`${task.id}`]; \r\n      console.log(taskElement)\r\n    },\r\n\r\n    // обновляет выбранную задачу \r\n    showTask(task){\r\n      this.UPDATE_CHECKED_TASK(task)\r\n    },\r\n\r\n    // приводит дату к нужному формату в отображении задачи на календаре\r\n    formatTime(dateTime){\r\n      const d = new Date(dateTime)\r\n\r\n      const res = [d.getHours(), d.getMinutes()].map(function (x) {\r\n        return x < 10 ? \"0\" + x : x\r\n      }).join(\":\")\r\n\r\n      return res\r\n\r\n    },\r\n    // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n  const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n  if (taskboardContainer) {\r\n    const currentHour = `${Number(moment().format('HH'))}:00`; \r\n    const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n    \r\n    for (let i = 0; i < hourElements.length; i++) {\r\n      if (hourElements[i].textContent === currentHour) {\r\n        const containerRect = taskboardContainer.getBoundingClientRect();\r\n        const hourRect = hourElements[i].getBoundingClientRect();\r\n        const scrollTop = hourRect.top - containerRect.top;\r\n        taskboardContainer.scrollTop = scrollTop;\r\n        return; // Выходим из цикла, когда нашли нужный час\r\n      }\r\n    }\r\n    \r\n    console.error(\"Час не найден в .calendar__taskboard.\");\r\n  } else {\r\n    console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n  }\r\n},\r\n    // Функция для вычисления стиля задачи \r\n    taskStyle(task) {\r\n      const heightInPixels = Task.calculateTaskLengthInPixels(task);\r\n      // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\r\n      const colorTask = Task.calculateTaskColor(task)\r\n      const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK)\r\n      const startPosition = Task.calculateTaskStartPosition(task)\r\n\r\n      return {\r\n        height: heightInPixels + 'px', \r\n        'background-color': colorTask, \r\n        top: startPosition + 'px',\r\n        left: leftPosition + 'px', \r\n      }\r\n    },\r\n  \r\n    \r\n    // старт загрузки\r\n    startLoading() {\r\n      this.showLoader = true;\r\n      this.showCalendar = false;\r\n    },\r\n    // процесс загрузки\r\n    async loading() {\r\n  return new Promise((resolve) => {\r\n    // Здесь выполняются асинхронные действия, например, задержка в 1 секунду\r\n    setTimeout(() => {\r\n      this.showLoader = false;\r\n      this.showCalendar = true;\r\n      resolve(); // Разрешить промис после выполнения\r\n    }, 1000);\r\n  });\r\n},\r\n    \r\n  },\r\n  \r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}