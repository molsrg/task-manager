{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport moment from \"moment\";\nmoment.locale(\"ru\");\nexport default {\n  data() {\n    return {\n      presentDay: \"\",\n      currentWeek: \"\",\n      firstDay: \"\",\n      hours: [],\n      days: [],\n      months: [],\n      showSelect: false,\n      isArrowShow: true,\n      isFirstWeekReg: false,\n      // загрузка данных с сервера\n      showLoader: false,\n      showCalendar: true,\n      tasks: [{\n        name: 'Утренняя рутина',\n        id: 1,\n        time: '07:00 - 09:00',\n        type: 'EveryDay'\n      }, {\n        name: 'Вечерняя закалка',\n        id: 2,\n        time: '09:00 - 12:30',\n        type: 'Working'\n      }, {\n        name: 'Вечерняя закалка',\n        id: 2,\n        time: '09:00 - 17:30',\n        type: 'Common'\n      }],\n      registrationMonth: \"23-07-2023\" // user\n    };\n  },\n\n  mounted() {\n    this.presentDay = moment().format(\"DD-MMMM\").split(\"-\"); // установка текущего дня \n    // this.OAuth();\n    this.getMonths(this.registrationMonth); // загрузка в  select всех месяцев с даты регистрации по текущий + следующие\n    this.showWeek(moment());\n    this.getHours();\n    this.calculateTaskLengthInPixels(this.tasks[0]);\n  },\n  methods: {\n    //   // Функция для вычисления стиля задачи \n    //   taskStyle(task) {\n    //     const heightInPixels = this.calculateTaskLengthInPixels(task);\n    //     const colorTask = this.calculateTaskColor(task)\n    //     return {\n    //       height: heightInPixels + 'px', \n    //       'background-color': colorTask \n    //     }\n    //   },\n\n    //   // Функция для вычисления фона задачи \n    //   calculateTaskColor(task){\n    //     if(task.type == 'EveryDay'){\n    //       return '#C4D7DA'\n    //     }\n    //     if(task.type == 'Working') {\n    //       return '#FFDEBF'\n    //     }\n    //     if (task.type == 'Common') {\n    //       return '#DDC9C3'\n    //     }\n    //   },\n\n    // // Функция для вычисления длины задачи в пикселях\n    // calculateTaskLengthInPixels(task) {\n    //   const [startTime, endTime] = task.time.split(' - ');\n\n    //   // Разбиваем время начала и времени окончания на часы и минуты\n    //   const [startHour, startMinute] = startTime.split(':').map(Number);\n    //   const [endHour, endMinute] = endTime.split(':').map(Number);\n\n    //   // Вычисляем продолжительность задачи в минутах\n    //   const durationInMinutes = (endHour - startHour) * 60 + (endMinute - startMinute);\n\n    //   // Вычисляем длину задачи в пикселях (1 час = 80 пикселей)\n    //   const lengthInPixels = (durationInMinutes / 60) * 80;\n\n    //   // Добавляем 10px за каждый пройденный час\n    //   const hoursElapsed = moment().diff(moment(startTime, 'HH:mm'), 'hours');\n    //   const additionalPixels = hoursElapsed * 12.5;\n\n    //   return lengthInPixels + additionalPixels;\n    // },\n\n    // загружаем часы с текущего на день вперед\n    getHours() {\n      let currentHour = Number(moment().format('HH'));\n      for (let i = 0; i < 24; i++) {\n        let hour = currentHour + i;\n        if (hour > 23) {\n          hour -= 24;\n        }\n        this.hours.push(`${hour}:00`);\n      }\n    },\n    // показывает текущую неделю на календаре (выбранную)\n    showWeek(currentDate) {\n      this.days = [];\n      const weekStart = currentDate.clone().startOf(\"week\");\n      this.currentWeek = weekStart;\n      this.days = this.fillDays(this.currentWeek);\n      this.firstDay = `${this.capitalizeFirstLetter(this.days[0][2])}  ${this.days[0][3]}`;\n    },\n    // // заполнение днями недели текущей\n    fillDays(startDate) {\n      const daysArray = [];\n      for (let i = 0; i <= 6; i++) {\n        const day = moment(startDate).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\n        daysArray.push(day.split(\"-\"));\n      }\n      return daysArray;\n    },\n    // загружает месяца пользователя, с регистарации по текущий + 3 вперёд (настраиваемо)\n    getMonths(startDate, monthAfter = 3) {\n      const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\n      while (startDateNormalized.isBefore(nowNormalized)) {\n        this.months.push(this.capitalizeFirstLetter(startDateNormalized.format(\"MMMM YYYY MM\")).split(\" \"));\n        startDateNormalized.add(1, \"M\");\n      }\n\n      // Добавляем месяцы после текущего\n      for (let i = 0; i < monthAfter; i++) {\n        const monthslater = nowNormalized.clone().add(i, \"M\");\n        this.months.push(this.capitalizeFirstLetter(monthslater.format(\"MMMM YYYY MM\")).split(\" \"));\n      }\n    },\n    // изменяет выбранный месяц в списке (визуально)\n    changeCurrentMonth(value) {\n      this.firstDay = `${value[0]} ${value[1]}`;\n      const newDate = moment(`${value[0]}-${value[1]}`, \"MMMM-YYYY\").startOf(\"month\");\n      this.showWeek(newDate);\n    },\n    // переключает неделю на предыдущую (стрелка)\n    prevWeek(startDate) {\n      this.startLoading();\n      const previousWeek = this.currentWeek ? this.currentWeek.clone().subtract(1, \"week\") : moment().startOf(\"isoWeek\").subtract(1, \"week\");\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\n      if (previousWeek.isBefore(startDateNormalized)) {\n        if (!this.isFirstWeekReg) {\n          this.currentWeek = previousWeek;\n          this.days = [];\n          this.days = this.fillDays(this.currentWeek);\n          this.isArrowShow = false;\n        }\n        this.isFirstWeekReg = true;\n        // alert(\"Вы не можете перейти за начальную дату регистрации.\");\n      } else {\n        this.currentWeek = previousWeek;\n        this.days = [];\n        this.days = this.fillDays(this.currentWeek);\n      }\n      this.firstDay = `${this.capitalizeFirstLetter(this.days[0][2])}  ${this.days[0][3]}`;\n      this.loading();\n    },\n    // переключает неделю на следующую (стрелка)\n    nextWeek() {\n      this.startLoading();\n      this.isFirstWeekReg = false;\n      this.isArrowShow = true;\n      if (!this.currentWeek) {\n        // Если текущая неделя не определена, создаем ее и устанавливаем в текущую неделю\n        this.currentWeek = moment().add(1, \"week\").startOf(\"isoWeek\");\n      } else {\n        // Иначе переключаемся на следующую неделю\n        this.currentWeek.add(1, \"week\");\n      }\n      this.days = [];\n      this.days = this.fillDays(this.currentWeek);\n      this.firstDay = `${this.capitalizeFirstLetter(this.days[0][2])}  ${this.days[0][3]}`;\n      this.loading();\n    },\n    // делает заглавным первые буквы месяцев в списке (мб костыль)\n    capitalizeFirstLetter(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    },\n    // старт загрузки\n    startLoading() {\n      this.showLoader = true;\n      this.showCalendar = false;\n    },\n    // процесс загрузки\n    loading() {\n      // здесь будем получать данные с сервера\n      setTimeout(() => {\n        this.showLoader = false;\n        this.showCalendar = true;\n      }, 1000);\n    },\n    // Добавляем метод для вычисления стилей задачи\n    calculateTaskStyles(task) {\n      const colorTask = this.calculateTaskColor(task);\n      return {\n        'background-color': colorTask\n      };\n    },\n    // Добавляем метод для вычисления горизонтального положения задачи\n    calculateTaskLeft(task) {\n      const startMoment = moment(task.time.split(' - ')[0], 'HH:mm');\n      const containerStartMoment = moment(this.hours[0], 'HH:mm');\n      const diffInMinutes = startMoment.diff(containerStartMoment, 'minutes');\n      return diffInMinutes / 60 * 80; // 80 пикселей в часе\n    },\n\n    // Ваш существующий метод для вычисления цвета задачи\n    calculateTaskColor(task) {\n      if (task.type === 'EveryDay') {\n        return '#C4D7DA';\n      }\n      if (task.type === 'Working') {\n        return '#FFDEBF';\n      }\n      if (task.type === 'Common') {\n        return '#DDC9C3';\n      }\n    }\n  },\n  computed: {\n    taskStyles() {\n      return this.tasks.map(task => {\n        return {\n          ...this.calculateTaskStyles(task),\n          left: `${this.calculateTaskLeft(task)}px`\n        };\n      });\n    }\n  }\n};","map":{"version":3,"names":["moment","locale","data","presentDay","currentWeek","firstDay","hours","days","months","showSelect","isArrowShow","isFirstWeekReg","showLoader","showCalendar","tasks","name","id","time","type","registrationMonth","mounted","format","split","getMonths","showWeek","getHours","calculateTaskLengthInPixels","methods","currentHour","Number","i","hour","push","currentDate","weekStart","clone","startOf","fillDays","capitalizeFirstLetter","startDate","daysArray","day","add","monthAfter","nowNormalized","startDateNormalized","isBefore","monthslater","changeCurrentMonth","value","newDate","prevWeek","startLoading","previousWeek","subtract","loading","nextWeek","string","charAt","toUpperCase","slice","setTimeout","calculateTaskStyles","task","colorTask","calculateTaskColor","calculateTaskLeft","startMoment","containerStartMoment","diffInMinutes","diff","computed","taskStyles","map","left"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CalendarComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar__component\">\r\n    <div class=\"select__arrow\">\r\n    <div class=\"select\">\r\n      <div class=\"select__header\">\r\n        <div class=\"select__current\">{{ firstDay }} </div>\r\n        <img\r\n          @click=\"showSelect = !showSelect\"\r\n          :class=\"showSelect ? 'select__btn' : 'select__btn-isActive'\"\r\n          src=\"../../assets/images/home/select__btn.svg\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div :class=\"showSelect ? 'select__body-show' : 'select__body'\">\r\n        <div\r\n          @click=\"changeCurrentMonth(month)\"\r\n          class=\"select__item\"\r\n          v-for=\"month in months\"\r\n          :key=\"month\"\r\n        >\r\n          {{ month[0] }} {{ month[1] }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"arrows\">\r\n      <img\r\n        @click=\"prevWeek(this.registrationMonth)\"\r\n        src=\"../../assets/images/home/left-arrow.svg\"\r\n        alt=\"\"\r\n        :class=\"isArrowShow ? 'arrows__item' : 'arrows__item-hidden'\"\r\n      />\r\n      <img\r\n        @click=\"nextWeek()\"\r\n        src=\"../../assets/images/home/right-arrow.svg\"\r\n        alt=\"\"\r\n        class=\"arrows__item\"\r\n      />\r\n    </div>\r\n  </div>\r\n  <div class=\"calendar\">\r\n    <div class=\"week\">\r\n      <div\r\n        :class=\"\r\n          day[1] == presentDay[0] && day[2] == presentDay[1]\r\n            ? 'present-day'\r\n            : 'day'\r\n        \"\r\n        v-for=\"day in days\"\r\n        :key=\"day\"\r\n      >\r\n        <div class=\"day__number\">{{ day[1] }}</div>\r\n        <div class=\"day__text\">{{ day[0] }}</div>\r\n        <div class=\"day__text\">{{ day[2] }}</div>\r\n        <div class=\"day__text\">{{ day[3] }}</div>\r\n        <div class=\"day__line\">―</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"wrapper\" v-if=\"showLoader\">\r\n      <span class=\"loader\"></span>\r\n    </div>\r\n    <div class=\"calendar__taskboard\" v-else>\r\n      <div class=\"time\">\r\n\r\n      <div class=\"time__container\">\r\n        <span class=\"time__name\" v-for=\"hour in hours\" :key=\"hour\">{{ hour }}</span>\r\n        \r\n      </div>\r\n\r\n      \r\n    </div>\r\n    \r\n    <div class=\"task\" v-for=\"task in tasks\" :key=\"task.id\" :style=\"taskStyle(task)\">\r\n      <h5 class=\"task__name\">{{ task.name }}</h5>\r\n      <span class=\"task__time\">{{ task.time }}</span>\r\n    </div>\r\n\r\n    <!-- <div class=\"taskboard\">\r\n      \r\n      <div class=\"task\">\r\n        <h5 class=\"task__name\">Утренняя рутина</h5>\r\n        <span class=\"task__time\">7:00 - 8:00</span>\r\n      </div>\r\n      \r\n      \r\n    </div> -->\r\n    </div>\r\n\r\n  </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nmoment.locale(\"ru\");\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      presentDay: \"\",\r\n      currentWeek: \"\",\r\n      firstDay: \"\",\r\n\r\n      hours: [],\r\n      days: [],\r\n      months: [],\r\n\r\n      showSelect: false,\r\n      isArrowShow: true,\r\n      isFirstWeekReg: false, \r\n\r\n      // загрузка данных с сервера\r\n      showLoader: false,\r\n      showCalendar: true,\r\n\r\n\r\n      tasks: [{name: 'Утренняя рутина', id: 1, time: '07:00 - 09:00', type: 'EveryDay'}, {name: 'Вечерняя закалка', id: 2, time: '09:00 - 12:30', type: 'Working'},{name: 'Вечерняя закалка', id: 2, time: '09:00 - 17:30', type: 'Common'},],\r\n      registrationMonth: \"23-07-2023\", // user\r\n    };\r\n  },\r\n  mounted() {\r\n\r\n    this.presentDay = moment().format(\"DD-MMMM\").split(\"-\"); // установка текущего дня \r\n    // this.OAuth();\r\n    this.getMonths(this.registrationMonth); // загрузка в  select всех месяцев с даты регистрации по текущий + следующие\r\n    this.showWeek(moment());\r\n    this.getHours()\r\n    this.calculateTaskLengthInPixels(this.tasks[0])\r\n\r\n  },\r\n\r\n  methods: {\r\n    \r\n    //   // Функция для вычисления стиля задачи \r\n    //   taskStyle(task) {\r\n    //     const heightInPixels = this.calculateTaskLengthInPixels(task);\r\n    //     const colorTask = this.calculateTaskColor(task)\r\n    //     return {\r\n    //       height: heightInPixels + 'px', \r\n    //       'background-color': colorTask \r\n    //     }\r\n    //   },\r\n    \r\n    //   // Функция для вычисления фона задачи \r\n    //   calculateTaskColor(task){\r\n    //     if(task.type == 'EveryDay'){\r\n    //       return '#C4D7DA'\r\n    //     }\r\n    //     if(task.type == 'Working') {\r\n    //       return '#FFDEBF'\r\n    //     }\r\n    //     if (task.type == 'Common') {\r\n    //       return '#DDC9C3'\r\n    //     }\r\n    //   },\r\n\r\n    // // Функция для вычисления длины задачи в пикселях\r\n    // calculateTaskLengthInPixels(task) {\r\n    //   const [startTime, endTime] = task.time.split(' - ');\r\n\r\n    //   // Разбиваем время начала и времени окончания на часы и минуты\r\n    //   const [startHour, startMinute] = startTime.split(':').map(Number);\r\n    //   const [endHour, endMinute] = endTime.split(':').map(Number);\r\n\r\n    //   // Вычисляем продолжительность задачи в минутах\r\n    //   const durationInMinutes = (endHour - startHour) * 60 + (endMinute - startMinute);\r\n\r\n    //   // Вычисляем длину задачи в пикселях (1 час = 80 пикселей)\r\n    //   const lengthInPixels = (durationInMinutes / 60) * 80;\r\n\r\n    //   // Добавляем 10px за каждый пройденный час\r\n    //   const hoursElapsed = moment().diff(moment(startTime, 'HH:mm'), 'hours');\r\n    //   const additionalPixels = hoursElapsed * 12.5;\r\n\r\n    //   return lengthInPixels + additionalPixels;\r\n    // },\r\n\r\n    // загружаем часы с текущего на день вперед\r\n    getHours() {\r\n      let currentHour = Number(moment().format('HH'))\r\n      for (let i = 0; i < 24; i++) {\r\n        let hour = currentHour + i;\r\n        if (hour > 23) {\r\n          hour -= 24; \r\n        }\r\n        this.hours.push(`${hour}:00`)        \r\n      }\r\n    \r\n    },\r\n    // показывает текущую неделю на календаре (выбранную)\r\n    showWeek(currentDate) {\r\n      this.days = [];\r\n      const weekStart = currentDate.clone().startOf(\"week\");\r\n      this.currentWeek = weekStart;\r\n      this.days = this.fillDays(this.currentWeek);\r\n      this.firstDay = `${this.capitalizeFirstLetter(this.days[0][2])}  ${this.days[0][3]}`\r\n    },\r\n\r\n    // // заполнение днями недели текущей\r\n    fillDays(startDate) {\r\n      const daysArray = [];\r\n      for (let i = 0; i <= 6; i++) {\r\n        const day = moment(startDate).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\r\n        daysArray.push(day.split(\"-\"));\r\n      }\r\n      return daysArray;\r\n    },\r\n\r\n    // загружает месяца пользователя, с регистарации по текущий + 3 вперёд (настраиваемо)\r\n    getMonths(startDate, monthAfter = 3) {\r\n      const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\r\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\r\n        \"month\"\r\n      );\r\n      while (startDateNormalized.isBefore(nowNormalized)) {\r\n        this.months.push(\r\n          this.capitalizeFirstLetter(\r\n            startDateNormalized.format(\"MMMM YYYY MM\")\r\n          ).split(\" \")\r\n        );\r\n        startDateNormalized.add(1, \"M\");\r\n      }\r\n\r\n      // Добавляем месяцы после текущего\r\n      for (let i = 0; i < monthAfter; i++) {\r\n        const monthslater = nowNormalized.clone().add(i, \"M\");\r\n        this.months.push(\r\n          this.capitalizeFirstLetter(monthslater.format(\"MMMM YYYY MM\")).split(\r\n            \" \"\r\n          )\r\n        );\r\n      }\r\n    },\r\n\r\n    // изменяет выбранный месяц в списке (визуально)\r\n    changeCurrentMonth(value) {\r\n      this.firstDay = `${value[0]} ${value[1]}`;\r\n      const newDate = moment(`${value[0]}-${value[1]}`, \"MMMM-YYYY\").startOf(\"month\");\r\n      this.showWeek(newDate);\r\n    },\r\n\r\n    // переключает неделю на предыдущую (стрелка)\r\n    prevWeek(startDate) {\r\n      this.startLoading();\r\n\r\n      const previousWeek = this.currentWeek\r\n        ? this.currentWeek.clone().subtract(1, \"week\")\r\n        : moment().startOf(\"isoWeek\").subtract(1, \"week\");\r\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\r\n        \"month\"\r\n      );\r\n      \r\n      if (previousWeek.isBefore(startDateNormalized)) {\r\n        if(!this.isFirstWeekReg) {\r\n          this.currentWeek = previousWeek;\r\n          this.days = [];\r\n          this.days = this.fillDays(this.currentWeek);\r\n          this.isArrowShow = false;\r\n        }\r\n        this.isFirstWeekReg = true \r\n        // alert(\"Вы не можете перейти за начальную дату регистрации.\");\r\n        \r\n      } else {\r\n        this.currentWeek = previousWeek;\r\n        this.days = [];\r\n        this.days = this.fillDays(this.currentWeek);\r\n      }\r\n      this.firstDay = `${this.capitalizeFirstLetter(this.days[0][2])}  ${this.days[0][3]}`\r\n      this.loading();\r\n    },\r\n\r\n    // переключает неделю на следующую (стрелка)\r\n    nextWeek() {\r\n      this.startLoading();\r\n      this.isFirstWeekReg = false \r\n      this.isArrowShow = true;\r\n      if (!this.currentWeek) {\r\n        // Если текущая неделя не определена, создаем ее и устанавливаем в текущую неделю\r\n        this.currentWeek = moment().add(1, \"week\").startOf(\"isoWeek\");\r\n      } else {\r\n        // Иначе переключаемся на следующую неделю\r\n        this.currentWeek.add(1, \"week\");\r\n      }\r\n      this.days = [];\r\n\r\n      this.days = this.fillDays(this.currentWeek);\r\n      this.firstDay = `${this.capitalizeFirstLetter(this.days[0][2])}  ${this.days[0][3]}`\r\n      this.loading();\r\n    },\r\n\r\n    // делает заглавным первые буквы месяцев в списке (мб костыль)\r\n    capitalizeFirstLetter(string) {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n    },\r\n\r\n    // старт загрузки\r\n    startLoading() {\r\n      this.showLoader = true;\r\n      this.showCalendar = false;\r\n    },\r\n    // процесс загрузки\r\n    loading() {\r\n      // здесь будем получать данные с сервера\r\n      setTimeout(() => {\r\n        this.showLoader = false;\r\n        this.showCalendar = true;\r\n      }, 1000);\r\n    },\r\n    // Добавляем метод для вычисления стилей задачи\r\n  calculateTaskStyles(task) {\r\n    const colorTask = this.calculateTaskColor(task);\r\n    return {\r\n      'background-color': colorTask\r\n    };\r\n  },\r\n\r\n  // Добавляем метод для вычисления горизонтального положения задачи\r\n  calculateTaskLeft(task) {\r\n    const startMoment = moment(task.time.split(' - ')[0], 'HH:mm');\r\n    const containerStartMoment = moment(this.hours[0], 'HH:mm');\r\n    const diffInMinutes = startMoment.diff(containerStartMoment, 'minutes');\r\n    return (diffInMinutes / 60) * 80; // 80 пикселей в часе\r\n  },\r\n\r\n  // Ваш существующий метод для вычисления цвета задачи\r\n  calculateTaskColor(task) {\r\n    if (task.type === 'EveryDay') {\r\n      return '#C4D7DA';\r\n    }\r\n    if (task.type === 'Working') {\r\n      return '#FFDEBF';\r\n    }\r\n    if (task.type === 'Common') {\r\n      return '#DDC9C3';\r\n    }\r\n  }\r\n  },\r\n  computed: {\r\n  taskStyles() {\r\n    return this.tasks.map((task) => {\r\n      return {\r\n        ...this.calculateTaskStyles(task),\r\n        left: `${this.calculateTaskLeft(task)}px`\r\n      };\r\n    });\r\n  }\r\n},\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.wrapper {\r\n  margin: 100px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n.loader {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 5px solid black;\r\n  border-bottom-color: transparent;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n  box-sizing: border-box;\r\n  animation: rotation 1s linear infinite;\r\n}\r\n\r\n@keyframes rotation {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}