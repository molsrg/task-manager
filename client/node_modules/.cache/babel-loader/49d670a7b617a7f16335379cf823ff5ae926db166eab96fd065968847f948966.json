{"ast":null,"code":"import axios from 'axios';\nexport default {\n  state() {\n    return {\n      registration: '23-07-2023',\n      tasklist: [{\n        title: 'Текущий день',\n        toggleCircle: false,\n        isTasklistVisible: false,\n        tasks: []\n      }, {\n        title: 'Неделя на календаре',\n        toggleCircle: false,\n        isTasklistVisible: false,\n        tasks: []\n      }],\n      selectTask: []\n    };\n  },\n  getters: {\n    USER_REGISTRATIONS: state => {\n      return state.registration;\n    },\n    USER_TASKLISTS: state => {\n      return state.tasklist;\n    },\n    USER_SELECT_TASKS: state => {\n      return state.selectTask;\n    },\n    USER_TASKS_IN_CALENDAR: state => {\n      return state.tasklist[1].tasks;\n    }\n  },\n  mutations: {\n    UPDATE_VISIBLE_TASKLIST: (state, idx) => {\n      state.tasklist[idx].toggleCircle = !state.tasklist[idx].toggleCircle;\n      state.tasklist[idx].isTasklistVisible = !state.tasklist[idx].isTasklistVisible;\n    },\n    UPDATE_SELECT_TASKS: (state, response) => {\n      state.selectTask = response;\n    },\n    UPDATE_THIS_DAY_TASKS: (state, response) => {\n      state.tasklist[0].tasks = response;\n    },\n    UPDATE_THIS_WEEK_TASKS: (state, response) => {\n      state.tasklist[1].tasks = response;\n    },\n    UPDATE_TASKLIST: (state, data) => {\n      const baseList = state.tasklist.slice(0, 2);\n      state.tasklist = [...baseList, ...data];\n    }\n  },\n  actions: {}\n};","map":{"version":3,"names":["axios","state","registration","tasklist","title","toggleCircle","isTasklistVisible","tasks","selectTask","getters","USER_REGISTRATIONS","USER_TASKLISTS","USER_SELECT_TASKS","USER_TASKS_IN_CALENDAR","mutations","UPDATE_VISIBLE_TASKLIST","idx","UPDATE_SELECT_TASKS","response","UPDATE_THIS_DAY_TASKS","UPDATE_THIS_WEEK_TASKS","UPDATE_TASKLIST","data","baseList","slice","actions"],"sources":["C:/Users/Sergey/Documents/GitHub/task-manager/client/src/store/modules/Application.js"],"sourcesContent":["import axios from 'axios'\r\nexport default {\r\n\r\n    state() {\r\n        return {\r\n            registration: '23-07-2023',\r\n            tasklist: [\r\n                {\r\n                    title: 'Текущий день',\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    tasks: [],\r\n                }, \r\n                {\r\n                    title: 'Неделя на календаре',\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    tasks: [],\r\n                }, \r\n            ], \r\n            selectTask: []\r\n        }\r\n        \r\n    }, \r\n    getters: {\r\n        USER_REGISTRATIONS: state => {\r\n            return state.registration\r\n        },\r\n        USER_TASKLISTS: state => {\r\n            return state.tasklist\r\n        }, \r\n        USER_SELECT_TASKS: state => {\r\n            return state.selectTask\r\n        }, \r\n\r\n        USER_TASKS_IN_CALENDAR: state => {\r\n            return state.tasklist[1].tasks\r\n        }\r\n    }, \r\n    mutations: {\r\n        UPDATE_VISIBLE_TASKLIST: (state, idx) => {\r\n            state.tasklist[idx].toggleCircle = !state.tasklist[idx].toggleCircle\r\n            state.tasklist[idx].isTasklistVisible = !state.tasklist[idx].isTasklistVisible\r\n        }, \r\n        UPDATE_SELECT_TASKS: (state, response) => {\r\n            state.selectTask = response\r\n        }, \r\n        UPDATE_THIS_DAY_TASKS: (state, response) => {\r\n            state.tasklist[0].tasks = response\r\n        }, \r\n        UPDATE_THIS_WEEK_TASKS: (state, response) => {\r\n            state.tasklist[1].tasks = response\r\n        }, \r\n        UPDATE_TASKLIST: (state, data) => {\r\n            const baseList = state.tasklist.slice(0,2)\r\n            state.tasklist = [...baseList, ...data]\r\n        }, \r\n    }, \r\n    actions: {\r\n        \r\n    }\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,eAAe;EAEXC,KAAKA,CAAA,EAAG;IACJ,OAAO;MACHC,YAAY,EAAE,YAAY;MAC1BC,QAAQ,EAAE,CACN;QACIC,KAAK,EAAE,cAAc;QACrBC,YAAY,EAAE,KAAK;QACnBC,iBAAiB,EAAE,KAAK;QACxBC,KAAK,EAAE;MACX,CAAC,EACD;QACIH,KAAK,EAAE,qBAAqB;QAC5BC,YAAY,EAAE,KAAK;QACnBC,iBAAiB,EAAE,KAAK;QACxBC,KAAK,EAAE;MACX,CAAC,CACJ;MACDC,UAAU,EAAE;IAChB,CAAC;EAEL,CAAC;EACDC,OAAO,EAAE;IACLC,kBAAkB,EAAET,KAAK,IAAI;MACzB,OAAOA,KAAK,CAACC,YAAY;IAC7B,CAAC;IACDS,cAAc,EAAEV,KAAK,IAAI;MACrB,OAAOA,KAAK,CAACE,QAAQ;IACzB,CAAC;IACDS,iBAAiB,EAAEX,KAAK,IAAI;MACxB,OAAOA,KAAK,CAACO,UAAU;IAC3B,CAAC;IAEDK,sBAAsB,EAAEZ,KAAK,IAAI;MAC7B,OAAOA,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACI,KAAK;IAClC;EACJ,CAAC;EACDO,SAAS,EAAE;IACPC,uBAAuB,EAAEA,CAACd,KAAK,EAAEe,GAAG,KAAK;MACrCf,KAAK,CAACE,QAAQ,CAACa,GAAG,CAAC,CAACX,YAAY,GAAG,CAACJ,KAAK,CAACE,QAAQ,CAACa,GAAG,CAAC,CAACX,YAAY;MACpEJ,KAAK,CAACE,QAAQ,CAACa,GAAG,CAAC,CAACV,iBAAiB,GAAG,CAACL,KAAK,CAACE,QAAQ,CAACa,GAAG,CAAC,CAACV,iBAAiB;IAClF,CAAC;IACDW,mBAAmB,EAAEA,CAAChB,KAAK,EAAEiB,QAAQ,KAAK;MACtCjB,KAAK,CAACO,UAAU,GAAGU,QAAQ;IAC/B,CAAC;IACDC,qBAAqB,EAAEA,CAAClB,KAAK,EAAEiB,QAAQ,KAAK;MACxCjB,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACI,KAAK,GAAGW,QAAQ;IACtC,CAAC;IACDE,sBAAsB,EAAEA,CAACnB,KAAK,EAAEiB,QAAQ,KAAK;MACzCjB,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACI,KAAK,GAAGW,QAAQ;IACtC,CAAC;IACDG,eAAe,EAAEA,CAACpB,KAAK,EAAEqB,IAAI,KAAK;MAC9B,MAAMC,QAAQ,GAAGtB,KAAK,CAACE,QAAQ,CAACqB,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC;MAC1CvB,KAAK,CAACE,QAAQ,GAAG,CAAC,GAAGoB,QAAQ,EAAE,GAAGD,IAAI,CAAC;IAC3C;EACJ,CAAC;EACDG,OAAO,EAAE,CAET;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}