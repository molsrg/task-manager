{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar__taskboard\"\n};\nconst _hoisted_2 = {\n  class: \"time\"\n};\nconst _hoisted_3 = {\n  class: \"time__container\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"task__name\"\n};\nconst _hoisted_6 = {\n  class: \"task__time\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.CURRENT_HOURS, hour => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      class: \"time__name\",\n      key: hour\n    }, _toDisplayString(hour), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.USER_TASKS_IN_CALENDAR, task => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"task\",\n      key: task.id,\n      style: _normalizeStyle($options.taskStyle(task)),\n      onClick: $event => $options.showTask(task)\n    }, [_createElementVNode(\"h5\", _hoisted_5, _toDisplayString(task.name), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_6, _toDisplayString($options.formatTime(task.startTime)) + \" - \" + _toDisplayString($options.formatTime(task.endTime)), 1 /* TEXT */), _createCommentVNode(\" <button @click=\\\"isTaskOverflowed\\\">Выбрать</button> \")], 12 /* STYLE, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","_ctx","CURRENT_HOURS","hour","key","USER_TASKS_IN_CALENDAR","task","id","style","_normalizeStyle","$options","taskStyle","onClick","$event","showTask","_hoisted_5","_toDisplayString","name","_hoisted_6","formatTime","startTime","endTime","_createCommentVNode"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CALENDAR\\CalendarApp.vue"],"sourcesContent":["<template>\r\n    <div class=\"calendar__taskboard\">\r\n        <div class=\"time\">\r\n        <div class=\"time__container\" >\r\n            <span class=\"time__name\" v-for=\"hour in CURRENT_HOURS\" :key=\"hour\" >{{ hour }}</span>\r\n            \r\n        </div>\r\n        </div>\r\n        <div class=\"task\" v-for=\"task in USER_TASKS_IN_CALENDAR\" :key=\"task.id\" :style=\"taskStyle(task)\" @click=\"showTask(task)\">  \r\n        <h5 class=\"task__name\">{{ task.name }}</h5>\r\n        <span class=\"task__time\">{{ formatTime(task.startTime) }} - {{ formatTime(task.endTime) }}</span>\r\n        <!-- <button @click=\"isTaskOverflowed\">Выбрать</button> -->\r\n        </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport Task from '../../../store/modules/Task/Task'\r\n\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\nmoment.locale(\"ru\");\r\n\r\nexport default {\r\n\r\n  data() {\r\n    return {\r\n      currentWeek: moment().clone().startOf(\"week\"),\r\n\r\n      showSelect: false, // меняет состоянике стрелки в списке месяцев\r\n      isArrowShow: true, // убирает стрелку при достижении недели регистрации\r\n      isFirstWeekReg: false, // тоже для первой регистрации\r\n\r\n      // загрузка данных с сервера\r\n      showLoader: false,\r\n      showCalendar: true,\r\n\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['CURRENT_HOURS',   'USER_TASKS_IN_CALENDAR']), \r\n    \r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scrollToCurrentHour();\r\n    });\r\n\r\n    this.CHANGE_WEEK(moment())\r\n    this.GET_HOURS();\r\n    this.GET_PRESENT_DAY()\r\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\r\n\r\n\r\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n    this.GET_TASKLIST() // other\r\n  \r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS','GET_THIS_DAY_TASKS', 'GET_TASKLIST']), \r\n    ...mapMutations(['UPDATE_WEEK', 'UPDATE_FIRST_DAY_WEEK', 'UPDATE_CHECKED_TASK']),\r\n\r\n    isTaskOverflowed(task) {\r\n      const taskElement = this.$refs[`${task.id}`]; \r\n      console.log(taskElement)\r\n    },\r\n\r\n    // обновляет выбранную задачу \r\n    showTask(task){\r\n      this.UPDATE_CHECKED_TASK(task)\r\n    },\r\n\r\n    // приводит дату к нужному формату в отображении задачи на календаре\r\n    formatTime(dateTime){\r\n      const d = new Date(dateTime)\r\n\r\n      const res = [d.getHours(), d.getMinutes()].map(function (x) {\r\n        return x < 10 ? \"0\" + x : x\r\n      }).join(\":\")\r\n\r\n      return res\r\n\r\n    },\r\n    // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n  const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n  if (taskboardContainer) {\r\n    const currentHour = `${Number(moment().format('HH'))}:00`; \r\n    const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n    \r\n    for (let i = 0; i < hourElements.length; i++) {\r\n      if (hourElements[i].textContent === currentHour) {\r\n        const containerRect = taskboardContainer.getBoundingClientRect();\r\n        const hourRect = hourElements[i].getBoundingClientRect();\r\n        const scrollTop = hourRect.top - containerRect.top;\r\n        taskboardContainer.scrollTop = scrollTop;\r\n        return; // Выходим из цикла, когда нашли нужный час\r\n      }\r\n    }\r\n    \r\n    console.error(\"Час не найден в .calendar__taskboard.\");\r\n  } else {\r\n    console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n  }\r\n},\r\n    // Функция для вычисления стиля задачи \r\n    taskStyle(task) {\r\n      const heightInPixels = Task.calculateTaskLengthInPixels(task);\r\n      // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\r\n      const colorTask = Task.calculateTaskColor(task)\r\n      const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK)\r\n      const startPosition = Task.calculateTaskStartPosition(task)\r\n\r\n      return {\r\n        height: heightInPixels + 'px', \r\n        'background-color': colorTask, \r\n        top: startPosition + 'px',\r\n        left: leftPosition + 'px', \r\n      }\r\n    },\r\n  \r\n    \r\n    // старт загрузки\r\n    startLoading() {\r\n      this.showLoader = true;\r\n      this.showCalendar = false;\r\n    },\r\n    // процесс загрузки\r\n    async loading() {\r\n  return new Promise((resolve) => {\r\n    // Здесь выполняются асинхронные действия, например, задержка в 1 секунду\r\n    setTimeout(() => {\r\n      this.showLoader = false;\r\n      this.showCalendar = true;\r\n      resolve(); // Разрешить промис после выполнения\r\n    }, 1000);\r\n  });\r\n},\r\n    \r\n  },\r\n  \r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAqB;;EACvBA,KAAK,EAAC;AAAM;;EACZA,KAAK,EAAC;AAAiB;;;EAMxBA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAY;;uBAT5BC,mBAAA,CAYE,OAZFC,UAYE,GAXEC,mBAAA,CAKM,OALNC,UAKM,GAJND,mBAAA,CAGM,OAHNE,UAGM,I,kBAFFJ,mBAAA,CAAqFK,SAAA,QAAAC,WAAA,CAA7CC,IAAA,CAAAC,aAAa,EAArBC,IAAI;yBAApCT,mBAAA,CAAqF;MAA/ED,KAAK,EAAC,YAAY;MAAgCW,GAAG,EAAED;wBAAUA,IAAI;yDAI/ET,mBAAA,CAIMK,SAAA,QAAAC,WAAA,CAJ2BC,IAAA,CAAAI,sBAAsB,EAA9BC,IAAI;yBAA7BZ,mBAAA,CAIM;MAJDD,KAAK,EAAC,MAAM;MAAyCW,GAAG,EAAEE,IAAI,CAACC,EAAE;MAAGC,KAAK,EAAAC,eAAA,CAAEC,QAAA,CAAAC,SAAS,CAACL,IAAI;MAAIM,OAAK,EAAAC,MAAA,IAAEH,QAAA,CAAAI,QAAQ,CAACR,IAAI;QACtHV,mBAAA,CAA2C,MAA3CmB,UAA2C,EAAAC,gBAAA,CAAjBV,IAAI,CAACW,IAAI,kBACnCrB,mBAAA,CAAiG,QAAjGsB,UAAiG,EAAAF,gBAAA,CAArEN,QAAA,CAAAS,UAAU,CAACb,IAAI,CAACc,SAAS,KAAI,KAAG,GAAAJ,gBAAA,CAAGN,QAAA,CAAAS,UAAU,CAACb,IAAI,CAACe,OAAO,mBACtFC,mBAAA,0DAA2D,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}