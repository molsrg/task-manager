{"ast":null,"code":"import moment from \"moment\";\n// eslint-disable-next-line no-unused-vars\nimport Task from '../../../store/modules/Task/Task';\nimport { mapGetters, mapMutations } from 'vuex';\nexport default {\n  mounted() {\n    this.$nextTick(() => {\n      this.scrollToCurrentHour();\n    });\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    ...mapGetters(['CURRENT_HOURS', 'USER_TASKS_IN_CALENDAR', 'CURRENT_WEEK'])\n  },\n  methods: {\n    // автоматически скролит к нужному времени при открытии страницы\n    scrollToCurrentHour() {\n      console.log(1);\n      const taskboardContainer = document.querySelector('.calendar__taskboard');\n      if (taskboardContainer) {\n        const currentHour = `${Number(moment().format('HH'))}:00`;\n        const hourElements = taskboardContainer.querySelectorAll('.time__name');\n        for (let i = 0; i < hourElements.length; i++) {\n          if (hourElements[i].textContent === currentHour) {\n            const containerRect = taskboardContainer.getBoundingClientRect();\n            const hourRect = hourElements[i].getBoundingClientRect();\n            const scrollTop = hourRect.top - containerRect.top;\n            taskboardContainer.scrollTop = scrollTop;\n            return; // Выходим из цикла, когда нашли нужный час\n          }\n        }\n\n        console.error(\"Час не найден в .calendar__taskboard.\");\n      } else {\n        console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\n      }\n    },\n    ...mapMutations(['UPDATE_CHECKED_TASK']),\n    // Функция для вычисления стиля задачи \n    taskStyle(task) {\n      const heightInPixels = Task.calculateTaskLengthInPixels(task);\n      // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\n      const colorTask = Task.calculateTaskColor(task);\n      const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK);\n      const startPosition = Task.calculateTaskStartPosition(task);\n      return {\n        height: heightInPixels + 'px',\n        'background-color': colorTask,\n        top: startPosition + 'px',\n        left: leftPosition + 'px'\n      };\n    },\n    // обновляет выбранную задачу \n    showTask(task) {\n      this.UPDATE_CHECKED_TASK(task);\n    },\n    // приводит дату к нужному формату в отображении задачи на календаре\n    formatTime(dateTime) {\n      const date = dateTime.split('T')[1].split(':');\n      const res = `${date[0]}:${date[1]}`;\n      return res;\n      // const date = new Date(dateTime)\n      // const res = [date.getHours(), date.getMinutes()].map(function (x) {\n      //     return x < 10 ? \"0\" + x : x\n      // }).join(\":\")\n\n      // return res\n    }\n  }\n};","map":{"version":3,"names":["moment","Task","mapGetters","mapMutations","mounted","$nextTick","scrollToCurrentHour","data","computed","methods","console","log","taskboardContainer","document","querySelector","currentHour","Number","format","hourElements","querySelectorAll","i","length","textContent","containerRect","getBoundingClientRect","hourRect","scrollTop","top","error","taskStyle","task","heightInPixels","calculateTaskLengthInPixels","colorTask","calculateTaskColor","leftPosition","calculateLeftPosition","CURRENT_WEEK","startPosition","calculateTaskStartPosition","height","left","showTask","UPDATE_CHECKED_TASK","formatTime","dateTime","date","split","res"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CALENDAR\\CalendarApp.vue"],"sourcesContent":["<template>\r\n    <div class=\"taskboard\">\r\n        <div class=\"time\">\r\n            <div class=\"time_container\" >\r\n                <span class=\"time_name\" v-for=\"hour in CURRENT_HOURS\" :key=\"hour\" >{{ hour }}</span>\r\n                \r\n            </div>\r\n        </div>\r\n        <div class=\"task\" v-for=\"task in USER_TASKS_IN_CALENDAR\" :key=\"task.id\" :style=\"taskStyle(task)\" @click=\"showTask(task)\">  \r\n            <h5 class=\"task_name\">{{ task.name }}</h5>\r\n            <span class=\"task_time\">{{ formatTime(task.startTime) }} - {{ formatTime(task.endTime) }}</span>\r\n            <!-- <button @click=\"isTaskOverflowed\">Выбрать</button> -->\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport Task from '../../../store/modules/Task/Task'\r\n\r\nimport { mapGetters, mapMutations } from 'vuex';\r\n\r\nexport default {\r\n    mounted(){\r\n        this.$nextTick(() => {\r\n            this.scrollToCurrentHour();\r\n        });\r\n    },\r\n    data() {\r\n        return {\r\n\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters(['CURRENT_HOURS', 'USER_TASKS_IN_CALENDAR', 'CURRENT_WEEK']), \r\n        \r\n    },\r\n    methods: {\r\n        // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n        console.log(1)\r\n        const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n        if (taskboardContainer) {\r\n            const currentHour = `${Number(moment().format('HH'))}:00`; \r\n            const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n            \r\n            for (let i = 0; i < hourElements.length; i++) {\r\n            if (hourElements[i].textContent === currentHour) {\r\n                const containerRect = taskboardContainer.getBoundingClientRect();\r\n                const hourRect = hourElements[i].getBoundingClientRect();\r\n                const scrollTop = hourRect.top - containerRect.top;\r\n                taskboardContainer.scrollTop = scrollTop;\r\n                return; // Выходим из цикла, когда нашли нужный час\r\n            }\r\n        }\r\n        \r\n        console.error(\"Час не найден в .calendar__taskboard.\");\r\n    } else {\r\n        console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n    }\r\n    },\r\n        ...mapMutations(['UPDATE_CHECKED_TASK']),\r\n        // Функция для вычисления стиля задачи \r\n        taskStyle(task) {\r\n            const heightInPixels = Task.calculateTaskLengthInPixels(task);\r\n            // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\r\n            const colorTask = Task.calculateTaskColor(task)\r\n            const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK)\r\n            const startPosition = Task.calculateTaskStartPosition(task)\r\n\r\n            return {\r\n                height: heightInPixels + 'px', \r\n                'background-color': colorTask, \r\n                top: startPosition + 'px',\r\n                left: leftPosition + 'px', \r\n            }\r\n        },\r\n        // обновляет выбранную задачу \r\n        showTask(task){\r\n            this.UPDATE_CHECKED_TASK(task)\r\n        },\r\n        // приводит дату к нужному формату в отображении задачи на календаре\r\n        formatTime(dateTime){\r\n            const date = dateTime.split('T')[1].split(':')\r\n            const res = `${date[0]}:${date[1]}`\r\n            \r\n            return res\r\n            // const date = new Date(dateTime)\r\n            // const res = [date.getHours(), date.getMinutes()].map(function (x) {\r\n            //     return x < 10 ? \"0\" + x : x\r\n            // }).join(\":\")\r\n\r\n            // return res\r\n\r\n        },\r\n    }\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.taskboard {\r\n    overflow-y: auto;\r\n    max-height: calc(100vh - 280px);\r\n    width: 1340px;\r\n    position: relative; /* Добавьте это */\r\n}\r\n\r\n.time {\r\n    width: 38px;\r\n    margin-right: 30px;\r\n    margin-bottom: 65px;\r\n}\r\n\r\n.time_container{\r\n    display: flex;\r\n    gap: 65px;\r\n    flex-direction: column;\r\n}\r\n\r\n.time_container span{\r\n    position: relative;\r\n}\r\n\r\n.time_container span:after{\r\n    display: block;\r\n    width:1266px;\r\n    content: '';\r\n    position: absolute;\r\n    border-bottom: 1px solid #000;\r\n    top:1%;\r\n    left: 56px; \r\n}\r\n.time_name {\r\n    font-family: Poppins;\r\n    font-size: 16px;\r\n    font-weight: 300;\r\n    line-height: 24px;\r\n}\r\n\r\n\r\n.task{\r\n    font-family: Raleway;\r\n    font-size: 14px;\r\n\r\n    width: 173px;\r\n    border-radius: 8px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    opacity: 1;\r\n    transform: translateY(20px); /* Сдвиг вниз на 20px, вы можете настроить его по своему усмотрению */\r\n    transition: opacity 0.5s ease, transform 0.5s ease;\r\n\r\n    overflow: hidden;\r\n    \r\n}\r\n\r\n.task_name {\r\n    font-weight: 600;\r\n    color:#0C3C44;\r\n    padding: 4px 6px;\r\n    word-wrap: break-word;\r\n}\r\n.task_time {\r\n    font-weight: 400;\r\n    color: #296B76;\r\n    padding: 0px 6px;\r\n}\r\n</style>"],"mappings":"AAiBA,OAAOA,MAAK,MAAO,QAAQ;AAC3B;AACA,OAAOC,IAAG,MAAO,kCAAiC;AAElD,SAASC,UAAU,EAAEC,YAAW,QAAS,MAAM;AAE/C,eAAe;EACXC,OAAOA,CAAA,EAAE;IACL,IAAI,CAACC,SAAS,CAAC,MAAM;MACjB,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;EACDC,IAAIA,CAAA,EAAG;IACH,OAAO,CAEP;EACJ,CAAC;EACDC,QAAQ,EAAE;IACN,GAAGN,UAAU,CAAC,CAAC,eAAe,EAAE,wBAAwB,EAAE,cAAc,CAAC;EAE7E,CAAC;EACDO,OAAO,EAAE;IACL;IACJH,mBAAmBA,CAAA,EAAG;MAClBI,OAAO,CAACC,GAAG,CAAC,CAAC;MACb,MAAMC,kBAAiB,GAAIC,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;MACzE,IAAIF,kBAAkB,EAAE;QACpB,MAAMG,WAAU,GAAK,GAAEC,MAAM,CAAChB,MAAM,CAAC,CAAC,CAACiB,MAAM,CAAC,IAAI,CAAC,CAAE,KAAI;QACzD,MAAMC,YAAW,GAAIN,kBAAkB,CAACO,gBAAgB,CAAC,aAAa,CAAC;QAEvE,KAAK,IAAIC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIF,YAAY,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;UAC9C,IAAIF,YAAY,CAACE,CAAC,CAAC,CAACE,WAAU,KAAMP,WAAW,EAAE;YAC7C,MAAMQ,aAAY,GAAIX,kBAAkB,CAACY,qBAAqB,CAAC,CAAC;YAChE,MAAMC,QAAO,GAAIP,YAAY,CAACE,CAAC,CAAC,CAACI,qBAAqB,CAAC,CAAC;YACxD,MAAME,SAAQ,GAAID,QAAQ,CAACE,GAAE,GAAIJ,aAAa,CAACI,GAAG;YAClDf,kBAAkB,CAACc,SAAQ,GAAIA,SAAS;YACxC,OAAM,CAAE;UACZ;QACJ;;QAEAhB,OAAO,CAACkB,KAAK,CAAC,uCAAuC,CAAC;MAC1D,OAAO;QACHlB,OAAO,CAACkB,KAAK,CAAC,+CAA+C,CAAC;MAClE;IACA,CAAC;IACG,GAAGzB,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC;IACxC;IACA0B,SAASA,CAACC,IAAI,EAAE;MACZ,MAAMC,cAAa,GAAI9B,IAAI,CAAC+B,2BAA2B,CAACF,IAAI,CAAC;MAC7D;MACA,MAAMG,SAAQ,GAAIhC,IAAI,CAACiC,kBAAkB,CAACJ,IAAI;MAC9C,MAAMK,YAAW,GAAIlC,IAAI,CAACmC,qBAAqB,CAACN,IAAI,EAAE,IAAI,CAACO,YAAY;MACvE,MAAMC,aAAY,GAAIrC,IAAI,CAACsC,0BAA0B,CAACT,IAAI;MAE1D,OAAO;QACHU,MAAM,EAAET,cAAa,GAAI,IAAI;QAC7B,kBAAkB,EAAEE,SAAS;QAC7BN,GAAG,EAAEW,aAAY,GAAI,IAAI;QACzBG,IAAI,EAAEN,YAAW,GAAI;MACzB;IACJ,CAAC;IACD;IACAO,QAAQA,CAACZ,IAAI,EAAC;MACV,IAAI,CAACa,mBAAmB,CAACb,IAAI;IACjC,CAAC;IACD;IACAc,UAAUA,CAACC,QAAQ,EAAC;MAChB,MAAMC,IAAG,GAAID,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG;MAC7C,MAAMC,GAAE,GAAK,GAAEF,IAAI,CAAC,CAAC,CAAE,IAAGA,IAAI,CAAC,CAAC,CAAE;MAElC,OAAOE,GAAE;MACT;MACA;MACA;MACA;;MAEA;IAEJ;EACJ;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}