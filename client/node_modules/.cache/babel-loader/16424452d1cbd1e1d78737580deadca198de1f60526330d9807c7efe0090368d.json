{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"parent\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AuthorizationClient.vue"],"sourcesContent":["<template>\r\n  <div class=\"parent\">\r\n\r\n  </div>\r\n  \r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  data(){\r\n    return { \r\n      login: '', \r\n      mail: '', \r\n      password: '', \r\n      confirm_password: '', \r\n\r\n\r\n      title: 'Регистрация', \r\n      subtitle: 'Вход', \r\n      auth: 'Зарегистрироваться',\r\n      errors: [],\r\n\r\n    }\r\n  }, \r\n\r\n  methods: {\r\n\r\n    authUser(event) {\r\n      event.preventDefault();\r\n      this.validForm()\r\n\r\n      if(this.errors.length == 0){\r\n        let data = {}\r\n        let type = ''\r\n\r\n        if(this.auth == 'Зарегистрироваться'){\r\n          data = {\r\n          username: this.login,\r\n          email: this.mail,\r\n          password: this.password,\r\n            } \r\n          \r\n          type = 'registration'\r\n        }\r\n        else if (this.auth == 'Войти') {\r\n          data = {\r\n            email: this.mail,\r\n            password: this.password,\r\n          }\r\n\r\n          type = 'login'\r\n        }\r\n        axios.post(`http://localhost:5000/auth/${type}`, data)\r\n          .then((response) => {\r\n              this.login = ''\r\n              this.mail = '', \r\n              this.password = '', \r\n              this.confirm_password = ''\r\n\r\n              alert(\"Все прошло успешно, можете входить в систему\")\r\n              if(type == 'login'){\r\n                const token = response.data.AccessToken\r\n                localStorage.setItem('AccessToken', token); // write\r\n                // console.log(localStorage.getItem('AccessToken')); // read\r\n\r\n                window.location.href = \"http://localhost:8080/home\"\r\n              }\r\n              \r\n          })\r\n\r\n          .catch((error) => {\r\n            this.errors = [error.response.data?.errors]\r\n            this.errors = [error.response.data?.message]\r\n\r\n            if(error.response.data?.message == \"Почтовый адрес уже был зарегистрирован\"){\r\n              this.mail = \"\"\r\n            }\r\n            if(error.response.data?.message == \"Пользователь с таким именем уже существует\"){\r\n              this.login = \"\"\r\n            }\r\n            if(error.response.data?.message == \"Введен неверный пароль\"){\r\n              this.password = \"\"\r\n            }\r\n\r\n          })   \r\n      }\r\n      \r\n    },     \r\n    validForm(){\r\n      const regex = /^(?=.*[A-Za-z])([A-Za-z0-9]+)$/;\r\n      this.errors = []\r\n      if(this.title == 'Регистрация'){\r\n        if(this.password !== this.confirm_password){\r\n                this.errors.push(\"Пароли не совпадают\")\r\n                this.password = ''\r\n                this.confirm_password = ''\r\n              }\r\n      }\r\n      \r\n      if(!regex.test(this.password)){\r\n        this.errors.push(\"Пароль не прошел валидацию\")\r\n        this.password = ''\r\n        this.confirm_password = ''\r\n      }\r\n    },\r\n\r\n\r\n\r\n    AuthOrReg(){\r\n\r\n      this.errors = []\r\n      this.login = ''\r\n      this.mail = '', \r\n      this.password = '', \r\n      this.confirm_password = ''\r\n\r\n      if(this.subtitle == \"Вход\"){\r\n        this.title = \"Вход\"\r\n        this.subtitle = \"Регистрация\"\r\n        this.auth = \"Войти\"\r\n\r\n      }\r\n\r\n      else if(this.subtitle == \"Регистрация\"){\r\n        this.title = \"Регистрация\"\r\n        this.subtitle = \"Вход\"\r\n        this.auth = \"Зарегистрироваться\"\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAQ;;uBAAnBC,mBAAA,CAEM,OAFNC,UAEM"},"metadata":{},"sourceType":"module","externalDependencies":[]}