{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-76d28682\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"calendar__component\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CalendarComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar__component\">\r\n    \r\n\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport SelectArrow from './CALENDAR/'\r\n// eslint-disable-next-line no-unuse  d-vars\r\nimport Task from '../../store/modules/Task/Task'\r\n\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\nmoment.locale(\"ru\");\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      currentWeek: moment().clone().startOf(\"week\"),\r\n\r\n      showSelect: false, // меняет состоянике стрелки в списке месяцев\r\n      isArrowShow: true, // убирает стрелку при достижении недели регистрации\r\n      isFirstWeekReg: false, // тоже для первой регистрации\r\n\r\n      // загрузка данных с сервера\r\n      showLoader: false,\r\n      showCalendar: true,\r\n\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['USER_SELECT_TASKS', 'CURRENT_HOURS', 'CURRENT_MONTHS', 'USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK', 'FIRST_DAY',  'USER_TASKS_IN_CALENDAR', 'CHECKED_TASK']), \r\n    \r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scrollToCurrentHour();\r\n    });\r\n\r\n    this.CHANGE_WEEK(moment())\r\n    this.GET_HOURS();\r\n    this.GET_PRESENT_DAY()\r\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\r\n\r\n\r\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n    this.GET_TASKLIST() // other\r\n  \r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS','GET_THIS_DAY_TASKS', 'GET_TASKLIST']), \r\n    ...mapMutations(['UPDATE_WEEK', 'UPDATE_FIRST_DAY_WEEK', 'UPDATE_CHECKED_TASK']),\r\n\r\n    isTaskOverflowed(task) {\r\n      const taskElement = this.$refs[`${task.id}`]; \r\n      console.log(taskElement)\r\n    },\r\n\r\n    // обновляет выбранную задачу \r\n    showTask(task){\r\n      this.UPDATE_CHECKED_TASK(task)\r\n    },\r\n\r\n    // приводит дату к нужному формату в отображении задачи на календаре\r\n    formatTime(dateTime){\r\n      const d = new Date(dateTime)\r\n\r\n      const res = [d.getHours(), d.getMinutes()].map(function (x) {\r\n        return x < 10 ? \"0\" + x : x\r\n      }).join(\":\")\r\n\r\n      return res\r\n\r\n    },\r\n    // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n  const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n  if (taskboardContainer) {\r\n    const currentHour = `${Number(moment().format('HH'))}:00`; \r\n    const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n    \r\n    for (let i = 0; i < hourElements.length; i++) {\r\n      if (hourElements[i].textContent === currentHour) {\r\n        const containerRect = taskboardContainer.getBoundingClientRect();\r\n        const hourRect = hourElements[i].getBoundingClientRect();\r\n        const scrollTop = hourRect.top - containerRect.top;\r\n        taskboardContainer.scrollTop = scrollTop;\r\n        return; // Выходим из цикла, когда нашли нужный час\r\n      }\r\n    }\r\n    \r\n    console.error(\"Час не найден в .calendar__taskboard.\");\r\n  } else {\r\n    console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n  }\r\n},\r\n    // Функция для вычисления стиля задачи \r\n    taskStyle(task) {\r\n      const heightInPixels = Task.calculateTaskLengthInPixels(task);\r\n      // console.log(`${task.name}, длина задачи - ${heightInPixels}`)\r\n      const colorTask = Task.calculateTaskColor(task)\r\n      const leftPosition = Task.calculateLeftPosition(task, this.CURRENT_WEEK)\r\n      const startPosition = Task.calculateTaskStartPosition(task)\r\n\r\n      return {\r\n        height: heightInPixels + 'px', \r\n        'background-color': colorTask, \r\n        top: startPosition + 'px',\r\n        left: leftPosition + 'px', \r\n      }\r\n    },\r\n  \r\n    // заполнение днями недели текущей\r\n    fillDays(startDate) {\r\n      const daysArray = [];\r\n      for (let i = 0; i <= 6; i++) {\r\n        const day = moment(startDate).add(i, \"days\").format(\"ddd-DD-MMMM-YYYY-MM\");\r\n        daysArray.push(day.split(\"-\"));\r\n      }\r\n      return daysArray;\r\n    },\r\n\r\n    // изменяет выбранный месяц в списке (визуально)\r\n    async changeCurrentMonth(value) {\r\n      this.startLoading();\r\n      this.UPDATE_FIRST_DAY_WEEK(`${value[0]} ${value[1]}`);\r\n      const newDate = moment(`${value[0]}-${value[1]}`, \"MMMM-YYYY\").startOf(\"month\");\r\n      this.CHANGE_WEEK(newDate);\r\n      this.showSelect = false\r\n      this.currentWeek = newDate\r\n\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n      await this.loading()\r\n      this.scrollToCurrentHour()\r\n    },\r\n\r\n    // переключает неделю на предыдущую (стрелка)\r\n    async prevWeek(startDate) {\r\n      this.startLoading();\r\n      const previousWeek = this.currentWeek\r\n            ? this.currentWeek.clone().subtract(1, \"week\")\r\n            : moment().startOf(\"isoWeek\").subtract(1, \"week\");\r\n\r\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\r\n\r\n      if (previousWeek.isBefore(startDateNormalized)) {\r\n        if(!this.isFirstWeekReg){\r\n          this.currentWeek = previousWeek;\r\n          this.isArrowShow = false;\r\n        }\r\n        this.isFirstWeekReg = true;\r\n      }\r\n      else {\r\n        this.currentWeek.subtract(1, \"week\");\r\n      }\r\n\r\n      this.UPDATE_WEEK(this.fillDays(this.currentWeek));\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n      this.UPDATE_FIRST_DAY_WEEK(`${this.capitalizeFirstLetter(this.CURRENT_WEEK[0][2])}  ${this.CURRENT_WEEK[0][3]}`);\r\n\r\n      await this.loading();\r\n      this.scrollToCurrentHour()\r\n      \r\n    },\r\n\r\n    // переключает неделю на следующую (стрелка)\r\n    async nextWeek() {\r\n      this.startLoading();\r\n      this.isFirstWeekReg = false;\r\n      this.isArrowShow = true;\r\n      if (!this.currentWeek) {\r\n        // Если текущая неделя не определена, создаем ее и устанавливаем в текущую неделю\r\n        this.currentWeek = moment().add(1, \"week\").startOf(\"isoWeek\");\r\n      } else {\r\n        // Иначе переключаемся на следующую неделю\r\n        this.currentWeek.add(1, \"week\");\r\n      }\r\n\r\n      this.UPDATE_WEEK(this.fillDays(this.currentWeek));\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\r\n      this.UPDATE_FIRST_DAY_WEEK(`${this.capitalizeFirstLetter(this.CURRENT_WEEK[0][2])}  ${this.CURRENT_WEEK[0][3]}`);\r\n\r\n      await this.loading();\r\n      this.scrollToCurrentHour()\r\n},\r\n\r\n\r\n    // делает заглавным первые буквы месяцев в списке (мб костыль)\r\n    capitalizeFirstLetter(string) {\r\n      return string.charAt(0).toUpperCase() + string.slice(1);\r\n    },\r\n\r\n    async goToCurrentWeek(){\r\n      this.startLoading()\r\n      this.CHANGE_WEEK(moment())\r\n      this.currentWeek =  moment().clone().startOf(\"week\")\r\n      this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n      this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n      await this.loading()\r\n      this.scrollToCurrentHour()\r\n    },\r\n\r\n    // старт загрузки\r\n    startLoading() {\r\n      this.showLoader = true;\r\n      this.showCalendar = false;\r\n    },\r\n    // процесс загрузки\r\n    async loading() {\r\n  return new Promise((resolve) => {\r\n    // Здесь выполняются асинхронные действия, например, задержка в 1 секунду\r\n    setTimeout(() => {\r\n      this.showLoader = false;\r\n      this.showCalendar = true;\r\n      resolve(); // Разрешить промис после выполнения\r\n    }, 1000);\r\n  });\r\n},\r\n    \r\n  },\r\n  \r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* .calendar {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: start; \r\n    justify-content: start;\r\n} */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.wrapper {\r\n  width: 1340px;\r\n  margin: 100px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n.loader {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 5px solid black;\r\n  border-bottom-color: transparent;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n  box-sizing: border-box;\r\n  animation: rotation 1s linear infinite;\r\n}\r\n\r\n@keyframes rotation {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAqB;;uBAAhCC,mBAAA,CAGM,OAHNC,UAGM"},"metadata":{},"sourceType":"module","externalDependencies":[]}