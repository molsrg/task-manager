{"ast":null,"code":"import axios from \"axios\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport { required } from \"@vuelidate/validators\";\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\n\n// валидация даты в инпуте\nconst isValidDate = input => {\n  const regex = /^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n  if (!regex.test(input)) return false;\n  const parts = input.split(\"-\");\n  const year = parseInt(parts[0], 10);\n  const month = parseInt(parts[1], 10);\n  const day = parseInt(parts[2], 10);\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > new Date(year, month, 0).getDate()) return false;\n  return true;\n};\n// const minValue = (value) => {\n//     if(value.length > 8){\n//         return true\n//     }\n//     else {\n//         return 'Минимальная длина 8 символов епт'\n//     }\n// }\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    // this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\n    this.formattedDate = `${this.USER_REGISTRATIONS.split(\"-\")[2]}-${this.USER_REGISTRATIONS.split(\"-\")[1]}-${this.USER_REGISTRATIONS.split(\"-\")[0]}`;\n    // console.log(this.formattedDate)\n    // console.log(this.USER_REGISTRATIONS)\n  },\n\n  data() {\n    return {\n      taskName: \"\",\n      taskInfo: \"\",\n      taskType: \"\",\n      taskStartDate: \"\",\n      taskStartTime: \"\",\n      taskEndTime: \"\",\n      formattedDate: \"\"\n    };\n  },\n  validations: {\n    taskName: {\n      required\n    },\n    taskInfo: {\n      required\n    },\n    taskType: {\n      required\n    },\n    taskStartDate: {\n      required,\n      isValidDate\n    },\n    taskStartTime: {\n      required\n    },\n    taskEndTime: {\n      required\n    }\n  },\n  methods: {\n    // добавить еще листы для выбора категории задачи\n    addListType() {},\n    ...mapActions([\"ADD_TASK\", \"GET_THIS_DAY_TASKS\", \"GET_THIS_WEEK_TASKS\", \"GET_TASKLIST\"]),\n    ...mapMutations([\"UPDATE_IS_ADDED_TASK\"]),\n    async addTask(event) {\n      event.preventDefault();\n      const taskDateInput = this.$refs.taskDate;\n      const taskTimeSInput = this.$refs.taskStartTime;\n      const taskTimeEInput = this.$refs.taskEndTime;\n      this.taskStartDate = taskDateInput.value;\n      this.taskStartTime = taskTimeSInput.value;\n      this.taskEndTime = taskTimeEInput.value;\n      const isFormCorrect = await this.v$.$validate();\n      if (!isFormCorrect) return;\n      axios({\n        method: \"POST\",\n        url: \"http://localhost:5000/task/createTask\",\n        headers: {\n          authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`\n        },\n        data: {\n          name: this.taskName,\n          type: this.taskType,\n          text: this.taskInfo,\n          status: \"Done\",\n          startTime: `${this.taskStartDate}T${this.taskStartTime}:00Z`,\n          endTime: `${this.taskStartDate}T${this.taskEndTime}:00Z`\n        }\n      }).then(() => {\n        this.UPDATE_IS_ADDED_TASK();\n        this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n        this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n        this.GET_TASKLIST();\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    validateTask() {\n      // const startTime = new Date(this.taskStartTime)\n      // const endTime = new Date(this.taskEndTime)\n      // this.errors.push('Время окончания не может быть раньше времени начала')\n\n      // if (endTime > startTime) {\n      //     this.errors.push('Время окончания не может быть раньше времени начала')\n      //     this.taskStartTime = ''\n      //     this.taskEndTime = ''\n      //     return false\n      // }\n\n      return true;\n    }\n  },\n  computed: {\n    ...mapGetters([\"USER_REGISTRATIONS\", \"PRESENT_DAY\", \"CURRENT_WEEK\"]),\n    isFormValid() {\n      // Проверка длины всех полей\n      const isTaskNameValid = this.taskName.length > 6;\n      const isTaskInfoValid = this.taskInfo.length > 8;\n      const isTaskTypeValid = this.taskType.length > 0;\n      let isTaskStartDateValid = true;\n      if (this.taskStartDate.length > 0) {\n        isTaskStartDateValid = isValidDate(this.taskStartDate);\n      }\n\n      // Если все поля имеют длину больше 0, форма считается валидной\n      return isTaskNameValid && isTaskInfoValid && isTaskTypeValid && isTaskStartDateValid;\n    }\n  }\n};","map":{"version":3,"names":["axios","useVuelidate","required","mapActions","mapMutations","mapGetters","isValidDate","input","regex","test","parts","split","year","parseInt","month","day","Date","getDate","setup","v$","mounted","formattedDate","USER_REGISTRATIONS","data","taskName","taskInfo","taskType","taskStartDate","taskStartTime","taskEndTime","validations","methods","addListType","addTask","event","preventDefault","taskDateInput","$refs","taskDate","taskTimeSInput","taskTimeEInput","value","isFormCorrect","$validate","method","url","headers","authorization","localStorage","getItem","name","type","text","status","startTime","endTime","then","UPDATE_IS_ADDED_TASK","GET_THIS_DAY_TASKS","PRESENT_DAY","GET_THIS_WEEK_TASKS","CURRENT_WEEK","GET_TASKLIST","catch","err","console","log","validateTask","computed","isFormValid","isTaskNameValid","length","isTaskInfoValid","isTaskTypeValid","isTaskStartDateValid"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\ModalWindows\\AddTask.vue"],"sourcesContent":["<template>\r\n    <div class=\"form-task\">\r\n        <h3 class=\"form-title\">Создание задачи</h3>\r\n\r\n        <form\r\n            action=\"\"\r\n            type=\"post\"\r\n            @submit=\"addTask\"\r\n            style=\"display: flex; flex-direction: column; gap: 20px\"\r\n        >\r\n            <div>\r\n                <input\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Название задачи\"\r\n                    v-model=\"taskName\"\r\n                />\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskName.$invalid && v$.taskInfo.$dirty\"\r\n                >\r\n                    Заполните поле\r\n                </span>\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Описание задачи\"\r\n                    v-model=\"taskInfo\"\r\n                />\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskInfo.$invalid && v$.taskInfo.$dirty\"\r\n                    >Заполните поле</span\r\n                >\r\n            </div>\r\n\r\n            <div>\r\n                <h4 class=\"form-text\">\r\n                    Тип задачи\r\n                    <span\r\n                        class=\"invalid-span\"\r\n                        v-if=\"v$.taskType.$invalid && v$.taskType.$dirty\"\r\n                        >Обязателен к заполнению</span\r\n                    >\r\n                </h4>\r\n\r\n                <div class=\"form-button-container\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        id=\"type-task-1\"\r\n                        name=\"radio-group\"\r\n                        v-model=\"taskType\"\r\n                        value=\"Personal\"\r\n                    />\r\n                    <label for=\"type-task-1\" class=\"form-button\">Личное</label>\r\n\r\n                    <input\r\n                        type=\"radio\"\r\n                        id=\"type-task-2\"\r\n                        name=\"radio-group\"\r\n                        v-model=\"taskType\"\r\n                        value=\"Working\"\r\n                    />\r\n                    <label for=\"type-task-2\" class=\"form-button\">Рабочее</label>\r\n\r\n                    <div class=\"form-button_add\" @click=\"addListType()\">\r\n                        <img src=\"./../../assets/images/home/plus.svg\" alt=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    ref=\"taskDate\"\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Дата выполнения\"\r\n                    v-model=\"taskStartDate\"\r\n                    :min=\"this.formattedDate\"\r\n                    onfocus=\"(this.type='date')\" onblur=\"(this.type='text')\"\r\n                />\r\n\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskStartDate.$invalid && v$.taskStartDate.$dirty\"\r\n                    >Введите дату</span\r\n                >\r\n            </div>\r\n            <div class=\"form-input_time-container\">\r\n                <div>\r\n                    <input\r\n                        id=\"start-time\"\r\n                        ref=\"taskStartTime\"\r\n                        class=\"form-input-time\"\r\n                        type=\"time\"\r\n                        placeholder=\"Время начала\"\r\n                        v-model=\"taskStartTime\"\r\n                        onfocus=\"(this.type='time')\" onblur=\"(this.type='text')\"\r\n                    />\r\n                    <span\r\n                        class=\"invalid-span\"\r\n                        v-if=\"\r\n                            v$.taskStartTime.$invalid && v$.taskStartDate.$dirty\r\n                        \"\r\n                        >Введите время</span\r\n                    >\r\n                </div>\r\n\r\n                <div>\r\n                    <input\r\n                        id=\"end-time\"\r\n                        ref=\"taskEndTime\"\r\n                        class=\"form-input-time\"\r\n                        type=\"time\"\r\n                        placeholder=\"Время окончания\"\r\n                        v-model=\"taskEndTime\"\r\n                        onfocus=\"(this.type='time')\" onblur=\"(this.type='text')\"\r\n                    />\r\n                    <span\r\n                        class=\"invalid-span\"\r\n                        v-if=\"\r\n                            v$.taskStartTime.$invalid && v$.taskStartDate.$dirty\r\n                        \"\r\n                        >Введите время</span\r\n                    >\r\n                </div>\r\n            </div>\r\n            <button\r\n                class=\"form-submit\"\r\n                type=\"submit\"\r\n                :class=\"{ 'form-submit_filled': !this.v$.$invalid }\"\r\n            >\r\n                Создать\r\n            </button>\r\n            <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASK()\">\r\n                Отмена\r\n            </button>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { required } from \"@vuelidate/validators\";\r\n\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\n// валидация даты в инпуте\r\nconst isValidDate = (input) => {\r\n    const regex = /^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r\n    if (!regex.test(input)) return false;\r\n\r\n    const parts = input.split(\"-\");\r\n    const year = parseInt(parts[0], 10);\r\n    const month = parseInt(parts[1], 10);\r\n    const day = parseInt(parts[2], 10);\r\n\r\n    if (month < 1 || month > 12) return false;\r\n    if (day < 1 || day > new Date(year, month, 0).getDate()) return false;\r\n\r\n    return true;\r\n};\r\n// const minValue = (value) => {\r\n//     if(value.length > 8){\r\n//         return true\r\n//     }\r\n//     else {\r\n//         return 'Минимальная длина 8 символов епт'\r\n//     }\r\n// }\r\nexport default {\r\n    setup() {\r\n        return {\r\n            v$: useVuelidate(),\r\n        };\r\n    },\r\n    mounted() {\r\n        // this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n        this.formattedDate = `${this.USER_REGISTRATIONS.split(\"-\")[2]}-${\r\n            this.USER_REGISTRATIONS.split(\"-\")[1]\r\n        }-${this.USER_REGISTRATIONS.split(\"-\")[0]}`;\r\n        // console.log(this.formattedDate)\r\n        // console.log(this.USER_REGISTRATIONS)\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            taskName: \"\",\r\n            taskInfo: \"\",\r\n            taskType: \"\",\r\n            taskStartDate: \"\",\r\n            taskStartTime: \"\",\r\n            taskEndTime: \"\",\r\n\r\n            formattedDate: \"\",\r\n        };\r\n    },\r\n    validations: {\r\n        taskName: { required },\r\n        taskInfo: { required },\r\n        taskType: { required },\r\n        taskStartDate: { required, isValidDate },\r\n        taskStartTime: { required },\r\n        taskEndTime: { required },\r\n    },\r\n    methods: {\r\n        // добавить еще листы для выбора категории задачи\r\n        addListType() {},\r\n\r\n        ...mapActions([\r\n            \"ADD_TASK\",\r\n            \"GET_THIS_DAY_TASKS\",\r\n            \"GET_THIS_WEEK_TASKS\",\r\n            \"GET_TASKLIST\",\r\n        ]),\r\n        ...mapMutations([\"UPDATE_IS_ADDED_TASK\"]),\r\n\r\n        async addTask(event) {\r\n            event.preventDefault();\r\n            const taskDateInput = this.$refs.taskDate;\r\n            const taskTimeSInput = this.$refs.taskStartTime;\r\n            const taskTimeEInput = this.$refs.taskEndTime;\r\n\r\n            this.taskStartDate = taskDateInput.value;\r\n            this.taskStartTime = taskTimeSInput.value;\r\n            this.taskEndTime = taskTimeEInput.value;\r\n\r\n            const isFormCorrect = await this.v$.$validate();\r\n            if (!isFormCorrect) return;\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: \"http://localhost:5000/task/createTask\",\r\n                headers: {\r\n                    authorization: `Bearer ${localStorage.getItem(\r\n                        \"AccessToken\"\r\n                    )}`,\r\n                },\r\n                data: {\r\n                    name: this.taskName,\r\n                    type: this.taskType,\r\n                    text: this.taskInfo,\r\n                    status: \"Done\",\r\n                    startTime: `${this.taskStartDate}T${this.taskStartTime}:00Z`,\r\n                    endTime: `${this.taskStartDate}T${this.taskEndTime}:00Z`,\r\n                },\r\n            })\r\n                .then(() => {\r\n                    this.UPDATE_IS_ADDED_TASK();\r\n                    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\r\n                    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\r\n                    this.GET_TASKLIST();\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        },\r\n        validateTask() {\r\n            // const startTime = new Date(this.taskStartTime)\r\n            // const endTime = new Date(this.taskEndTime)\r\n            // this.errors.push('Время окончания не может быть раньше времени начала')\r\n\r\n            // if (endTime > startTime) {\r\n            //     this.errors.push('Время окончания не может быть раньше времени начала')\r\n            //     this.taskStartTime = ''\r\n            //     this.taskEndTime = ''\r\n            //     return false\r\n            // }\r\n\r\n            return true;\r\n        },\r\n    },\r\n    computed: {\r\n        ...mapGetters([\"USER_REGISTRATIONS\", \"PRESENT_DAY\", \"CURRENT_WEEK\"]),\r\n        isFormValid() {\r\n            // Проверка длины всех полей\r\n            const isTaskNameValid = this.taskName.length > 6;\r\n            const isTaskInfoValid = this.taskInfo.length > 8;\r\n            const isTaskTypeValid = this.taskType.length > 0;\r\n            let isTaskStartDateValid = true;\r\n            if (this.taskStartDate.length > 0) {\r\n                isTaskStartDateValid = isValidDate(this.taskStartDate);\r\n            }\r\n\r\n            // Если все поля имеют длину больше 0, форма считается валидной\r\n            return (\r\n                isTaskNameValid &&\r\n                isTaskInfoValid &&\r\n                isTaskTypeValid &&\r\n                isTaskStartDateValid\r\n            );\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}