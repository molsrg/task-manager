{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"calendar__component\"\n};\nconst _hoisted_2 = {\n  style: {\n    \"margin-top\": \"24px\",\n    \"margin-left\": \"79px\"\n  }\n};\nconst _hoisted_3 = {\n  class: \"calendar\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SelectArrow = _resolveComponent(\"SelectArrow\");\n  const _component_CurrentWeek = _resolveComponent(\"CurrentWeek\");\n  const _component_CalendarApp = _resolveComponent(\"CalendarApp\");\n  const _component_LoaderApp = _resolveComponent(\"LoaderApp\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_SelectArrow)]), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_CurrentWeek), _createVNode(_component_CalendarApp), _createVNode(_component_LoaderApp)])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_SelectArrow","_hoisted_3","_component_CurrentWeek","_component_CalendarApp","_component_LoaderApp"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CalendarComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar__component\">\r\n    <div style=\"margin-top: 24px;\r\n    margin-left: 79px;\">\r\n        <SelectArrow></SelectArrow>\r\n    </div>\r\n\r\n    <div class=\"calendar\">\r\n      <CurrentWeek></CurrentWeek>\r\n      \r\n      <CalendarApp></CalendarApp>\r\n      <LoaderApp></LoaderApp>\r\n  </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport SelectArrow from './CALENDAR/SelectArrow.vue'\r\nimport CurrentWeek from './CALENDAR/CurrentWeek.vue'\r\nimport CalendarApp from './CALENDAR/CalendarApp.vue'\r\nimport LoaderApp from './CALENDAR/LoaderApp.vue';\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\n\r\nmoment.locale(\"ru\");\r\n\r\nexport default {\r\n  components: {\r\n    SelectArrow, \r\n    CurrentWeek,\r\n    CalendarApp, \r\n    LoaderApp\r\n  },\r\n  data() {\r\n    return {\r\n      // загрузка данных с сервера\r\n      showLoader: false,\r\n      showCalendar: true,\r\n\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS', 'CURRENT_WEEK', 'PRESENT_DAY']), \r\n    \r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scrollToCurrentHour();\r\n    });\r\n\r\n    this.CHANGE_WEEK(moment())\r\n    this.GET_HOURS();\r\n    this.GET_PRESENT_DAY()\r\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\r\n\r\n\r\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n    this.GET_TASKLIST() // other\r\n  \r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS','GET_THIS_DAY_TASKS', 'GET_TASKLIST']), \r\n    ...mapMutations(['UPDATE_CHECKED_TASK']),\r\n\r\n    isTaskOverflowed(task) {\r\n      const taskElement = this.$refs[`${task.id}`]; \r\n      console.log(taskElement)\r\n    },\r\n\r\n    // обновляет выбранную задачу \r\n    showTask(task){\r\n      this.UPDATE_CHECKED_TASK(task)\r\n    },\r\n    // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n      const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n      if (taskboardContainer) {\r\n        const currentHour = `${Number(moment().format('HH'))}:00`; \r\n        const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n        \r\n        for (let i = 0; i < hourElements.length; i++) {\r\n          if (hourElements[i].textContent === currentHour) {\r\n            const containerRect = taskboardContainer.getBoundingClientRect();\r\n            const hourRect = hourElements[i].getBoundingClientRect();\r\n            const scrollTop = hourRect.top - containerRect.top;\r\n            taskboardContainer.scrollTop = scrollTop;\r\n            return; // Выходим из цикла, когда нашли нужный час\r\n          }\r\n    }\r\n    \r\n    console.error(\"Час не найден в .calendar__taskboard.\");\r\n  } else {\r\n    console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n  }\r\n},\r\n\r\n  \r\n    \r\n    // старт загрузки\r\n    startLoading() {\r\n      this.showLoader = true;\r\n      this.showCalendar = false;\r\n    },\r\n    // процесс загрузки\r\n    async loading() {\r\n  return new Promise((resolve) => {\r\n    // Здесь выполняются асинхронные действия, например, задержка в 1 секунду\r\n    setTimeout(() => {\r\n      this.showLoader = false;\r\n      this.showCalendar = true;\r\n      resolve(); // Разрешить промис после выполнения\r\n    }, 1000);\r\n  });\r\n},\r\n    \r\n  },\r\n  \r\n\r\n};\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAqB;;EACzBC,KACc,EADd;IAAA;IAAA;EAAA;AACc;;EAIdD,KAAK,EAAC;AAAU;;;;;;uBANvBE,mBAAA,CAYM,OAZNC,UAYM,GAXJC,mBAAA,CAGM,OAHNC,UAGM,GADFC,YAAA,CAA2BC,sBAAA,E,GAG/BH,mBAAA,CAKI,OALJI,UAKI,GAJFF,YAAA,CAA2BG,sBAAA,GAE3BH,YAAA,CAA2BI,sBAAA,GAC3BJ,YAAA,CAAuBK,oBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}