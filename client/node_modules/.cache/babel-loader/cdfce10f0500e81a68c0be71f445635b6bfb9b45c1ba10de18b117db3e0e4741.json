{"ast":null,"code":"import axios from 'axios';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, minLength } from '@vuelidate/validators';\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\nimport 'air-datepicker/air-datepicker.css';\nimport AirDatepicker from 'air-datepicker';\n\n// валидация даты в инпуте\nconst isValidDate = input => {\n  const regex = /^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n  if (!regex.test(input)) return false;\n  const parts = input.split('-');\n  const year = parseInt(parts[0], 10);\n  const month = parseInt(parts[1], 10);\n  const day = parseInt(parts[2], 10);\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > new Date(year, month, 0).getDate()) return false;\n  return true;\n};\n// const minValue = (value) => {\n//     if(value.length > 8){\n//         return true\n//     }\n//     else {\n//         return 'Минимальная длина 8 символов епт'\n//     }\n// }\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00';\n    new AirDatepicker(this.$refs.taskDate, {\n      // visible: true,\n      position: 'right center',\n      // позиционирование календаря\n      navTitles: {\n        // стили для отображения шапки календаря\n        days: '<strong>yyyy</strong> <i>MMMM</i>',\n        months: 'Select month of <strong>yyyy</strong>'\n      },\n      buttons: ['clear'],\n      // кнопки внизу календаря\n      minDate: this.formattedDate,\n      // минимально возможный выбор даты \n      dateFormat: 'yyyy-MM-dd'\n    });\n    new AirDatepicker('#start-time', {\n      onlyTimepicker: true,\n      position: 'left center',\n      // позиционирование календаря\n      timepicker: true // показ выбора времени\n    });\n\n    new AirDatepicker('#end-time', {\n      onlyTimepicker: true,\n      position: 'right center',\n      // позиционирование календаря\n      timepicker: true // показ выбора времени\n    });\n  },\n\n  data() {\n    return {\n      taskName: '',\n      taskInfo: '',\n      taskType: '',\n      taskStartDate: '',\n      taskStartTime: '',\n      taskEndTime: '',\n      formattedDate: ''\n    };\n  },\n  validations: {\n    taskName: {\n      required,\n      minLength: minLength(6)\n    },\n    taskInfo: {\n      required,\n      minLength: minLength(8)\n    },\n    taskType: {\n      required\n    },\n    taskStartDate: {\n      required,\n      isValidDate\n    },\n    taskStartTime: {\n      required\n    },\n    taskEndTime: {\n      required\n    }\n  },\n  methods: {\n    ...mapActions(['ADD_TASK', 'GET_THIS_DAY_TASKS', 'GET_THIS_WEEK_TASKS', 'GET_TASKLIST']),\n    ...mapMutations(['UPDATE_IS_ADDED_TASK']),\n    async addTask(event) {\n      event.preventDefault();\n      const taskDateInput = this.$refs.taskDate;\n      const taskTimeSInput = this.$refs.taskStartTime;\n      const taskTimeEInput = this.$refs.taskEndTime;\n      this.taskStartDate = taskDateInput.value;\n      this.taskStartTime = taskTimeSInput.value;\n      this.taskEndTime = taskTimeEInput.value;\n      const isFormCorrect = await this.v$.$validate();\n      if (!isFormCorrect) return;\n      axios({\n        method: \"POST\",\n        url: \"http://localhost:5000/task/createTask\",\n        headers: {\n          authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`\n        },\n        data: {\n          name: this.taskName,\n          type: this.taskType,\n          text: this.taskInfo,\n          status: \"Done\",\n          startTime: `${this.taskStartDate}T${this.taskStartTime}:00Z`,\n          endTime: `${this.taskStartDate}T${this.taskEndTime}:00Z`\n        }\n      }).then(() => {\n        this.UPDATE_IS_ADDED_TASK();\n        this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n        this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n        this.GET_TASKLIST();\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    validateTask() {\n      // const startTime = new Date(this.taskStartTime)\n      // const endTime = new Date(this.taskEndTime)\n      // this.errors.push('Время окончания не может быть раньше времени начала')\n\n      // if (endTime > startTime) {\n      //     this.errors.push('Время окончания не может быть раньше времени начала')\n      //     this.taskStartTime = ''\n      //     this.taskEndTime = ''\n      //     return false\n      // }\n\n      return true;\n    }\n  },\n  computed: {\n    ...mapGetters(['USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK']),\n    isFormValid() {\n      // Проверка длины всех полей\n      const isTaskNameValid = this.taskName.length > 6;\n      const isTaskInfoValid = this.taskInfo.length > 8;\n      const isTaskTypeValid = this.taskType.length > 0;\n      let isTaskStartDateValid = true;\n      if (this.taskStartDate.length > 0) {\n        isTaskStartDateValid = isValidDate(this.taskStartDate);\n      }\n\n      // Если все поля имеют длину больше 0, форма считается валидной\n      return isTaskNameValid && isTaskInfoValid && isTaskTypeValid && isTaskStartDateValid;\n    }\n  }\n};","map":{"version":3,"names":["axios","useVuelidate","required","minLength","mapActions","mapMutations","mapGetters","AirDatepicker","isValidDate","input","regex","test","parts","split","year","parseInt","month","day","Date","getDate","setup","v$","mounted","formattedDate","USER_REGISTRATIONS","reverse","join","$refs","taskDate","position","navTitles","days","months","buttons","minDate","dateFormat","onlyTimepicker","timepicker","data","taskName","taskInfo","taskType","taskStartDate","taskStartTime","taskEndTime","validations","methods","addTask","event","preventDefault","taskDateInput","taskTimeSInput","taskTimeEInput","value","isFormCorrect","$validate","method","url","headers","authorization","localStorage","getItem","name","type","text","status","startTime","endTime","then","UPDATE_IS_ADDED_TASK","GET_THIS_DAY_TASKS","PRESENT_DAY","GET_THIS_WEEK_TASKS","CURRENT_WEEK","GET_TASKLIST","catch","err","console","log","validateTask","computed","isFormValid","isTaskNameValid","length","isTaskInfoValid","isTaskTypeValid","isTaskStartDateValid"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTask.vue"],"sourcesContent":["<template>\r\n    <div class=\"form-task\">\r\n        <h3 class=\"form-title\">\r\n            Создание задачи\r\n        </h3>\r\n        <form action=\"\" type=\"post\" @submit=\"addTask\" style=\"display: flex; flex-direction: column; gap: 20px;\"> \r\n            <div>\r\n                <input \r\n                    class=\"form-input\" \r\n                    type=\"text\" \r\n                    placeholder=\"Название задачи\" \r\n                    v-model=\"taskName\"\r\n                    :class=\"{'invalid-input': v$.taskName.$error}\"\r\n                > \r\n                <span class=\"invalid-span\" v-if=\"v$.taskName.$invalid\">{{v$.taskName.minLength.$message}}</span>\r\n                <span class=\"invalid-span\" v-if=\"!v$.taskName.$invalid && v$.taskName.$dirty\">Валидация не прошла</span>\r\n            </div>\r\n            \r\n            <div>\r\n                <input class=\"form-input\" type=\"text\" placeholder=\"Описание задачи\" v-model=\"taskInfo\">\r\n                <span class=\"invalid-span\" v-if=\"v$.taskInfo.$invalid\">{{v$.taskInfo.minLength.$message}}</span>\r\n            </div>\r\n            \r\n\r\n            <div>\r\n                <h4 class=\"form-text\">Тип задачи <span class=\"invalid-span\" v-if=\"v$.taskType.$invalid && v$.taskType\">Обязателен к заполнению</span></h4>\r\n                {{ v$.taskType }}\r\n                <div class=\"form-button-container\">\r\n                    <input type=\"radio\" id=\"type-task-1\" name=\"radio-group\" v-model=\"taskType\" value=\"Personal\">\r\n                    <label for=\"type-task-1\" class=\"form-button\">Личное</label>\r\n                    \r\n                    <input type=\"radio\" id=\"type-task-2\" name=\"radio-group\" v-model=\"taskType\" value=\"Working\">\r\n                    <label for=\"type-task-2\" class=\"form-button\" >Рабочее</label>\r\n\r\n                    <input type=\"radio\" id=\"type-task-3\" name=\"radio-group\" v-model=\"taskType\" value=\"Optional\">\r\n                    <label for=\"type-task-3\" class=\"form-button\" >Спорт</label>\r\n\r\n                    <input type=\"radio\" id=\"type-task-4\"  name=\"radio-group\" v-model=\"taskType\" value=\"Optional\">\r\n                    <label for=\"type-task-4\" class=\"form-button\" >Хобби</label>\r\n                </div>\r\n                \r\n            </div>\r\n            <div>\r\n                <input  ref=\"taskDate\" class=\"form-input\" type=\"text\" placeholder=\"Дата выполнения\" v-model=\"taskStartDate\">\r\n                <span class=\"invalid-span\" v-if=\"v$.taskStartDate.$invalid\">Введите дату</span>\r\n            </div>\r\n            <div class=\"form-input_time\">\r\n                <input id=\"start-time\" ref=\"taskStartTime\" class=\"form-input\" type=\"text\" placeholder=\"Время начала\" v-model=\"taskStartTime\">\r\n                <input id=\"end-time\" ref=\"taskEndTime\" class=\"form-input\" type=\"text\" placeholder=\"Время окончания\" v-model=\"taskEndTime\">\r\n            </div>\r\n            <button class=\"form-submit\" type=\"submit\" :class=\"{ 'form-submit_filled': isFormValid }\">Создать</button>\r\n            <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASK()\">Отмена</button>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, minLength } from '@vuelidate/validators'\r\n\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport 'air-datepicker/air-datepicker.css';\r\nimport AirDatepicker from 'air-datepicker';\r\n\r\n// валидация даты в инпуте\r\nconst isValidDate = (input) => {\r\n    const regex = /^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r\n    if (!regex.test(input)) return false;\r\n\r\n    const parts = input.split('-');\r\n    const year = parseInt(parts[0], 10);\r\n    const month = parseInt(parts[1], 10);\r\n    const day = parseInt(parts[2], 10);\r\n\r\n    if (month < 1 || month > 12) return false;\r\n    if (day < 1 || day > new Date(year, month, 0).getDate()) return false;\r\n\r\n    return true;\r\n};\r\n// const minValue = (value) => {\r\n//     if(value.length > 8){\r\n//         return true\r\n//     }\r\n//     else {\r\n//         return 'Минимальная длина 8 символов епт'\r\n//     }\r\n// }\r\nexport default {\r\n    setup () {\r\n        return {\r\n            v$: useVuelidate()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n\r\n        new AirDatepicker(this.$refs.taskDate,{\r\n            // visible: true,\r\n            position: 'right center', // позиционирование календаря\r\n            navTitles: { // стили для отображения шапки календаря\r\n                days: '<strong>yyyy</strong> <i>MMMM</i>',\r\n                months: 'Select month of <strong>yyyy</strong>'    \r\n            }, \r\n            buttons: ['clear'], // кнопки внизу календаря\r\n            minDate: this.formattedDate, // минимально возможный выбор даты \r\n            dateFormat: 'yyyy-MM-dd'\r\n        });\r\n\r\n        new AirDatepicker('#start-time', {\r\n            onlyTimepicker: true, \r\n            position: 'left center', // позиционирование календаря\r\n            timepicker: true, // показ выбора времени\r\n        });\r\n\r\n        new AirDatepicker('#end-time', {\r\n            onlyTimepicker: true, \r\n            position: 'right center', // позиционирование календаря\r\n            timepicker: true, // показ выбора времени\r\n        });\r\n        \r\n    },\r\n    \r\n    data(){\r\n        return {\r\n            taskName: '',\r\n            taskInfo: '', \r\n            taskType: '',\r\n            taskStartDate: '',\r\n            taskStartTime: '',\r\n            taskEndTime: '',\r\n\r\n            formattedDate: '',\r\n\r\n        }\r\n    }, \r\n    validations: {\r\n        taskName: { required, minLength: minLength(6) },\r\n        taskInfo: { required, minLength: minLength(8) },\r\n        taskType: { required },\r\n        taskStartDate: { required, isValidDate },\r\n        taskStartTime: { required },\r\n        taskEndTime: { required },\r\n    },\r\n    methods: {\r\n        ...mapActions(['ADD_TASK', 'GET_THIS_DAY_TASKS', 'GET_THIS_WEEK_TASKS', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASK']),\r\n\r\n        async addTask(event) {\r\n            event.preventDefault();\r\n            const taskDateInput = this.$refs.taskDate;\r\n            const taskTimeSInput =  this.$refs.taskStartTime;\r\n            const taskTimeEInput =  this.$refs.taskEndTime;\r\n\r\n            this.taskStartDate = taskDateInput.value\r\n            this.taskStartTime = taskTimeSInput.value\r\n            this.taskEndTime = taskTimeEInput.value\r\n\r\n            const isFormCorrect = await this.v$.$validate()\r\n            if (!isFormCorrect) return\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: \"http://localhost:5000/task/createTask\",\r\n                headers: {\r\n                    authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`,\r\n                },\r\n                data: {\r\n                    name: this.taskName,\r\n                    type: this.taskType,\r\n                    text: this.taskInfo,\r\n                    status: \"Done\",\r\n                    startTime: `${this.taskStartDate}T${this.taskStartTime}:00Z`, \r\n                    endTime: `${this.taskStartDate}T${this.taskEndTime}:00Z`,\r\n                },\r\n                })\r\n                .then(() => {\r\n                    this.UPDATE_IS_ADDED_TASK()\r\n                    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n                    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n                    this.GET_TASKLIST()\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        },\r\n        validateTask() {\r\n            // const startTime = new Date(this.taskStartTime)\r\n            // const endTime = new Date(this.taskEndTime)\r\n            // this.errors.push('Время окончания не может быть раньше времени начала')\r\n\r\n            // if (endTime > startTime) {\r\n            //     this.errors.push('Время окончания не может быть раньше времени начала')\r\n            //     this.taskStartTime = ''\r\n            //     this.taskEndTime = ''\r\n            //     return false\r\n            // }\r\n\r\n            return true\r\n        },\r\n    }, \r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK']),\r\n    isFormValid() {\r\n      // Проверка длины всех полей\r\n        const isTaskNameValid = this.taskName.length > 6;\r\n        const isTaskInfoValid = this.taskInfo.length > 8;\r\n        const isTaskTypeValid = this.taskType.length > 0;\r\n        let isTaskStartDateValid = true\r\n        if(this.taskStartDate.length > 0){\r\n            isTaskStartDateValid = isValidDate(this.taskStartDate);\r\n        }\r\n\r\n      // Если все поля имеют длину больше 0, форма считается валидной\r\n        return isTaskNameValid && isTaskInfoValid && isTaskTypeValid && isTaskStartDateValid;\r\n    },\r\n    },\r\n    \r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n.air-datepicker-nav--title{\r\n    /* font-family: Raleway; */\r\n    font-size: 14px;\r\n}\r\n\r\n.air-datepicker-body--day-name {\r\n    color: red;\r\n}\r\n\r\n.air-datepicker-button span {\r\n    color: red;\r\n}\r\n\r\n.air-datepicker-cell.-day-.-weekend- {\r\n    color: red;\r\n}\r\n\r\n.air-datepicker-cell.-day-.-current-.-weekend- {\r\n    color: blue;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}