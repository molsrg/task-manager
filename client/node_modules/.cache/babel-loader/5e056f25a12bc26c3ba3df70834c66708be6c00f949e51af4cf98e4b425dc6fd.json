{"ast":null,"code":"// import axios from 'axios'\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, minLength } from '@vuelidate/validators';\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\nimport 'air-datepicker/air-datepicker.css';\nimport AirDatepicker from 'air-datepicker';\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00';\n    new AirDatepicker(this.$refs.taskDate, {\n      position: 'right center',\n      // позиционирование календаря\n      navTitles: {\n        // стили для отображения шапки календаря\n        days: '<strong>yyyy</strong> <i>MMMM</i>',\n        months: 'Select month of <strong>yyyy</strong>'\n      },\n      buttons: ['clear'],\n      // кнопки внизу календаря\n      minDate: this.formattedDate,\n      // минимально возможный выбор даты \n      dateFormat: 'yyyy-MM-dd'\n    });\n    // new AirDatepicker('#start-time', {\n    //     onlyTimepicker: true, \n    //     position: 'right center', // позиционирование календаря\n    //     timepicker: true, // показ выбора времени\n    // });\n\n    // new AirDatepicker('#end-time', {\n    //     onlyTimepicker: true, \n    //     position: 'right center', // позиционирование календаря\n    //     timepicker: true, // показ выбора времени\n    // });\n  },\n\n  data() {\n    return {\n      taskName: '',\n      taskInfo: '',\n      taskType: '',\n      taskStartDate: '',\n      taskStartTime: '',\n      taskEndTime: '',\n      formattedDate: '',\n      errors: []\n    };\n  },\n  validations: {\n    taskName: {\n      required,\n      minLength: minLength(6)\n    },\n    taskInfo: {\n      required,\n      minLength: minLength(8)\n    },\n    taskType: {\n      required\n    }\n    // taskStartDate: { required },\n  },\n\n  methods: {\n    ...mapActions(['ADD_TASK', 'GET_THIS_DAY_TASKS', 'GET_THIS_WEEK_TASKS', 'GET_TASKLIST']),\n    ...mapMutations(['UPDATE_IS_ADDED_TASK']),\n    async addTask(event) {\n      event.preventDefault();\n      const isFormCorrect = await this.v$.$validate();\n      if (!isFormCorrect) return;\n      console.group();\n      console.log(this.taskName);\n      console.log(this.taskInfo);\n      console.log(this.taskType);\n      console.log(this.taskStartDate);\n      console.groupEnd();\n\n      // axios({\n      //     method: \"POST\",\n      //     url: \"http://localhost:5000/task/createTask\",\n      //     headers: {\n      //         authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`,\n      //     },\n      //     data: {\n      //         name: this.taskName,\n      //         type: this.taskType,\n      //         text: this.taskInfo,\n      //         status: \"Done\",\n      //         startTime: `${this.taskStartDate}T${this.taskStartTime}:00Z`, \n      //         endTime: `${this.taskStartDate}T${this.taskEndTime}:00Z`,\n      //     },\n      //     })\n      //     .then(() => {\n      //         this.UPDATE_IS_ADDED_TASK()\n      //         this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\n      //         this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\n      //         this.GET_TASKLIST()\n      //     })\n      //     .catch((err) => {\n      //         console.log(err);\n      //         // alert(\"Создание задачи не удалось\");\n      //     });\n    },\n\n    validateTask() {\n      // const startTime = new Date(this.taskStartTime)\n      // const endTime = new Date(this.taskEndTime)\n      // this.errors.push('Время окончания не может быть раньше времени начала')\n\n      // if (endTime > startTime) {\n      //     this.errors.push('Время окончания не может быть раньше времени начала')\n      //     this.taskStartTime = ''\n      //     this.taskEndTime = ''\n      //     return false\n      // }\n\n      return true;\n    }\n  },\n  computed: {\n    ...mapGetters(['USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK'])\n  }\n};","map":{"version":3,"names":["useVuelidate","required","minLength","mapActions","mapMutations","mapGetters","AirDatepicker","setup","v$","mounted","formattedDate","USER_REGISTRATIONS","split","reverse","join","$refs","taskDate","position","navTitles","days","months","buttons","minDate","dateFormat","data","taskName","taskInfo","taskType","taskStartDate","taskStartTime","taskEndTime","errors","validations","methods","addTask","event","preventDefault","isFormCorrect","$validate","console","group","log","groupEnd","validateTask","computed"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTask.vue"],"sourcesContent":["<template>\r\n    <div class=\"form-task\">\r\n        <h3 class=\"form-title\">\r\n            Создание задачи\r\n        </h3>\r\n        <form action=\"\" type=\"post\" @submit=\"addTask\" style=\"display: flex; flex-direction: column; gap: 20px;\"> \r\n            <div>\r\n                <input \r\n                    class=\"form-input\" \r\n                    type=\"text\" \r\n                    placeholder=\"Название задачи\" \r\n                    v-model=\"taskName\"\r\n                    :class=\"{'invalid-input': v$.taskName.$error}\"\r\n                > \r\n                <span class=\"invalid-span\" v-if=\"v$.taskName.$invalid\">Минимальная длина 6 символов</span>\r\n            </div>\r\n            \r\n            <div>\r\n                <input class=\"form-input\" type=\"text\" placeholder=\"Описание задачи\" v-model=\"taskInfo\">\r\n                <span class=\"invalid-span\" v-if=\"v$.taskInfo.$invalid\">Минимальная длина 8 символов</span>\r\n            </div>\r\n            \r\n\r\n            <div>\r\n                <h4 class=\"form-text\">Тип задачи <span class=\"invalid-span\" v-if=\"v$.taskType.$invalid\">Обязателен к заполнению</span></h4>\r\n                <div class=\"form-button-container\">\r\n                    <input type=\"radio\" id=\"type-task-1\" name=\"radio-group\" v-model=\"taskType\" value=\"Personal\">\r\n                    <label for=\"type-task-1\" class=\"form-button\">Личное</label>\r\n                    \r\n                    <input type=\"radio\" id=\"type-task-2\" name=\"radio-group\" v-model=\"taskType\" value=\"Working\">\r\n                    <label for=\"type-task-2\" class=\"form-button\" >Рабочее</label>\r\n\r\n                    <input type=\"radio\" id=\"type-task-3\" name=\"radio-group\" v-model=\"taskType\" value=\"Optional\">\r\n                    <label for=\"type-task-3\" class=\"form-button\" >Спорт</label>\r\n\r\n                    <input type=\"radio\" id=\"type-task-4\"  name=\"radio-group\" v-model=\"taskType\" value=\"Optional\">\r\n                    <label for=\"type-task-4\" class=\"form-button\" >Хобби</label>\r\n                </div>\r\n                \r\n            </div>\r\n            <div>\r\n                <input  ref=\"taskDate\" class=\"form-input\" type=\"text\" placeholder=\"Дата выполнения\" v-model=\"taskStartDate\">\r\n                <!-- <span class=\"invalid-span\" v-if=\"v$.taskStartDate.$invalid\">Введите дату</span> -->\r\n            </div>\r\n            \r\n            <button class=\"form-submit\" type=\"submit\">Создать</button>\r\n            <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASK()\">Отмена</button>\r\n        </form>\r\n    </div>\r\n    <!-- <form action=\"\" type=\"post\" @submit=\"addTask\" class=\"form-task\">\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Название задачи\"\r\n        required\r\n        v-model=\"taskName\"\r\n        />\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Описание задачи\"\r\n        required\r\n        v-model=\"taskInfo\"\r\n        />\r\n        <label>Выберите тип задачи</label>\r\n            <div>\r\n                <input type=\"radio\" id=\"taskType1\" name=\"taskType\" v-model=\"taskType\" value=\"Personal\" required />\r\n                <label for=\"taskType1\">Личное</label>\r\n\r\n                <input type=\"radio\" id=\"taskType2\" name=\"taskType\" v-model=\"taskType\" value=\"Working\" required />\r\n                <label for=\"taskType2\">Рабочее</label>\r\n\r\n                <input type=\"radio\" id=\"taskType3\" name=\"taskType\" v-model=\"taskType\" value=\"Optional\" required />\r\n                <label for=\"taskType3\">Нераспределённый</label>\r\n            </div>\r\n\r\n\r\n        <label for=\"date\">Выберите дату задачи</label>\r\n            <input type=\"text\"  placeholder=\"Начало задачи\"\r\n            required v-model=\"taskStartDate\" id=\"date\">\r\n{{ taskStartDate }}\r\n        <label for=\"start-time\">Выберите время начала задачи</label>\r\n        <input\r\n        type=\"text\"\r\n        id=\"start-time\"\r\n        placeholder=\"Начало задачи\"\r\n        required\r\n        v-model=\"taskStartTime\"\r\n        />\r\n\r\n        <label for=\"end-time\">Выберите время окончания задачи</label>\r\n        <input\r\n        type=\"text\"\r\n        id=\"end-time\"\r\n        placeholder=\"Окончание задачи\"\r\n        required\r\n        v-model=\"taskEndTime\"\r\n        />\r\n            \r\n        <div v-if=\"errors.length > 0\">{{ errors[0] }}</div>\r\n        <button type=\"submit\">Добавить задачу</button>\r\n        <button @click=\"UPDATE_IS_ADDED_TASK()\">Выйти из создания</button>\r\n    </form> -->\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, minLength } from '@vuelidate/validators'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\nimport 'air-datepicker/air-datepicker.css';\r\nimport AirDatepicker from 'air-datepicker';\r\nexport default {\r\n    setup () {\r\n    return {\r\n        v$: useVuelidate()\r\n    }\r\n    },\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n        new AirDatepicker(this.$refs.taskDate,{\r\n            position: 'right center', // позиционирование календаря\r\n            navTitles: { // стили для отображения шапки календаря\r\n                days: '<strong>yyyy</strong> <i>MMMM</i>',\r\n                months: 'Select month of <strong>yyyy</strong>'    \r\n            }, \r\n            buttons: ['clear'], // кнопки внизу календаря\r\n            minDate: this.formattedDate, // минимально возможный выбор даты \r\n            dateFormat: 'yyyy-MM-dd'\r\n        });\r\n        // new AirDatepicker('#start-time', {\r\n        //     onlyTimepicker: true, \r\n        //     position: 'right center', // позиционирование календаря\r\n        //     timepicker: true, // показ выбора времени\r\n        // });\r\n\r\n        // new AirDatepicker('#end-time', {\r\n        //     onlyTimepicker: true, \r\n        //     position: 'right center', // позиционирование календаря\r\n        //     timepicker: true, // показ выбора времени\r\n        // });\r\n        \r\n    },\r\n    \r\n    data(){\r\n        return {\r\n            taskName: '',\r\n            taskInfo: '', \r\n            taskType: '',\r\n            taskStartDate: '',\r\n            taskStartTime: '',\r\n            taskEndTime: '',\r\n\r\n\r\n            formattedDate: '',\r\n            errors: []\r\n        }\r\n    }, \r\n    validations: {\r\n        taskName: { required, minLength: minLength(6) },\r\n        taskInfo: { required, minLength: minLength(8) },\r\n        taskType: { required },\r\n        // taskStartDate: { required },\r\n    },\r\n    methods: {\r\n        ...mapActions(['ADD_TASK', 'GET_THIS_DAY_TASKS', 'GET_THIS_WEEK_TASKS', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASK']),\r\n\r\n        async addTask(event) {\r\n            event.preventDefault();\r\n\r\n            \r\n            const isFormCorrect = await this.v$.$validate()\r\n\r\n            if (!isFormCorrect) return\r\n\r\n\r\n            \r\n\r\n            console.group()\r\n            console.log(this.taskName)\r\n            console.log(this.taskInfo)\r\n            console.log(this.taskType)\r\n            console.log(this.taskStartDate)\r\n            console.groupEnd()\r\n\r\n            // axios({\r\n            //     method: \"POST\",\r\n            //     url: \"http://localhost:5000/task/createTask\",\r\n            //     headers: {\r\n            //         authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`,\r\n            //     },\r\n            //     data: {\r\n            //         name: this.taskName,\r\n            //         type: this.taskType,\r\n            //         text: this.taskInfo,\r\n            //         status: \"Done\",\r\n            //         startTime: `${this.taskStartDate}T${this.taskStartTime}:00Z`, \r\n            //         endTime: `${this.taskStartDate}T${this.taskEndTime}:00Z`,\r\n            //     },\r\n            //     })\r\n            //     .then(() => {\r\n            //         this.UPDATE_IS_ADDED_TASK()\r\n            //         this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n            //         this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n            //         this.GET_TASKLIST()\r\n            //     })\r\n            //     .catch((err) => {\r\n            //         console.log(err);\r\n            //         // alert(\"Создание задачи не удалось\");\r\n            //     });\r\n        },\r\n        validateTask() {\r\n            // const startTime = new Date(this.taskStartTime)\r\n            // const endTime = new Date(this.taskEndTime)\r\n            // this.errors.push('Время окончания не может быть раньше времени начала')\r\n\r\n            // if (endTime > startTime) {\r\n            //     this.errors.push('Время окончания не может быть раньше времени начала')\r\n            //     this.taskStartTime = ''\r\n            //     this.taskEndTime = ''\r\n            //     return false\r\n            // }\r\n\r\n            return true\r\n        },\r\n    }, \r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK']),\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n\r\n.invalid-span {\r\n    font-size: 12px;\r\n}\r\n.invalid-input {\r\n    color: red;\r\n}\r\n.form-task {\r\n    max-width: 251px;\r\n    max-height: 534px;\r\n    color: #001524;\r\n    background-color: white;\r\n    border-radius: 10px;\r\n    padding: 40px 90px ;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    font-family: Raleway;\r\n    font-weight: 500;\r\n\r\n\r\n}\r\n.form-title{\r\n    font-size: 20px;\r\n    margin-bottom: 35px;\r\n\r\n}\r\n\r\n.form-input {\r\n    width: 100%;\r\n    height: 19px;\r\n    outline: none;\r\n    border: 0px solid white;\r\n    border-bottom: 1px solid #001524;\r\n    font-family: Raleway;\r\n    font-size: 16px;\r\n}\r\n\r\n.form-text {\r\n    font-size: 16px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.form-button-container {\r\n    display: grid;\r\n    grid-template-columns: 120px 120px;\r\n    grid-template-rows: 44px 44px;\r\n    gap: 11px 11px;\r\n}\r\n\r\n/* Скрыть оригинальные радиокнопки */\r\ninput[type=\"radio\"] {\r\n  display: none;\r\n}\r\n\r\n/* Стили для лейблов-кнопок */\r\n.form-button {\r\n    display: inline-block;\r\n    text-align: center;\r\n    padding-top: 11px;\r\n    border: 1px solid #001524;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n}\r\n\r\n/* Изменение стилей лейбла при выборе радиокнопки */\r\ninput[type=\"radio\"]:checked + .form-button {\r\n    background-color: rgb(220,232,233);\r\n}\r\n\r\n\r\n.form-submit{\r\n    width: 100%;\r\n    padding: 16px 53px;\r\n    color:#FFECD1;\r\n    background-color: #87979A;\r\n    border-radius: 10px;\r\n}\r\n\r\n.form-submit_filled {\r\n    width: 100%;\r\n    padding: 16px 53px;\r\n    color:#FFECD1;\r\n    background-color: #15616D;\r\n    border-radius: 10px;\r\n}\r\n\r\n.form-submit_exit{\r\n    width: 100%;\r\n    padding: 16px 53px;\r\n    border-radius: 10px;\r\n    border: 1px solid #001524;\r\n}\r\n\r\n\r\n\r\n/* \r\n&__input {\r\n        width:100%;\r\n        margin-top: 40px;\r\n        margin-bottom: 3px;\r\n        outline: none;\r\n        border: 0px solid white;\r\n        border-bottom: 1px solid $primary-color;\r\n    }\r\n\r\n    &__input:hover {\r\n        border-bottom: 1px solid #001524;\r\n    }\r\n\r\n    &__input:focus {\r\n        color: #001524;\r\n        border-bottom: 1px solid #001524;\r\n    } */\r\n\r\n/* \r\n.form-task {\r\n    background-color: white;\r\n    padding: 30px;\r\n    max-width: 600px;\r\n}\r\n.modal-content {\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  width: 400px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"datetime-local\"] {\r\n  margin: 5px 0;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n}\r\n\r\ninput[type=\"radio\"] {\r\n  margin-right: 5px;\r\n}\r\n\r\nlabel {\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\n\r\ninput[type=\"radio\"] + label {\r\n    font-weight: normal;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n} */\r\n</style>"],"mappings":"AAwGA;AACA,SAASA,YAAW,QAAS,iBAAgB;AAC7C,SAASC,QAAQ,EAAEC,SAAQ,QAAS,uBAAsB;AAC1D,SAASC,UAAU,EAAEC,YAAY,EAAEC,UAAS,QAAS,MAAM;AAC3D,OAAO,mCAAmC;AAC1C,OAAOC,aAAY,MAAO,gBAAgB;AAC1C,eAAe;EACXC,KAAIA,CAAA,EAAK;IACT,OAAO;MACHC,EAAE,EAAER,YAAY,CAAC;IACrB;EACA,CAAC;EACDS,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,aAAY,GAAI,IAAI,CAACC,kBAAkB,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,IAAI,QAAO;IACrF,IAAIR,aAAa,CAAC,IAAI,CAACS,KAAK,CAACC,QAAQ,EAAC;MAClCC,QAAQ,EAAE,cAAc;MAAE;MAC1BC,SAAS,EAAE;QAAE;QACTC,IAAI,EAAE,mCAAmC;QACzCC,MAAM,EAAE;MACZ,CAAC;MACDC,OAAO,EAAE,CAAC,OAAO,CAAC;MAAE;MACpBC,OAAO,EAAE,IAAI,CAACZ,aAAa;MAAE;MAC7Ba,UAAU,EAAE;IAChB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;EAEJ,CAAC;;EAEDC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MAGfpB,aAAa,EAAE,EAAE;MACjBqB,MAAM,EAAE;IACZ;EACJ,CAAC;EACDC,WAAW,EAAE;IACTP,QAAQ,EAAE;MAAExB,QAAQ;MAAEC,SAAS,EAAEA,SAAS,CAAC,CAAC;IAAE,CAAC;IAC/CwB,QAAQ,EAAE;MAAEzB,QAAQ;MAAEC,SAAS,EAAEA,SAAS,CAAC,CAAC;IAAE,CAAC;IAC/CyB,QAAQ,EAAE;MAAE1B;IAAS;IACrB;EACJ,CAAC;;EACDgC,OAAO,EAAE;IACL,GAAG9B,UAAU,CAAC,CAAC,UAAU,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,cAAc,CAAC,CAAC;IACxF,GAAGC,YAAY,CAAC,CAAC,sBAAsB,CAAC,CAAC;IAEzC,MAAM8B,OAAOA,CAACC,KAAK,EAAE;MACjBA,KAAK,CAACC,cAAc,CAAC,CAAC;MAGtB,MAAMC,aAAY,GAAI,MAAM,IAAI,CAAC7B,EAAE,CAAC8B,SAAS,CAAC;MAE9C,IAAI,CAACD,aAAa,EAAE;MAKpBE,OAAO,CAACC,KAAK,CAAC;MACdD,OAAO,CAACE,GAAG,CAAC,IAAI,CAAChB,QAAQ;MACzBc,OAAO,CAACE,GAAG,CAAC,IAAI,CAACf,QAAQ;MACzBa,OAAO,CAACE,GAAG,CAAC,IAAI,CAACd,QAAQ;MACzBY,OAAO,CAACE,GAAG,CAAC,IAAI,CAACb,aAAa;MAC9BW,OAAO,CAACG,QAAQ,CAAC;;MAEjB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC;;IACDC,YAAYA,CAAA,EAAG;MACX;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA,OAAO,IAAG;IACd;EACJ,CAAC;EACDC,QAAQ,EAAE;IACV,GAAGvC,UAAU,CAAC,CAAC,oBAAoB,EAAE,aAAa,EAAE,cAAc,CAAC;EACnE;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}