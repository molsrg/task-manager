{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-109c22c0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"form-task\\\" data-v-109c22c0><h3 class=\\\"form-title\\\" data-v-109c22c0> Создание задачи </h3><form action=\\\"\\\" type=\\\"post\\\" style=\\\"display:flex;flex-direction:column;gap:20px;\\\" data-v-109c22c0><input class=\\\"form-input\\\" type=\\\"text\\\" placeholder=\\\"Название задачи\\\" data-v-109c22c0><input class=\\\"form-input\\\" type=\\\"text\\\" placeholder=\\\"Описание задачи\\\" data-v-109c22c0></form></div>\", 1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createCommentVNode(\" <form action=\\\"\\\" type=\\\"post\\\" @submit=\\\"addTask\\\" class=\\\"form-task\\\">\\r\\n        <input\\r\\n        type=\\\"text\\\"\\r\\n        placeholder=\\\"Название задачи\\\"\\r\\n        required\\r\\n        v-model=\\\"taskName\\\"\\r\\n        />\\r\\n        <input\\r\\n        type=\\\"text\\\"\\r\\n        placeholder=\\\"Описание задачи\\\"\\r\\n        required\\r\\n        v-model=\\\"taskInfo\\\"\\r\\n        />\\r\\n        <label>Выберите тип задачи</label>\\r\\n            <div>\\r\\n                <input type=\\\"radio\\\" id=\\\"taskType1\\\" name=\\\"taskType\\\" v-model=\\\"taskType\\\" value=\\\"Personal\\\" required />\\r\\n                <label for=\\\"taskType1\\\">Личное</label>\\r\\n\\r\\n                <input type=\\\"radio\\\" id=\\\"taskType2\\\" name=\\\"taskType\\\" v-model=\\\"taskType\\\" value=\\\"Working\\\" required />\\r\\n                <label for=\\\"taskType2\\\">Рабочее</label>\\r\\n\\r\\n                <input type=\\\"radio\\\" id=\\\"taskType3\\\" name=\\\"taskType\\\" v-model=\\\"taskType\\\" value=\\\"Optional\\\" required />\\r\\n                <label for=\\\"taskType3\\\">Нераспределённый</label>\\r\\n            </div>\\r\\n\\r\\n\\r\\n        <label for=\\\"date\\\">Выберите дату задачи</label>\\r\\n            <input type=\\\"text\\\"  placeholder=\\\"Начало задачи\\\"\\r\\n            required v-model=\\\"taskStartDate\\\" id=\\\"date\\\">\\r\\n{{ taskStartDate }}\\r\\n        <label for=\\\"start-time\\\">Выберите время начала задачи</label>\\r\\n        <input\\r\\n        type=\\\"text\\\"\\r\\n        id=\\\"start-time\\\"\\r\\n        placeholder=\\\"Начало задачи\\\"\\r\\n        required\\r\\n        v-model=\\\"taskStartTime\\\"\\r\\n        />\\r\\n\\r\\n        <label for=\\\"end-time\\\">Выберите время окончания задачи</label>\\r\\n        <input\\r\\n        type=\\\"text\\\"\\r\\n        id=\\\"end-time\\\"\\r\\n        placeholder=\\\"Окончание задачи\\\"\\r\\n        required\\r\\n        v-model=\\\"taskEndTime\\\"\\r\\n        />\\r\\n            \\r\\n        <div v-if=\\\"errors.length > 0\\\">{{ errors[0] }}</div>\\r\\n        <button type=\\\"submit\\\">Добавить задачу</button>\\r\\n        <button @click=\\\"UPDATE_IS_ADDED_TASK()\\\">Выйти из создания</button>\\r\\n    </form> \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_hoisted_1","_createCommentVNode"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTask.vue"],"sourcesContent":["<template>\r\n    <div class=\"form-task\">\r\n        <h3 class=\"form-title\">\r\n            Создание задачи\r\n        </h3>\r\n        <form action=\"\" type=\"post\" style=\"display: flex; flex-direction: column; gap: 20px;\"> \r\n            <input class=\"form-input\" type=\"text\" placeholder=\"Название задачи\">\r\n            <input class=\"form-input\" type=\"text\" placeholder=\"Описание задачи\">\r\n        </form>\r\n    </div>\r\n    <!-- <form action=\"\" type=\"post\" @submit=\"addTask\" class=\"form-task\">\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Название задачи\"\r\n        required\r\n        v-model=\"taskName\"\r\n        />\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Описание задачи\"\r\n        required\r\n        v-model=\"taskInfo\"\r\n        />\r\n        <label>Выберите тип задачи</label>\r\n            <div>\r\n                <input type=\"radio\" id=\"taskType1\" name=\"taskType\" v-model=\"taskType\" value=\"Personal\" required />\r\n                <label for=\"taskType1\">Личное</label>\r\n\r\n                <input type=\"radio\" id=\"taskType2\" name=\"taskType\" v-model=\"taskType\" value=\"Working\" required />\r\n                <label for=\"taskType2\">Рабочее</label>\r\n\r\n                <input type=\"radio\" id=\"taskType3\" name=\"taskType\" v-model=\"taskType\" value=\"Optional\" required />\r\n                <label for=\"taskType3\">Нераспределённый</label>\r\n            </div>\r\n\r\n\r\n        <label for=\"date\">Выберите дату задачи</label>\r\n            <input type=\"text\"  placeholder=\"Начало задачи\"\r\n            required v-model=\"taskStartDate\" id=\"date\">\r\n{{ taskStartDate }}\r\n        <label for=\"start-time\">Выберите время начала задачи</label>\r\n        <input\r\n        type=\"text\"\r\n        id=\"start-time\"\r\n        placeholder=\"Начало задачи\"\r\n        required\r\n        v-model=\"taskStartTime\"\r\n        />\r\n\r\n        <label for=\"end-time\">Выберите время окончания задачи</label>\r\n        <input\r\n        type=\"text\"\r\n        id=\"end-time\"\r\n        placeholder=\"Окончание задачи\"\r\n        required\r\n        v-model=\"taskEndTime\"\r\n        />\r\n            \r\n        <div v-if=\"errors.length > 0\">{{ errors[0] }}</div>\r\n        <button type=\"submit\">Добавить задачу</button>\r\n        <button @click=\"UPDATE_IS_ADDED_TASK()\">Выйти из создания</button>\r\n    </form> -->\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\nimport 'air-datepicker/air-datepicker.css';\r\nimport AirDatepicker from 'air-datepicker';\r\nexport default {\r\n    mounted() {\r\n\r\n\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n        new AirDatepicker('#date',{\r\n            position: 'right center', // позиционирование календаря\r\n            navTitles: { // стили для отображения шапки календаря\r\n                days: '<strong>yyyy</strong> <i>MMMM</i>',\r\n                months: 'Select month of <strong>yyyy</strong>'    \r\n            }, \r\n            buttons: ['clear'], // кнопки внизу календаря\r\n            minDate: this.formattedDate, // минимально возможный выбор даты \r\n            dateFormat: 'yyyy-MM-dd'\r\n        });\r\n        new AirDatepicker('#start-time', {\r\n            onlyTimepicker: true, \r\n            position: 'right center', // позиционирование календаря\r\n            timepicker: true, // показ выбора времени\r\n        });\r\n\r\n        new AirDatepicker('#end-time', {\r\n            onlyTimepicker: true, \r\n            position: 'right center', // позиционирование календаря\r\n            timepicker: true, // показ выбора времени\r\n        });\r\n        \r\n    },\r\n    data(){\r\n        return {\r\n            taskName: '',\r\n            taskInfo: '', \r\n            taskType: '',\r\n            taskStartDate: '',\r\n            taskStartTime: '',\r\n            taskEndTime: '',\r\n\r\n\r\n            formattedDate: '',\r\n            errors: []\r\n        }\r\n    }, \r\n    methods: {\r\n        ...mapActions(['ADD_TASK', 'GET_THIS_DAY_TASKS', 'GET_THIS_WEEK_TASKS', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASK']),\r\n        addTask(event) {\r\n            event.preventDefault();\r\n            if(!this.validateTask()){\r\n                return \r\n            }\r\n            console.log(this.taskStartDate, 'дата')\r\n            console.log(this.taskStartTime, 'время')\r\n            console.log(this.taskEndTime)\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: \"http://localhost:5000/task/createTask\",\r\n                headers: {\r\n                    authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`,\r\n                },\r\n                data: {\r\n                    name: this.taskName,\r\n                    type: this.taskType,\r\n                    text: this.taskInfo,\r\n                    status: \"Done\",\r\n                    startTime: `${this.taskStartDate}T${this.taskStartTime}:00Z`, \r\n                    endTime: `${this.taskStartDate}T${this.taskEndTime}:00Z`,\r\n                },\r\n                })\r\n                .then(() => {\r\n                    this.UPDATE_IS_ADDED_TASK()\r\n                    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n                    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n                    this.GET_TASKLIST()\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    // alert(\"Создание задачи не удалось\");\r\n                });\r\n        },\r\n        validateTask() {\r\n            // const startTime = new Date(this.taskStartTime)\r\n            // const endTime = new Date(this.taskEndTime)\r\n            // this.errors.push('Время окончания не может быть раньше времени начала')\r\n\r\n            // if (endTime > startTime) {\r\n            //     this.errors.push('Время окончания не может быть раньше времени начала')\r\n            //     this.taskStartTime = ''\r\n            //     this.taskEndTime = ''\r\n            //     return false\r\n            // }\r\n\r\n            return true\r\n        },\r\n    }, \r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS', 'PRESENT_DAY', 'CURRENT_WEEK']),\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.form-task {\r\n    width: 430px;\r\n    height: 534px;\r\n    background-color: white;\r\n    border-radius: 10px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    font-family: Raleway;\r\n    font-weight: 500;\r\n\r\n\r\n}\r\n.form-title{\r\n    color: #001524;\r\n    font-size: 20px;\r\n    margin-top: 40px;\r\n    margin-bottom: 35px;\r\n\r\n}\r\n\r\n.form-input {\r\n    width: 251px;\r\n    height: 19px;\r\n    outline: none;\r\n    border: 0px solid white;\r\n    border-bottom: 1px solid $primary-color;\r\n}\r\n\r\n\r\n&__input {\r\n        width:100%;\r\n        margin-top: 40px;\r\n        margin-bottom: 3px;\r\n        outline: none;\r\n        border: 0px solid white;\r\n        border-bottom: 1px solid $primary-color;\r\n    }\r\n\r\n    &__input:hover {\r\n        border-bottom: 1px solid #001524;\r\n    }\r\n\r\n    &__input:focus {\r\n        color: #001524;\r\n        border-bottom: 1px solid #001524;\r\n    }\r\n\r\n/* \r\n.form-task {\r\n    background-color: white;\r\n    padding: 30px;\r\n    max-width: 600px;\r\n}\r\n.modal-content {\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  width: 400px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"datetime-local\"] {\r\n  margin: 5px 0;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n}\r\n\r\ninput[type=\"radio\"] {\r\n  margin-right: 5px;\r\n}\r\n\r\nlabel {\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\n\r\ninput[type=\"radio\"] + label {\r\n    font-weight: normal;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n} */\r\n</style>"],"mappings":";;;;6DACIA,UAQM,EACNC,mBAAA,2+DAmDW,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}