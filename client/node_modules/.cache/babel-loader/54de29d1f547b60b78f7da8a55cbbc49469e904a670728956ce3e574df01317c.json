{"ast":null,"code":"import VanillaCalendar from '@uvarov.frontend/vanilla-calendar';\nimport '@uvarov.frontend/vanilla-calendar/build/vanilla-calendar.min.css';\nimport '@uvarov.frontend/vanilla-calendar/build/themes/light.min.css';\nimport '@uvarov.frontend/vanilla-calendar/build/themes/dark.min.css';\n\n// start irrelevant code\ndocument.querySelector('#calendar-input').style.display = \"flex\";\n// end irrelevant code\n\nconst calendarInput = new VanillaCalendar('#calendar-input', options);\ncalendarInput.init();\nconst options = {\n  input: true,\n  type: 'multiple',\n  settings: {\n    range: {\n      disablePast: true\n    },\n    selection: {\n      day: 'multiple-ranged'\n    },\n    visibility: {\n      daysOutside: false\n    }\n  },\n  actions: {\n    changeToInput(e, calendar, dates) {\n      if (dates[1]) {\n        dates.sort((a, b) => +new Date(a) - +new Date(b));\n        calendar.HTMLInputElement.value = `${dates[0]} — ${dates[dates.length - 1]}`;\n      } else if (dates[0]) {\n        calendar.HTMLInputElement.value = dates[0];\n      } else {\n        calendar.HTMLInputElement.value = '';\n      }\n    }\n  }\n};\nconst dateValid = () => {\n  if (this.$refs.taskListDate.value.length > 0) {\n    return true;\n  } else {\n    dateValid.$message = 'Выберите дату';\n    return false;\n  }\n};\nimport axios from 'axios';\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\nimport { useVuelidate } from '@vuelidate/core';\nimport { required } from '@vuelidate/validators';\nimport 'air-datepicker/air-datepicker.css';\nimport AirDatepicker from 'air-datepicker';\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00';\n    new AirDatepicker('#taskListDate', {\n      position: 'right center',\n      range: true,\n      multipleDatesSeparator: ' - ',\n      dateFormat: 'yyyy-MM-dd',\n      autoClose: true\n    });\n  },\n  data() {\n    return {\n      taskListTitle: '',\n      taskListInfo: '',\n      taskListDate: '',\n      taskListStartTime: '',\n      taskListEndTime: '',\n      formattedDate: ''\n    };\n  },\n  validations: {\n    taskListTitle: {\n      required\n    },\n    taskListInfo: {\n      required\n    },\n    taskListDate: {\n      dateValid\n    }\n  },\n  methods: {\n    show() {\n      console.log(this.$refs.taskListDate.value);\n    },\n    ...mapActions(['ADD_TASK', 'GET_TASKLIST']),\n    ...mapMutations(['UPDATE_IS_ADDED_TASKLIST']),\n    splitDateRange(dateRange) {\n      const [startDate, endDate] = dateRange.split(' - ');\n      return {\n        startDate,\n        endDate\n      };\n    },\n    formatToISODate(dateString) {\n      const date = new Date(dateString);\n      if (!isNaN(date.getTime())) {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        return `${year}-${month}-${day}T00:00:00Z`;\n      } else {\n        return null;\n      }\n    },\n    async addTaskList(event) {\n      event.preventDefault();\n      const taskDateInput = this.$refs.taskListDate;\n      this.taskListDate = taskDateInput.value;\n      const isFormCorrect = await this.v$.$validate();\n      if (!isFormCorrect) return;\n      const {\n        startDate,\n        endDate\n      } = this.splitDateRange(this.taskListDate);\n      axios({\n        method: 'POST',\n        url: 'http://localhost:5000/task/createTaskList',\n        headers: {\n          'authorization': `Bearer ${localStorage.getItem('AccessToken')}`\n        },\n        data: {\n          title: this.taskListTitle,\n          toggleCircle: false,\n          isTasklistVisible: false,\n          startTime: this.formatToISODate(startDate),\n          endTime: this.formatToISODate(endDate)\n        }\n      }).then(() => {\n        this.UPDATE_IS_ADDED_TASKLIST();\n        this.GET_TASKLIST();\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  },\n  computed: {\n    ...mapGetters(['USER_REGISTRATIONS'])\n  }\n};","map":{"version":3,"names":["VanillaCalendar","document","querySelector","style","display","calendarInput","options","init","input","type","settings","range","disablePast","selection","day","visibility","daysOutside","actions","changeToInput","e","calendar","dates","sort","a","b","Date","HTMLInputElement","value","length","dateValid","$refs","taskListDate","$message","axios","mapActions","mapMutations","mapGetters","useVuelidate","required","AirDatepicker","setup","v$","mounted","formattedDate","USER_REGISTRATIONS","split","reverse","join","position","multipleDatesSeparator","dateFormat","autoClose","data","taskListTitle","taskListInfo","taskListStartTime","taskListEndTime","validations","methods","show","console","log","splitDateRange","dateRange","startDate","endDate","formatToISODate","dateString","date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","getDate","addTaskList","event","preventDefault","taskDateInput","isFormCorrect","$validate","method","url","headers","localStorage","getItem","title","toggleCircle","isTasklistVisible","startTime","endTime","then","UPDATE_IS_ADDED_TASKLIST","GET_TASKLIST","catch","err","computed"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTaskList.vue"],"sourcesContent":["<template>\r\n        <div class=\"form-task\">\r\n            <h3 class=\"form-title\">\r\n                Создание списка задач\r\n            </h3>\r\n            <form action=\"\" type=\"post\" @submit=\"addTaskList\" style=\"display: flex; flex-direction: column; gap: 20px;\"> \r\n                <div>\r\n                    <input \r\n                        class=\"form-input\" \r\n                        type=\"text\" \r\n                        placeholder=\"Название списка\" \r\n                        v-model=\"taskListTitle\"\r\n                    > \r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListTitle.$invalid && v$.taskListTitle.$dirty\">Заполните поле</span>\r\n                </div>\r\n                \r\n                <div>\r\n                    <input class=\"form-input\" type=\"text\" placeholder=\"Описание списка\" v-model=\"taskListInfo\" id=\"calendar-input\">\r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListInfo.$invalid && v$.taskListInfo.$dirty\">Заполните поле </span>\r\n                </div>\r\n                \r\n\r\n                <div>\r\n                    <input  id=\"taskListDate\" ref=\"taskListDate\" class=\"form-input\" type=\"text\" placeholder=\"Дата выполнения\" v-model=\"taskListDate\">\r\n                    {{ v$.taskListDate }}\r\n                    \r\n                </div>\r\n                <button @click=\"show\">wefffff</button>\r\n                <button class=\"form-submit\" type=\"submit\" :class=\"{ 'form-submit_filled': !this.v$.$invalid }\">Создать</button>\r\n                <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASKLIST()\">Отмена</button>\r\n            </form>\r\n    </div>\r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\nimport VanillaCalendar from '@uvarov.frontend/vanilla-calendar';\r\nimport '@uvarov.frontend/vanilla-calendar/build/vanilla-calendar.min.css';\r\nimport '@uvarov.frontend/vanilla-calendar/build/themes/light.min.css';\r\nimport '@uvarov.frontend/vanilla-calendar/build/themes/dark.min.css';\r\n\r\n// start irrelevant code\r\ndocument.querySelector('#calendar-input').style.display = \"flex\";\r\n// end irrelevant code\r\n\r\n\r\nconst calendarInput = new VanillaCalendar('#calendar-input', options);\r\ncalendarInput.init();\r\n\r\nconst options = {\r\n  input: true,\r\n  type: 'multiple',\r\n  settings: {\r\n    range: {\r\n      disablePast: true,\r\n    },\r\n    selection: {\r\n      day: 'multiple-ranged',\r\n    },\r\n    visibility: {\r\n      daysOutside: false,\r\n    },\r\n  },\r\n  actions: {\r\n    changeToInput(e, calendar, dates) {\r\n      if (dates[1]) {\r\n        dates.sort((a, b) => +new Date(a) - +new Date(b));\r\n        calendar.HTMLInputElement.value = `${dates[0]} — ${dates[dates.length - 1]}`;\r\n      } else if (dates[0]) {\r\n        calendar.HTMLInputElement.value = dates[0];\r\n      } else {\r\n        calendar.HTMLInputElement.value = '';\r\n      }\r\n    },\r\n  },\r\n};\r\n\r\n\r\nconst dateValid = () => {\r\n    if(this.$refs.taskListDate.value.length > 0){\r\n        return true\r\n    }\r\n    else {\r\n        dateValid.$message = 'Выберите дату';\r\n        return false;\r\n    }\r\n}\r\n\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required } from '@vuelidate/validators'\r\n\r\nimport 'air-datepicker/air-datepicker.css';\r\nimport AirDatepicker from 'air-datepicker';\r\n\r\n\r\nexport default {\r\n    setup () {\r\n        return {\r\n            v$: useVuelidate()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n\r\n        new AirDatepicker('#taskListDate',{\r\n            position: 'right center',\r\n            range: true,\r\n            multipleDatesSeparator: ' - ', \r\n            dateFormat: 'yyyy-MM-dd',\r\n            autoClose: true,\r\n        });\r\n        \r\n    },\r\n    data(){\r\n        return {\r\n            taskListTitle: '',\r\n            taskListInfo: '',\r\n            taskListDate:'',\r\n\r\n\r\n            taskListStartTime: '',\r\n            taskListEndTime: '',\r\n\r\n            formattedDate: ''\r\n        }\r\n    }, \r\n    validations: {\r\n        taskListTitle: { required },\r\n        taskListInfo: { required },\r\n        taskListDate: { dateValid },\r\n\r\n    },\r\n    methods: {\r\n\r\n        show(){\r\n            console.log(this.$refs.taskListDate.value)\r\n        },\r\n        ...mapActions(['ADD_TASK', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASKLIST']),\r\n        splitDateRange(dateRange) {\r\n            const [startDate, endDate] = dateRange.split(' - ');\r\n            return { startDate, endDate };\r\n        },\r\n\r\n        formatToISODate(dateString) {\r\n            const date = new Date(dateString);\r\n            if (!isNaN(date.getTime())) {\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                const day = String(date.getDate()).padStart(2, '0');\r\n                return `${year}-${month}-${day}T00:00:00Z`;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        \r\n        async addTaskList(event) {\r\n            event.preventDefault();\r\n\r\n            const taskDateInput = this.$refs.taskListDate\r\n            this.taskListDate = taskDateInput.value\r\n\r\n\r\n            const isFormCorrect = await this.v$.$validate()\r\n            if (!isFormCorrect) return\r\n\r\n            const { startDate, endDate } = this.splitDateRange(this.taskListDate);\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'http://localhost:5000/task/createTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.formatToISODate(startDate),\r\n                    endTime: this.formatToISODate(endDate),\r\n                },\r\n            })\r\n            .then(() => {\r\n                this.UPDATE_IS_ADDED_TASKLIST()\r\n                this.GET_TASKLIST()\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            }) \r\n        }\r\n    },\r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS']),\r\n    },\r\n};\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}