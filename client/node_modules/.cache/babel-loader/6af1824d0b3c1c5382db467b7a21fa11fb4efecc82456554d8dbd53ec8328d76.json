{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-540c405e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"form-task\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"form-title\"\n}, \" Создание списка задач \", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"form-submit\",\n  type: \"submit\"\n}, \"Создать\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    action: \"\",\n    type: \"post\",\n    onSubmit: _cache[4] || (_cache[4] = (...args) => _ctx.addTaskList && _ctx.addTaskList(...args)),\n    style: {\n      \"display\": \"flex\",\n      \"flex-direction\": \"column\",\n      \"gap\": \"20px\"\n    }\n  }, [_createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Название списка\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.taskListTitle = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListTitle]]), _ctx.v$.taskListTitle.$invalid ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Минимальная длина 6 символов\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Описание списка\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.taskListInfo = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListInfo]]), _ctx.v$.taskListInfo.$invalid ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \"Минимальная длина 8 символов\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"taskListDate\",\n    ref: \"taskListDate\",\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Дата выполнения\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.taskListDate = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListDate]])]), _hoisted_5, _createElementVNode(\"button\", {\n    class: \"form-submit_exit\",\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.UPDATE_IS_ADDED_TASKLIST())\n  }, \"Отмена\")], 32 /* HYDRATE_EVENTS */)]), _createCommentVNode(\" <form action=\\\"\\\" type=\\\"post\\\" @submit=\\\"addTaskList\\\">\\r\\n        <input\\r\\n        type=\\\"text\\\"\\r\\n        placeholder=\\\"Название списка\\\"\\r\\n        required\\r\\n        v-model=\\\"taskListTitle\\\"\\r\\n        />\\r\\n\\r\\n        <label for=\\\"start-time\\\">Выберите промежуток отслеживания списка</label>\\r\\n        <input\\r\\n        id=\\\"start-time\\\"\\r\\n        type=\\\"text\\\"\\r\\n        placeholder=\\\"Начало задачи\\\"\\r\\n        required\\r\\n        v-model=\\\"taskListStartTime\\\"\\r\\n        :min=\\\"formattedDate\\\"\\r\\n        />\\r\\n        \\r\\n\\r\\n        <button type=\\\"submit\\\">Добавить список</button>\\r\\n        <button @click=\\\"UPDATE_IS_ADDED_TASKLIST()\\\">Выйти из создания</button>\\r\\n    </form> \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","type","_hoisted_1","_hoisted_2","action","onSubmit","_cache","args","_ctx","addTaskList","style","placeholder","taskListTitle","$event","v$","$invalid","_createElementBlock","_hoisted_3","taskListInfo","_hoisted_4","id","ref","taskListDate","_hoisted_5","onClick","UPDATE_IS_ADDED_TASKLIST","_createCommentVNode"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTaskList.vue"],"sourcesContent":["<template>\r\n        <div class=\"form-task\">\r\n            <h3 class=\"form-title\">\r\n                Создание списка задач\r\n            </h3>\r\n            <form action=\"\" type=\"post\" @submit=\"addTaskList\" style=\"display: flex; flex-direction: column; gap: 20px;\"> \r\n                <div>\r\n                    <input \r\n                        class=\"form-input\" \r\n                        type=\"text\" \r\n                        placeholder=\"Название списка\" \r\n                        v-model=\"taskListTitle\"\r\n                    > \r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListTitle.$invalid\">Минимальная длина 6 символов</span>\r\n                </div>\r\n                \r\n                <div>\r\n                    <input class=\"form-input\" type=\"text\" placeholder=\"Описание списка\" v-model=\"taskListInfo\">\r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListInfo.$invalid\">Минимальная длина 8 символов</span>\r\n                </div>\r\n                \r\n\r\n                <div>\r\n                    <input  id=\"taskListDate\" ref=\"taskListDate\" class=\"form-input\" type=\"text\" placeholder=\"Дата выполнения\" v-model=\"taskListDate\">\r\n                    \r\n                </div>\r\n\r\n                <button class=\"form-submit\" type=\"submit\">Создать</button>\r\n                <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASKLIST()\">Отмена</button>\r\n            </form>\r\n    </div>\r\n    <!-- <form action=\"\" type=\"post\" @submit=\"addTaskList\">\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Название списка\"\r\n        required\r\n        v-model=\"taskListTitle\"\r\n        />\r\n\r\n        <label for=\"start-time\">Выберите промежуток отслеживания списка</label>\r\n        <input\r\n        id=\"start-time\"\r\n        type=\"text\"\r\n        placeholder=\"Начало задачи\"\r\n        required\r\n        v-model=\"taskListStartTime\"\r\n        :min=\"formattedDate\"\r\n        />\r\n        \r\n\r\n        <button type=\"submit\">Добавить список</button>\r\n        <button @click=\"UPDATE_IS_ADDED_TASKLIST()\">Выйти из создания</button>\r\n    </form> -->\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required, minLength } from '@vuelidate/validators'\r\n\r\nimport 'air-datepicker/air-datepicker.css';\r\nimport AirDatepicker from 'air-datepicker';\r\nexport default {\r\n    setup () {\r\n        return {\r\n            v$: useVuelidate()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n\r\n        new AirDatepicker('#taskListDate',{\r\n            position: 'right center',\r\n            range: true,\r\n            multipleDatesSeparator: ' - ', \r\n            dateFormat: 'yyyy-MM-dd',\r\n            buttons: [\r\n        {\r\n            content(dp) {\r\n                return dp.opts.timepicker \r\n                    ? 'Выключить выбор времени'\r\n                    : 'Включить выбор времени'\r\n            },\r\n            onClick(dp) {\r\n                let viewDate = dp.viewDate;\r\n                let today = new Date();\r\n                \r\n                // Since timepicker takes initial time from 'viewDate', set up time here, \r\n                // otherwise time will be equal to 00:00 if user navigated through datepicker\r\n                viewDate.setHours(today.getHours());\r\n                viewDate.setMinutes(today.getMinutes());\r\n\r\n                dp.update({\r\n                    timepicker: !dp.opts.timepicker,\r\n                    viewDate\r\n                })\r\n            }\r\n        }\r\n    ]\r\n        });\r\n        \r\n    },\r\n    data(){\r\n        return {\r\n            taskListTitle: '',\r\n            taskListInfo: '',\r\n            taskListDate:'',\r\n\r\n\r\n            taskListStartTime: '',\r\n            taskListEndTime: '',\r\n\r\n            formattedDate: ''\r\n        }\r\n    }, \r\n    validations: {\r\n        taskListTitle: { required, minLength: minLength(6) },\r\n        taskListInfo: { required, minLength: minLength(8) },\r\n        taskListDate: { required },\r\n\r\n    },\r\n    methods: {\r\n        ...mapActions(['ADD_TASK', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASKLIST']),\r\n        splitDateRange(dateRange) {\r\n            const [startDate, endDate] = dateRange.split(' - ');\r\n            return { startDate, endDate };\r\n        },\r\n\r\n        formatToISODate(dateString) {\r\n            const date = new Date(dateString);\r\n            if (!isNaN(date.getTime())) {\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                const day = String(date.getDate()).padStart(2, '0');\r\n                return `${year}-${month}-${day}T00:00:00Z`;\r\n            } else {\r\n                return null;\r\n            }\r\n            },\r\n        async addTaskList(event) {\r\n            event.preventDefault();\r\n            const taskDateInput = this.$refs.taskListDate\r\n            this.taskListDate = taskDateInput.value\r\n\r\n            const isFormCorrect = await this.v$.$validate()\r\n            if (!isFormCorrect) return\r\n\r\n            const { startDate, endDate } = this.splitDateRange(this.taskListDate);\r\n\r\n            console.log(startDate, endDate)\r\n            console.log(thisformatToISODate\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'http://localhost:5000/task/createTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.taskListStartTime,\r\n                    endTime: this.taskListEndTime,\r\n                },\r\n            })\r\n            .then(() => {\r\n                this.UPDATE_IS_ADDED_TASKLIST()\r\n                this.GET_TASKLIST()\r\n\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                alert(\"Создание списка не удалось\")\r\n            }) \r\n        }\r\n    },\r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS' ]),\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Стили для модального окна */\r\n\r\n.invalid-span {\r\n    font-size: 12px;\r\n}\r\n\r\n.form-task {\r\n    max-width: 251px;\r\n    max-height: 600px;\r\n    color: #001524;\r\n    background-color: white;\r\n    border-radius: 10px;\r\n    padding: 40px 90px ;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    font-family: Raleway;\r\n    font-weight: 500;\r\n}\r\n\r\n.form-title{\r\n    font-size: 20px;\r\n    margin-bottom: 35px;\r\n}\r\n\r\n.form-input {\r\n    width: 251px;\r\n    height: 19px;\r\n    outline: none;\r\n    border: 0px solid white;\r\n    border-bottom: 1px solid #001524;\r\n    font-family: Raleway;\r\n    font-size: 16px;\r\n}\r\n\r\n.form-text {\r\n    font-size: 16px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n\r\n\r\n.form-submit{\r\n    width: 100%;\r\n    padding: 16px 53px;\r\n    color:#FFECD1;\r\n    background-color: #87979A;\r\n    border-radius: 10px;\r\n    transition: background-color 0.3s;\r\n}\r\n\r\n.form-submit_filled {\r\n    background-color: #15616D;\r\n}\r\n\r\n.form-submit_exit{\r\n    width: 100%;\r\n    padding: 16px 53px;\r\n    border-radius: 10px;\r\n    border: 1px solid #001524;\r\n}\r\n\r\n</style>"],"mappings":";;;EACaA,KAAK,EAAC;AAAW;gEAClBC,mBAAA,CAEK;EAFDD,KAAK,EAAC;AAAY,GAAC,yBAEvB;;;EAScA,KAAK,EAAC;;;;EAKNA,KAAK,EAAC;;gEAShBC,mBAAA,CAA0D;EAAlDD,KAAK,EAAC,aAAa;EAACE,IAAI,EAAC;GAAS,SAAO;;;6DA1BzDD,mBAAA,CA6BE,OA7BFE,UA6BE,GA5BEC,UAEK,EACLH,mBAAA,CAwBO;IAxBDI,MAAM,EAAC,EAAE;IAACH,IAAI,EAAC,MAAM;IAAEI,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,WAAA,IAAAD,IAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,KAAyD,EAAzD;MAAA;MAAA;MAAA;IAAA;MAC9CV,mBAAA,CAQM,c,gBAPFA,mBAAA,CAKC;IAJGD,KAAK,EAAC,YAAY;IAClBE,IAAI,EAAC,MAAM;IACXU,WAAW,EAAC,iBAAiB;+DACpBH,IAAA,CAAAI,aAAa,GAAAC,MAAA;iDAAbL,IAAA,CAAAI,aAAa,E,GAEOJ,IAAA,CAAAM,EAAE,CAACF,aAAa,CAACG,QAAQ,I,cAA1DC,mBAAA,CAA+F,QAA/FC,UAA+F,EAAnC,8BAA4B,K,qCAG5FjB,mBAAA,CAGM,c,gBAFFA,mBAAA,CAA2F;IAApFD,KAAK,EAAC,YAAY;IAACE,IAAI,EAAC,MAAM;IAACU,WAAW,EAAC,iBAAiB;+DAAUH,IAAA,CAAAU,YAAY,GAAAL,MAAA;iDAAZL,IAAA,CAAAU,YAAY,E,GACxDV,IAAA,CAAAM,EAAE,CAACI,YAAY,CAACH,QAAQ,I,cAAzDC,mBAAA,CAA8F,QAA9FG,UAA8F,EAAnC,8BAA4B,K,qCAI3FnB,mBAAA,CAGM,c,gBAFFA,mBAAA,CAAiI;IAAzHoB,EAAE,EAAC,cAAc;IAACC,GAAG,EAAC,cAAc;IAACtB,KAAK,EAAC,YAAY;IAACE,IAAI,EAAC,MAAM;IAACU,WAAW,EAAC,iBAAiB;+DAAUH,IAAA,CAAAc,YAAY,GAAAT,MAAA;iDAAZL,IAAA,CAAAc,YAAY,E,KAInIC,UAA0D,EAC1DvB,mBAAA,CAAoF;IAA5ED,KAAK,EAAC,kBAAkB;IAAEyB,OAAK,EAAAlB,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAAEL,IAAA,CAAAiB,wBAAwB;KAAI,QAAM,E,8BAGvFC,mBAAA,isBAqBW,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}