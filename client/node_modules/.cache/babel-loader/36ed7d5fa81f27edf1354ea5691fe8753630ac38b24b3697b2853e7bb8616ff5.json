{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\nexport default {\n  mounted() {\n    this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00';\n  },\n  data() {\n    return {\n      taskName: '',\n      taskInfo: '',\n      taskType: '',\n      taskStartTime: '',\n      taskEndTime: '',\n      formattedDate: '',\n      errors: []\n    };\n  },\n  methods: {\n    ...mapActions(['ADD_TASK']),\n    ...mapMutations(['UPDATE_IS_ADDED_TASK']),\n    addTask(event) {\n      event.preventDefault();\n      if (!this.validateTask()) {\n        return;\n      }\n      axios({\n        method: \"POST\",\n        url: \"http://localhost:5000/task/createTask\",\n        headers: {\n          authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`\n        },\n        data: {\n          name: this.taskName,\n          type: this.taskType,\n          text: this.taskInfo,\n          status: \"Done\",\n          startTime: this.taskStartTime,\n          endTime: this.taskEndTime\n        }\n      }).then(() => {\n        this.UPDATE_IS_ADDED_TASK();\n        location.reload();\n      }).catch(err => {\n        console.log(err);\n        alert(\"Создание задачи не удалось\");\n      });\n    },\n    validateTask() {\n      const startTime = new Date(this.taskStartTime);\n      const endTime = new Date(this.taskEndTime);\n      if (startTime.getTime() >= endTime.getTime()) {\n        this.errors.push('Дата окончания должна быть больше даты начала');\n        this.taskStartTime = '';\n      }\n      if (startTime.getDate() !== endTime.getDate()) {\n        this.errors.push('Дата начала и окончания задачи должны быть в один день');\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['USER_REGISTRATIONS'])\n  }\n};","map":{"version":3,"names":["axios","mapActions","mapMutations","mapGetters","mounted","formattedDate","USER_REGISTRATIONS","split","reverse","join","data","taskName","taskInfo","taskType","taskStartTime","taskEndTime","errors","methods","addTask","event","preventDefault","validateTask","method","url","headers","authorization","localStorage","getItem","name","type","text","status","startTime","endTime","then","UPDATE_IS_ADDED_TASK","location","reload","catch","err","console","log","alert","Date","getTime","push","getDate","computed"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTask.vue"],"sourcesContent":["<template>\r\n    <form action=\"\" type=\"post\" @submit=\"addTask\" class=\"form-task\">\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Название задачи\"\r\n        required\r\n        v-model=\"taskName\"\r\n        />\r\n        <input\r\n        type=\"text\"\r\n        placeholder=\"Описание задачи\"\r\n        required\r\n        v-model=\"taskInfo\"\r\n        />\r\n        <label>Выберите тип задачи</label>\r\n            <div>\r\n                <input type=\"radio\" id=\"taskType1\" name=\"taskType\" v-model=\"taskType\" value=\"Personal\" required />\r\n                <label for=\"taskType1\">Личное</label>\r\n\r\n                <input type=\"radio\" id=\"taskType2\" name=\"taskType\" v-model=\"taskType\" value=\"Working\" required />\r\n                <label for=\"taskType2\">Рабочее</label>\r\n\r\n                <input type=\"radio\" id=\"taskType3\" name=\"taskType\" v-model=\"taskType\" value=\"Optional\" required />\r\n                <label for=\"taskType3\">Нераспределённый</label>\r\n            </div>\r\n\r\n\r\n        <label for=\"start-time\">Выберите время и дату начала задачи</label>\r\n        <input\r\n        id=\"start-time\"\r\n        type=\"datetime-local\"\r\n        placeholder=\"Начало задачи\"\r\n        required\r\n        :min=\"formattedDate\"\r\n        v-model=\"taskStartTime\"\r\n        />\r\n        <label for=\"end-time\">Выберите время и дату окончания задачи</label>\r\n        <input\r\n        type=\"datetime-local\"\r\n        id=\"end-time\"\r\n        placeholder=\"Окончание задачи\"\r\n        required\r\n        v-model=\"taskEndTime\"\r\n        />\r\n            \r\n        <div v-if=\"errors.length > 0\">{{ errors[0] }}</div>\r\n        <button type=\"submit\">Добавить задачу</button>\r\n        <button @click=\"UPDATE_IS_ADDED_TASK()\">Выйти из создания</button>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\nexport default {\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n    },\r\n    data(){\r\n        return {\r\n            taskName: '',\r\n            taskInfo: '', \r\n            taskType: '',\r\n            taskStartTime: '',\r\n            taskEndTime: '',\r\n\r\n\r\n            formattedDate: '',\r\n            errors: []\r\n        }\r\n    }, \r\n    methods: {\r\n        ...mapActions(['ADD_TASK']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASK']),\r\n        addTask(event) {\r\n            event.preventDefault();\r\n            if(!this.validateTask()){\r\n                return \r\n            }\r\n            axios({\r\n                method: \"POST\",\r\n                url: \"http://localhost:5000/task/createTask\",\r\n                headers: {\r\n                    authorization: `Bearer ${localStorage.getItem(\"AccessToken\")}`,\r\n                },\r\n                data: {\r\n                    name: this.taskName,\r\n                    type: this.taskType,\r\n                    text: this.taskInfo,\r\n                    status: \"Done\",\r\n                    startTime: this.taskStartTime,\r\n                    endTime: this.taskEndTime,\r\n                },\r\n                })\r\n                .then(() => {\r\n                    this.UPDATE_IS_ADDED_TASK()\r\n                    location.reload();\r\n\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    alert(\"Создание задачи не удалось\");\r\n                });\r\n        },\r\n        validateTask() {\r\n            const startTime = new Date(this.taskStartTime)\r\n            const endTime = new Date(this.taskEndTime)\r\n\r\n            if (startTime.getTime() >= endTime.getTime()) {\r\n                this.errors.push('Дата окончания должна быть больше даты начала')\r\n                this.taskStartTime= ''\r\n            }\r\n            if (startTime.getDate() !== endTime.getDate()) {\r\n                this.errors.push('Дата начала и окончания задачи должны быть в один день')\r\n            }\r\n\r\n        },\r\n    }, \r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS' ]),\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Стили для модального окна */\r\n.form-task {\r\n    background-color: white;\r\n    padding: 30px;\r\n    max-width: 600px;\r\n}\r\n.modal {\r\n  position: fixed;\r\n  top: 25%;\r\n  left: 25%;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5); /* Затемненный фон */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000; /* Выше других элементов на странице */\r\n}\r\n\r\n.modal-content {\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  width: 400px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n/* Стили для формы и её элементов */\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"datetime-local\"] {\r\n  margin: 5px 0;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n}\r\n\r\ninput[type=\"radio\"] {\r\n  margin-right: 5px;\r\n}\r\n\r\nlabel {\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Стили для радиокнопок */\r\ninput[type=\"radio\"] + label {\r\n    font-weight: normal;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Стили для кнопок и других элементов формы (если есть) */\r\nbutton {\r\n  margin-top: 10px;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 3px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":";AAoDA,OAAOA,KAAI,MAAO,OAAM;AACxB,SAASC,UAAU,EAAEC,YAAY,EAAEC,UAAS,QAAS,MAAM;AAC3D,eAAe;EACXC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,aAAY,GAAI,IAAI,CAACC,kBAAkB,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,IAAI,QAAO;EACzF,CAAC;EACDC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,EAAE;MAGfV,aAAa,EAAE,EAAE;MACjBW,MAAM,EAAE;IACZ;EACJ,CAAC;EACDC,OAAO,EAAE;IACL,GAAGhB,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC;IAC3B,GAAGC,YAAY,CAAC,CAAC,sBAAsB,CAAC,CAAC;IACzCgB,OAAOA,CAACC,KAAK,EAAE;MACXA,KAAK,CAACC,cAAc,CAAC,CAAC;MACtB,IAAG,CAAC,IAAI,CAACC,YAAY,CAAC,CAAC,EAAC;QACpB;MACJ;MACArB,KAAK,CAAC;QACFsB,MAAM,EAAE,MAAM;QACdC,GAAG,EAAE,uCAAuC;QAC5CC,OAAO,EAAE;UACLC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAE;QACjE,CAAC;QACDjB,IAAI,EAAE;UACFkB,IAAI,EAAE,IAAI,CAACjB,QAAQ;UACnBkB,IAAI,EAAE,IAAI,CAAChB,QAAQ;UACnBiB,IAAI,EAAE,IAAI,CAAClB,QAAQ;UACnBmB,MAAM,EAAE,MAAM;UACdC,SAAS,EAAE,IAAI,CAAClB,aAAa;UAC7BmB,OAAO,EAAE,IAAI,CAAClB;QAClB;MACA,CAAC,EACAmB,IAAI,CAAC,MAAM;QACR,IAAI,CAACC,oBAAoB,CAAC;QAC1BC,QAAQ,CAACC,MAAM,CAAC,CAAC;MAErB,CAAC,EACAC,KAAK,CAAEC,GAAG,IAAK;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChBG,KAAK,CAAC,4BAA4B,CAAC;MACvC,CAAC,CAAC;IACV,CAAC;IACDrB,YAAYA,CAAA,EAAG;MACX,MAAMW,SAAQ,GAAI,IAAIW,IAAI,CAAC,IAAI,CAAC7B,aAAa;MAC7C,MAAMmB,OAAM,GAAI,IAAIU,IAAI,CAAC,IAAI,CAAC5B,WAAW;MAEzC,IAAIiB,SAAS,CAACY,OAAO,CAAC,KAAKX,OAAO,CAACW,OAAO,CAAC,CAAC,EAAE;QAC1C,IAAI,CAAC5B,MAAM,CAAC6B,IAAI,CAAC,+CAA+C;QAChE,IAAI,CAAC/B,aAAa,GAAE,EAAC;MACzB;MACA,IAAIkB,SAAS,CAACc,OAAO,CAAC,MAAMb,OAAO,CAACa,OAAO,CAAC,CAAC,EAAE;QAC3C,IAAI,CAAC9B,MAAM,CAAC6B,IAAI,CAAC,wDAAwD;MAC7E;IAEJ;EACJ,CAAC;EACDE,QAAQ,EAAE;IACV,GAAG5C,UAAU,CAAC,CAAC,oBAAmB,CAAG;EACrC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}