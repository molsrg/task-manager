{"ast":null,"code":"// Файл с обработкой задач, которые находятся на главном календаре, высчисление стилей задачи\n\nexport default {\n  // Функция для вычисления фона задачи\n  calculateTaskColor(task) {\n    if (task.type == \"Personal\") {\n      return \"#C4D7DA\";\n    }\n    if (task.type == \"Working\") {\n      return \"#FFDEBF\";\n    }\n    if (task.type == \"Optional\") {\n      return \"#DDC9C3\";\n    }\n  },\n  // Функция для вычисления длины задачи в пикселях\n  calculateTaskLengthInPixels(task) {\n    // Получаем время начала и времени окончания из задачи\n    const startTime = new Date(task.startTime);\n    const endTime = new Date(task.endTime);\n\n    // Вычисляем продолжительность задачи в минутах\n    const durationInMinutes = (endTime - startTime) / (1000 * 60);\n\n    // Вычисляем длину задачи в пикселях (1 час = 80 пикселей)\n    let lengthInPixels = durationInMinutes / 60 * 80;\n    const addedHours = endTime.getHours() - startTime.getHours() - 1;\n    // Добавляем 10px за каждый пройденный час\n    if (addedHours + 1 > 1) {\n      let additionalPixels = addedHours * 9;\n      if (endTime.getMinutes() !== 0) {\n        lengthInPixels += 5;\n      }\n      return lengthInPixels + additionalPixels;\n    }\n    return lengthInPixels;\n  },\n  // Функция для вычисления левого позиционирования задачи в пикселях\n  calculateLeftPosition(task, currentWeek) {\n    const startTime = new Date(task.startTime);\n    const day = startTime.getDate();\n    const month = startTime.getMonth() + 1;\n    const year = startTime.getFullYear();\n    const date = [day, month, year];\n    for (let i = 0; i < currentWeek.length; i++) {\n      if (currentWeek[i][1] == date[0] && currentWeek[i][4] == date[1]) {\n        return i * 180 + 65;\n      }\n    }\n  },\n  // Функция для вычисления верхнего позиционирования задачи в пикселях\n  calculateTaskStartPosition(task) {\n    const startTime = new Date(task.startTime);\n    const startHour = startTime.getUTCHours();\n    const startMinute = startTime.getUTCMinutes();\n    const totalMinutes = (startHour - 1) * 60 + startMinute;\n    const startPosition = totalMinutes / 60 * 89 - 20;\n    if (startMinute === 0) {\n      return startPosition + 5;\n    }\n    return startPosition;\n  }\n};","map":{"version":3,"names":["calculateTaskColor","task","type","calculateTaskLengthInPixels","startTime","Date","endTime","durationInMinutes","lengthInPixels","addedHours","getHours","additionalPixels","getMinutes","calculateLeftPosition","currentWeek","day","getDate","month","getMonth","year","getFullYear","date","i","length","calculateTaskStartPosition","startHour","getUTCHours","startMinute","getUTCMinutes","totalMinutes","startPosition"],"sources":["C:/Users/Sergey/Documents/GitHub/task-manager/client/src/components/Task/Task.js"],"sourcesContent":["// Файл с обработкой задач, которые находятся на главном календаре, высчисление стилей задачи\r\n\r\nexport default {\r\n    // Функция для вычисления фона задачи\r\n    calculateTaskColor(task) {\r\n        if (task.type == \"Personal\") {\r\n            return \"#C4D7DA\";\r\n        }\r\n        if (task.type == \"Working\") {\r\n            return \"#FFDEBF\";\r\n        }\r\n        if (task.type == \"Optional\") {\r\n            return \"#DDC9C3\";\r\n        }\r\n    },\r\n\r\n    // Функция для вычисления длины задачи в пикселях\r\n    calculateTaskLengthInPixels(task) {\r\n        // Получаем время начала и времени окончания из задачи\r\n        const startTime = new Date(task.startTime);\r\n        const endTime = new Date(task.endTime);\r\n\r\n        // Вычисляем продолжительность задачи в минутах\r\n        const durationInMinutes = (endTime - startTime) / (1000 * 60);\r\n    \r\n        // Вычисляем длину задачи в пикселях (1 час = 80 пикселей)\r\n        let lengthInPixels = (durationInMinutes / 60) * 80\r\n\r\n        const addedHours = endTime.getHours() - startTime.getHours() - 1;\r\n        // Добавляем 10px за каждый пройденный час\r\n        if (addedHours + 1 > 1) {\r\n            let additionalPixels = addedHours * 9;\r\n            if (endTime.getMinutes() !== 0) {\r\n                lengthInPixels += 5;\r\n            }\r\n            return lengthInPixels + additionalPixels;\r\n        }\r\n        return lengthInPixels;\r\n    },\r\n    \r\n    // Функция для вычисления левого позиционирования задачи в пикселях\r\n    calculateLeftPosition(task, currentWeek) {\r\n        const startTime = new Date(task.startTime);\r\n        const day = startTime.getDate();\r\n        const month = startTime.getMonth() + 1; \r\n        const year = startTime.getFullYear();\r\n\r\n        const date= [day, month, year];\r\n\r\n        for (let i = 0; i < currentWeek.length; i++) {\r\n            if (currentWeek[i][1] == date[0] && currentWeek[i][4] == date[1]) {\r\n                return i * 180 + 65;\r\n            }\r\n        }\r\n    },\r\n\r\n    // Функция для вычисления верхнего позиционирования задачи в пикселях\r\n    calculateTaskStartPosition(task) {\r\n        const startTime = new Date(task.startTime);\r\n        const startHour = startTime.getUTCHours();\r\n        const startMinute = startTime.getUTCMinutes();\r\n        const totalMinutes = (startHour - 1) * 60 + startMinute;\r\n\r\n        const startPosition = (totalMinutes / 60) * 89 - 20;\r\n        if (startMinute === 0) {\r\n            return startPosition + 5;\r\n        }\r\n        return startPosition;\r\n    }\r\n\r\n};\r\n"],"mappings":"AAAA;;AAEA,eAAe;EACX;EACAA,kBAAkBA,CAACC,IAAI,EAAE;IACrB,IAAIA,IAAI,CAACC,IAAI,IAAI,UAAU,EAAE;MACzB,OAAO,SAAS;IACpB;IACA,IAAID,IAAI,CAACC,IAAI,IAAI,SAAS,EAAE;MACxB,OAAO,SAAS;IACpB;IACA,IAAID,IAAI,CAACC,IAAI,IAAI,UAAU,EAAE;MACzB,OAAO,SAAS;IACpB;EACJ,CAAC;EAED;EACAC,2BAA2BA,CAACF,IAAI,EAAE;IAC9B;IACA,MAAMG,SAAS,GAAG,IAAIC,IAAI,CAACJ,IAAI,CAACG,SAAS,CAAC;IAC1C,MAAME,OAAO,GAAG,IAAID,IAAI,CAACJ,IAAI,CAACK,OAAO,CAAC;;IAEtC;IACA,MAAMC,iBAAiB,GAAG,CAACD,OAAO,GAAGF,SAAS,KAAK,IAAI,GAAG,EAAE,CAAC;;IAE7D;IACA,IAAII,cAAc,GAAID,iBAAiB,GAAG,EAAE,GAAI,EAAE;IAElD,MAAME,UAAU,GAAGH,OAAO,CAACI,QAAQ,CAAC,CAAC,GAAGN,SAAS,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC;IAChE;IACA,IAAID,UAAU,GAAG,CAAC,GAAG,CAAC,EAAE;MACpB,IAAIE,gBAAgB,GAAGF,UAAU,GAAG,CAAC;MACrC,IAAIH,OAAO,CAACM,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE;QAC5BJ,cAAc,IAAI,CAAC;MACvB;MACA,OAAOA,cAAc,GAAGG,gBAAgB;IAC5C;IACA,OAAOH,cAAc;EACzB,CAAC;EAED;EACAK,qBAAqBA,CAACZ,IAAI,EAAEa,WAAW,EAAE;IACrC,MAAMV,SAAS,GAAG,IAAIC,IAAI,CAACJ,IAAI,CAACG,SAAS,CAAC;IAC1C,MAAMW,GAAG,GAAGX,SAAS,CAACY,OAAO,CAAC,CAAC;IAC/B,MAAMC,KAAK,GAAGb,SAAS,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC;IACtC,MAAMC,IAAI,GAAGf,SAAS,CAACgB,WAAW,CAAC,CAAC;IAEpC,MAAMC,IAAI,GAAE,CAACN,GAAG,EAAEE,KAAK,EAAEE,IAAI,CAAC;IAE9B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,WAAW,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IAAIR,WAAW,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,IAAIP,WAAW,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,EAAE;QAC9D,OAAOC,CAAC,GAAG,GAAG,GAAG,EAAE;MACvB;IACJ;EACJ,CAAC;EAED;EACAE,0BAA0BA,CAACvB,IAAI,EAAE;IAC7B,MAAMG,SAAS,GAAG,IAAIC,IAAI,CAACJ,IAAI,CAACG,SAAS,CAAC;IAC1C,MAAMqB,SAAS,GAAGrB,SAAS,CAACsB,WAAW,CAAC,CAAC;IACzC,MAAMC,WAAW,GAAGvB,SAAS,CAACwB,aAAa,CAAC,CAAC;IAC7C,MAAMC,YAAY,GAAG,CAACJ,SAAS,GAAG,CAAC,IAAI,EAAE,GAAGE,WAAW;IAEvD,MAAMG,aAAa,GAAID,YAAY,GAAG,EAAE,GAAI,EAAE,GAAG,EAAE;IACnD,IAAIF,WAAW,KAAK,CAAC,EAAE;MACnB,OAAOG,aAAa,GAAG,CAAC;IAC5B;IACA,OAAOA,aAAa;EACxB;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}