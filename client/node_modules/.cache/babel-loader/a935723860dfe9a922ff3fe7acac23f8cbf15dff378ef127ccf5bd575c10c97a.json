{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-task\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"form-title\"\n}, \" Создание списка задач \", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_5 = {\n  action: \"\",\n  method: \"\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"legend\", null, \"Local Pickup Date and Time\", -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"label\", null, [/*#__PURE__*/_createTextVNode(\"Choose Date: \"), /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"date\",\n  name: \"date\",\n  id: \"date\"\n})], -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", null, [/*#__PURE__*/_createTextVNode(\"Choose Time: \"), /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"time\",\n  name: \"time\",\n  id: \"time\"\n})], -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"submit\",\n  value: \"Submit\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"form-submit\",\n  type: \"submit\"\n}, \"Создать\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_fielset = _resolveComponent(\"fielset\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    action: \"\",\n    type: \"post\",\n    onSubmit: _cache[4] || (_cache[4] = (...args) => $options.addTaskList && $options.addTaskList(...args)),\n    style: {\n      \"display\": \"flex\",\n      \"flex-direction\": \"column\",\n      \"gap\": \"20px\"\n    }\n  }, [_createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Название списка\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.taskListTitle = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListTitle]]), $setup.v$.taskListTitle.$invalid && $setup.v$.taskListTitle.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Минимальная длина 6 символов\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Описание списка\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.taskListInfo = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListInfo]]), $setup.v$.taskListInfo.$invalid && $setup.v$.taskListInfo.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \"Минимальная длина 8 символов\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"form\", _hoisted_5, [_createVNode(_component_fielset, null, {\n    default: _withCtx(() => [_hoisted_6, _hoisted_7, _hoisted_8, _hoisted_9]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"taskListDate\",\n    ref: \"taskListDate\",\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Дата выполнения\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.taskListDate = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListDate]])]), _hoisted_10, _createElementVNode(\"button\", {\n    class: \"form-submit_exit\",\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.UPDATE_IS_ADDED_TASKLIST())\n  }, \"Отмена\")], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["class","_createElementVNode","action","method","type","name","id","value","_createElementBlock","_hoisted_1","_hoisted_2","onSubmit","_cache","args","$options","addTaskList","style","placeholder","$data","taskListTitle","$event","$setup","v$","$invalid","$dirty","_hoisted_3","taskListInfo","_hoisted_4","_hoisted_5","_createVNode","_component_fielset","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","ref","taskListDate","_hoisted_10","onClick","_ctx","UPDATE_IS_ADDED_TASKLIST"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTaskList.vue"],"sourcesContent":["<template>\r\n        <div class=\"form-task\">\r\n            <h3 class=\"form-title\">\r\n                Создание списка задач\r\n            </h3>\r\n            <form action=\"\" type=\"post\" @submit=\"addTaskList\" style=\"display: flex; flex-direction: column; gap: 20px;\"> \r\n                <div>\r\n                    <input \r\n                        class=\"form-input\" \r\n                        type=\"text\" \r\n                        placeholder=\"Название списка\" \r\n                        v-model=\"taskListTitle\"\r\n                    > \r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListTitle.$invalid && v$.taskListTitle.$dirty\">Минимальная длина 6 символов</span>\r\n                </div>\r\n                \r\n                <div>\r\n                    <input class=\"form-input\" type=\"text\" placeholder=\"Описание списка\" v-model=\"taskListInfo\">\r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListInfo.$invalid && v$.taskListInfo.$dirty\">Минимальная длина 8 символов</span>\r\n                </div>\r\n                \r\n                <form action=\"\" method=\"\">\r\n    <fielset>\r\n      <legend>Local Pickup Date and Time</legend>\r\n      <label>Choose Date: <input type=\"date\" name=\"date\" id=\"date\"></label>\r\n      <label>Choose Time: <input type=\"time\" name=\"time\" id=\"time\"></label>\r\n      <input type=\"submit\" value=\"Submit\" >\r\n    </fielset>\r\n  </form>\r\n                <div>\r\n                    <input  id=\"taskListDate\" ref=\"taskListDate\" class=\"form-input\" type=\"text\" placeholder=\"Дата выполнения\" v-model=\"taskListDate\">\r\n                    \r\n                </div>\r\n\r\n                <button class=\"form-submit\" type=\"submit\">Создать</button>\r\n                <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASKLIST()\">Отмена</button>\r\n            </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required } from '@vuelidate/validators'\r\n\r\nimport 'air-datepicker/air-datepicker.css';\r\nimport AirDatepicker from 'air-datepicker';\r\n\r\n\r\nexport default {\r\n    setup () {\r\n        return {\r\n            v$: useVuelidate()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n\r\n        new AirDatepicker('#taskListDate',{\r\n            position: 'right center',\r\n            range: true,\r\n            multipleDatesSeparator: ' - ', \r\n            dateFormat: 'yyyy-MM-dd',\r\n            buttons: [\r\n        {\r\n            content(dp) {\r\n                return dp.opts.timepicker \r\n                    ? 'Выключить выбор времени'\r\n                    : 'Включить выбор времени'\r\n            },\r\n            onClick(dp) {\r\n                let viewDate = dp.viewDate;\r\n                let today = new Date();\r\n                \r\n                // Since timepicker takes initial time from 'viewDate', set up time here, \r\n                // otherwise time will be equal to 00:00 if user navigated through datepicker\r\n                viewDate.setHours(today.getHours());\r\n                viewDate.setMinutes(today.getMinutes());\r\n\r\n                dp.update({\r\n                    timepicker: !dp.opts.timepicker,\r\n                    viewDate\r\n                })\r\n            }\r\n        }\r\n    ]\r\n        });\r\n        \r\n    },\r\n    data(){\r\n        return {\r\n            taskListTitle: '',\r\n            taskListInfo: '',\r\n            taskListDate:'',\r\n\r\n\r\n            taskListStartTime: '',\r\n            taskListEndTime: '',\r\n\r\n            formattedDate: ''\r\n        }\r\n    }, \r\n    validations: {\r\n        taskListTitle: { required },\r\n        taskListInfo: { required },\r\n        taskListDate: { required },\r\n\r\n    },\r\n    methods: {\r\n        ...mapActions(['ADD_TASK', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASKLIST']),\r\n        splitDateRange(dateRange) {\r\n            const [startDate, endDate] = dateRange.split(' - ');\r\n            return { startDate, endDate };\r\n        },\r\n\r\n        formatToISODate(dateString) {\r\n            const date = new Date(dateString);\r\n            if (!isNaN(date.getTime())) {\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                const day = String(date.getDate()).padStart(2, '0');\r\n                return `${year}-${month}-${day}T00:00:00Z`;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        \r\n        async addTaskList(event) {\r\n            event.preventDefault();\r\n\r\n            const taskDateInput = this.$refs.taskListDate\r\n            this.taskListDate = taskDateInput.value\r\n\r\n            const isFormCorrect = await this.v$.$validate()\r\n            if (!isFormCorrect) return\r\n\r\n            const { startDate, endDate } = this.splitDateRange(this.taskListDate);\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'http://localhost:5000/task/createTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.formatToISODate(startDate),\r\n                    endTime: this.formatToISODate(endDate),\r\n                },\r\n            })\r\n            .then(() => {\r\n                this.UPDATE_IS_ADDED_TASKLIST()\r\n                this.GET_TASKLIST()\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            }) \r\n        }\r\n    },\r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS']),\r\n    },\r\n};\r\n</script>"],"mappings":";;EACaA,KAAK,EAAC;AAAW;gCAClBC,mBAAA,CAEK;EAFDD,KAAK,EAAC;AAAY,GAAC,yBAEvB;;;EAScA,KAAK,EAAC;;;;EAKNA,KAAK,EAAC;;;EAGVE,MAAM,EAAC,EAAE;EAACC,MAAM,EAAC;;gCAEjCF,mBAAA,CAA2C,gBAAnC,4BAA0B;gCAClCA,mBAAA,CAAqE,gB,8BAA9D,eAAa,G,aAAAA,mBAAA,CAAyC;EAAlCG,IAAI,EAAC,MAAM;EAACC,IAAI,EAAC,MAAM;EAACC,EAAE,EAAC;;gCACtDL,mBAAA,CAAqE,gB,8BAA9D,eAAa,G,aAAAA,mBAAA,CAAyC;EAAlCG,IAAI,EAAC,MAAM;EAACC,IAAI,EAAC,MAAM;EAACC,EAAE,EAAC;;gCACtDL,mBAAA,CAAqC;EAA9BG,IAAI,EAAC,QAAQ;EAACG,KAAK,EAAC;;iCAQjBN,mBAAA,CAA0D;EAAlDD,KAAK,EAAC,aAAa;EAACI,IAAI,EAAC;GAAS,SAAO;;;;uBAjCzDI,mBAAA,CAoCE,OApCFC,UAoCE,GAnCEC,UAEK,EACLT,mBAAA,CA+BO;IA/BDC,MAAM,EAAC,EAAE;IAACE,IAAI,EAAC,MAAM;IAAEO,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,KAAyD,EAAzD;MAAA;MAAA;MAAA;IAAA;MAC9Cf,mBAAA,CAQM,c,gBAPFA,mBAAA,CAKC;IAJGD,KAAK,EAAC,YAAY;IAClBI,IAAI,EAAC,MAAM;IACXa,WAAW,EAAC,iBAAiB;+DACpBC,KAAA,CAAAC,aAAa,GAAAC,MAAA;iDAAbF,KAAA,CAAAC,aAAa,E,GAEOE,MAAA,CAAAC,EAAE,CAACH,aAAa,CAACI,QAAQ,IAAIF,MAAA,CAAAC,EAAE,CAACH,aAAa,CAACK,MAAM,I,cAArFhB,mBAAA,CAA0H,QAA1HiB,UAA0H,EAAnC,8BAA4B,K,qCAGvHxB,mBAAA,CAGM,c,gBAFFA,mBAAA,CAA2F;IAApFD,KAAK,EAAC,YAAY;IAACI,IAAI,EAAC,MAAM;IAACa,WAAW,EAAC,iBAAiB;+DAAUC,KAAA,CAAAQ,YAAY,GAAAN,MAAA;iDAAZF,KAAA,CAAAQ,YAAY,E,GACxDL,MAAA,CAAAC,EAAE,CAACI,YAAY,CAACH,QAAQ,IAAIF,MAAA,CAAAC,EAAE,CAACI,YAAY,CAACF,MAAM,I,cAAnFhB,mBAAA,CAAwH,QAAxHmB,UAAwH,EAAnC,8BAA4B,K,qCAGrH1B,mBAAA,CAOP,QAPO2B,UAOP,GANLC,YAAA,CAKUC,kBAAA;sBAJR,MAA2C,CAA3CC,UAA2C,EAC3CC,UAAqE,EACrEC,UAAqE,EACrEC,UAAqC,C;;QAG3BjC,mBAAA,CAGM,c,gBAFFA,mBAAA,CAAiI;IAAzHK,EAAE,EAAC,cAAc;IAAC6B,GAAG,EAAC,cAAc;IAACnC,KAAK,EAAC,YAAY;IAACI,IAAI,EAAC,MAAM;IAACa,WAAW,EAAC,iBAAiB;+DAAUC,KAAA,CAAAkB,YAAY,GAAAhB,MAAA;iDAAZF,KAAA,CAAAkB,YAAY,E,KAInIC,WAA0D,EAC1DpC,mBAAA,CAAoF;IAA5ED,KAAK,EAAC,kBAAkB;IAAEsC,OAAK,EAAA1B,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAAEmB,IAAA,CAAAC,wBAAwB;KAAI,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}