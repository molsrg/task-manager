{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import axios from 'axios'\nimport moment from 'moment';\nmoment.locale('ru');\nexport default {\n  state() {\n    return {\n      hours: [],\n      days: [],\n      months: [],\n      presentDay: [],\n      firstDayWeek: [],\n      week: []\n    };\n  },\n  getters: {\n    CURRENT_HOURS: state => {\n      return state.hours;\n    },\n    CURRENT_MONTHS: state => {\n      return state.months;\n    },\n    PRESENT_DAY: state => {\n      return state.presentDay;\n    },\n    FIRST_DAY: state => {\n      return state.firstDayWeek;\n    },\n    CURRENT_WEEK: state => {\n      return state.week;\n    },\n    FILL_DAYS(startDate) {\n      const daysArray = [];\n      for (let i = 0; i <= 6; i++) {\n        const day = moment(startDate).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\n        daysArray.push(day.split(\"-\"));\n      }\n      return daysArray;\n    }\n  },\n  mutations: {\n    UPDATE_HOURS: (state, response) => {\n      state.hours = response;\n    },\n    UPDATE_MONTHS: (state, response) => {\n      state.months = response;\n    },\n    UPDATE_PRESENT_DAY: (state, response) => {\n      state.presentDay = response;\n    },\n    SET_WEEK: (state, response) => {\n      state.week = response;\n    }\n  },\n  actions: {\n    // загружаем часы с текущего на день вперед\n    GET_HOURS({\n      commit\n    }) {\n      const hours = [];\n      const currentHour = Number(moment().format('HH'));\n      for (let i = 0; i < 24; i++) {\n        let hour = currentHour + i;\n        if (hour > 23) {\n          hour -= 24;\n        }\n        hours.push(`${hour}:00`);\n      }\n      commit('UPDATE_HOURS', hours);\n    },\n    GET_MONTHS({\n      commit\n    }, startDate, monthAfter = 3) {\n      const months = [];\n      const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\n      const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\n      while (startDateNormalized.isBefore(nowNormalized)) {\n        months.push(startDateNormalized.format(\"MMMM YYYY MM\").split(\" \"));\n        startDateNormalized.add(1, \"M\");\n      }\n\n      //Добавляем месяцы после текущего\n      for (let i = 0; i < monthAfter; i++) {\n        const monthslater = nowNormalized.clone().add(i, \"M\");\n        months.push(monthslater.format(\"MMMM YYYY MM\").split(\" \"));\n      }\n      commit('UPDATE_MONTHS', months);\n    },\n    GET_PRESENT_DAY({\n      commit\n    }) {\n      const day = moment().format(\"DD-MMMM\").split(\"-\");\n      commit('UPDATE_PRESENT_DAY', day);\n    },\n    // показывает текущую неделю на календаре (выбранную)\n    SHOW_WEEK({\n      commit\n    }, currentDate) {\n      let days = [];\n      const weekStart = currentDate.clone().startOf(\"week\");\n      for (let i = 0; i <= 6; i++) {\n        const day = moment(weekStart).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\n        days.push(day.split(\"-\"));\n      }\n      commit('SET_WEEK', days);\n    }\n  }\n};","map":{"version":3,"names":["moment","locale","state","hours","days","months","presentDay","firstDayWeek","week","getters","CURRENT_HOURS","CURRENT_MONTHS","PRESENT_DAY","FIRST_DAY","CURRENT_WEEK","FILL_DAYS","startDate","daysArray","i","day","add","format","push","split","mutations","UPDATE_HOURS","response","UPDATE_MONTHS","UPDATE_PRESENT_DAY","SET_WEEK","actions","GET_HOURS","commit","currentHour","Number","hour","GET_MONTHS","monthAfter","nowNormalized","startOf","startDateNormalized","isBefore","monthslater","clone","GET_PRESENT_DAY","SHOW_WEEK","currentDate","weekStart"],"sources":["C:/Users/Sergey/Documents/GitHub/task-manager/client/src/store/modules/Calendar.js"],"sourcesContent":["// import axios from 'axios'\r\nimport moment from 'moment'\r\nmoment.locale('ru')\r\n\r\nexport default {\r\n    state() {\r\n        return {\r\n            hours: [],\r\n            days: [],\r\n            months: [], \r\n            presentDay: [],\r\n            firstDayWeek: [], \r\n            week: []\r\n        }\r\n        \r\n    }, \r\n    getters: {\r\n        CURRENT_HOURS: state => {\r\n            return state.hours\r\n        }, \r\n        CURRENT_MONTHS: state => {\r\n            return state.months\r\n        }, \r\n        PRESENT_DAY: state => {\r\n            return state.presentDay\r\n        }, \r\n        FIRST_DAY: state => {\r\n            return state.firstDayWeek\r\n        }, \r\n        CURRENT_WEEK: state => {\r\n            return state.week\r\n        }, \r\n\r\n        FILL_DAYS (startDate) {\r\n            const daysArray = [];\r\n            for (let i = 0; i <= 6; i++) {\r\n            const day = moment(startDate).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\r\n            daysArray.push(day.split(\"-\"));\r\n            }\r\n            return daysArray;\r\n        },\r\n    }, \r\n    mutations: {\r\n        UPDATE_HOURS: (state, response) => {\r\n            state.hours = response\r\n        }, \r\n        UPDATE_MONTHS: (state, response) => {\r\n            state.months = response\r\n        }, \r\n        UPDATE_PRESENT_DAY: (state, response) => {\r\n            state.presentDay = response\r\n        }, \r\n        SET_WEEK:(state, response) => {\r\n            state.week = response\r\n        }\r\n    }, \r\n    actions: {\r\n        // загружаем часы с текущего на день вперед\r\n        GET_HOURS ({ commit }) {\r\n            const hours = [];\r\n            const currentHour = Number(moment().format('HH'));\r\n            for (let i = 0; i < 24; i++) {\r\n            let hour = currentHour + i;\r\n            if (hour > 23) {\r\n                hour -= 24; \r\n            }\r\n            hours.push(`${hour}:00`);\r\n            }\r\n            commit('UPDATE_HOURS', hours);\r\n        },\r\n        \r\n        GET_MONTHS ({commit}, startDate, monthAfter = 3){\r\n            const months = []\r\n            const nowNormalized = moment().locale(\"ru\").startOf(\"month\"); // Первое число текущего месяца\r\n            const startDateNormalized = moment(startDate, \"DD-MM-YYYY\").startOf(\"month\");\r\n            while (startDateNormalized.isBefore(nowNormalized)) {\r\n                months.push(startDateNormalized.format(\"MMMM YYYY MM\").split(\" \"));\r\n                startDateNormalized.add(1, \"M\");\r\n            }\r\n        \r\n            //Добавляем месяцы после текущего\r\n            for (let i = 0; i < monthAfter; i++) {\r\n                const monthslater = nowNormalized.clone().add(i, \"M\");\r\n                months.push(monthslater.format(\"MMMM YYYY MM\").split(\" \"));\r\n            }\r\n        \r\n            commit('UPDATE_MONTHS', months);\r\n        }, \r\n\r\n        GET_PRESENT_DAY ({commit}){\r\n            const day = moment().format(\"DD-MMMM\").split(\"-\")\r\n            commit('UPDATE_PRESENT_DAY', day)\r\n        }, \r\n\r\n        // показывает текущую неделю на календаре (выбранную)\r\n        SHOW_WEEK({commit}, currentDate) {\r\n            let days = [];\r\n            const weekStart = currentDate.clone().startOf(\"week\");\r\n\r\n            for (let i = 0; i <= 6; i++) {\r\n                const day = moment(weekStart).add(i, \"days\").format(\"dddd-DD-MMMM-YYYY\");\r\n                days.push(day.split(\"-\"));\r\n            }\r\n\r\n            commit('SET_WEEK', days)\r\n        },\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}