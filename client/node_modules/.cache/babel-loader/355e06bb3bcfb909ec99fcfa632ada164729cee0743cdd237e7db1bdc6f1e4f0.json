{"ast":null,"code":"// Файл с обработкой задач, которые находятся на главном календаре, высчисление стилей задачи\n\nexport default {\n  // Функция для вычисления фона задачи\n  calculateTaskColor(task) {\n    if (task.type == \"Personal\") {\n      return \"#C4D7DA\";\n    }\n    if (task.type == \"Working\") {\n      return \"#FFDEBF\";\n    }\n    if (task.type == \"Optional\") {\n      return \"#DDC9C3\";\n    }\n  },\n  // Функция для вычисления длины задачи в пикселях\n  calculateTaskLengthInPixels(task) {\n    const PIXELS_PER_HOUR = 80;\n    const EXTRA_PIXELS_PER_HOUR = 10;\n    const EXTRA_PIXELS_PER_HOUR_MINUTES = 9;\n    const MAX_HOURS = 23;\n    const MAX_MINUTES = 59;\n    const ADDITIONAL_PIXELS = 2;\n    const startTime = new Date(task.startTime);\n    const endTime = new Date(task.endTime);\n    const durationInMinutes = (endTime - startTime) / (1000 * 60);\n    const hoursDifference = endTime.getHours() - startTime.getHours();\n    let lengthInPixels = durationInMinutes / 60 * PIXELS_PER_HOUR;\n    if (hoursDifference > 0) {\n      const additionalPixels = hoursDifference * EXTRA_PIXELS_PER_HOUR;\n      if (endTime.getMinutes() !== 0) {\n        lengthInPixels += EXTRA_PIXELS_PER_HOUR_MINUTES;\n      }\n      if (endTime.getHours() === MAX_HOURS && endTime.getMinutes() === MAX_MINUTES) {\n        lengthInPixels += ADDITIONAL_PIXELS;\n      }\n      return lengthInPixels + additionalPixels;\n    }\n    if (endTime.getHours() === MAX_HOURS && endTime.getMinutes() === MAX_MINUTES) {\n      return lengthInPixels + ADDITIONAL_PIXELS;\n    }\n    return lengthInPixels;\n  },\n  // Функция для вычисления левого позиционирования задачи в пикселях\n  calculateLeftPosition(task, currentWeek) {\n    const startTime = new Date(task.startTime);\n    const day = startTime.getDate();\n    const month = startTime.getMonth() + 1;\n    const year = startTime.getFullYear();\n    const date = [day, month, year];\n    for (let i = 0; i < currentWeek.length; i++) {\n      if (currentWeek[i][1] == date[0] && currentWeek[i][4] == date[1]) {\n        return i * 180 + 65;\n      }\n    }\n  },\n  // Функция для вычисления верхнего позиционирования задачи в пикселях\n  calculateTaskStartPosition(task) {\n    const startTime = new Date(task.startTime);\n    const startHour = startTime.getHours(); // Используем getHours() для локального времени\n    const startMinute = startTime.getMinutes(); // Используем getMinutes() для локального времени\n    const totalMinutes = startHour * 60 + startMinute;\n    const startPosition = totalMinutes / 60 * 89 - 20;\n    if (startMinute === 0) {\n      return startPosition + 5;\n    }\n    return startPosition;\n  }\n};","map":{"version":3,"names":["calculateTaskColor","task","type","calculateTaskLengthInPixels","PIXELS_PER_HOUR","EXTRA_PIXELS_PER_HOUR","EXTRA_PIXELS_PER_HOUR_MINUTES","MAX_HOURS","MAX_MINUTES","ADDITIONAL_PIXELS","startTime","Date","endTime","durationInMinutes","hoursDifference","getHours","lengthInPixels","additionalPixels","getMinutes","calculateLeftPosition","currentWeek","day","getDate","month","getMonth","year","getFullYear","date","i","length","calculateTaskStartPosition","startHour","startMinute","totalMinutes","startPosition"],"sources":["C:/Users/Sergey/Documents/GitHub/task-manager/client/src/store/modules/Task/Task.js"],"sourcesContent":["// Файл с обработкой задач, которые находятся на главном календаре, высчисление стилей задачи\r\n\r\nexport default {\r\n    // Функция для вычисления фона задачи\r\n    calculateTaskColor(task) {\r\n        if (task.type == \"Personal\") {\r\n            return \"#C4D7DA\";\r\n        }\r\n        if (task.type == \"Working\") {\r\n            return \"#FFDEBF\";\r\n        }\r\n        if (task.type == \"Optional\") {\r\n            return \"#DDC9C3\";\r\n        }\r\n    },\r\n\r\n    // Функция для вычисления длины задачи в пикселях\r\n    calculateTaskLengthInPixels(task) {\r\n        const PIXELS_PER_HOUR = 80;\r\n        const EXTRA_PIXELS_PER_HOUR = 10;\r\n        const EXTRA_PIXELS_PER_HOUR_MINUTES = 9;\r\n        const MAX_HOURS = 23;\r\n        const MAX_MINUTES = 59;\r\n        const ADDITIONAL_PIXELS = 2;\r\n\r\n        const startTime = new Date(task.startTime);\r\n        const endTime = new Date(task.endTime);\r\n    \r\n        const durationInMinutes = (endTime - startTime) / (1000 * 60);\r\n        const hoursDifference = endTime.getHours() - startTime.getHours();\r\n    \r\n        let lengthInPixels = (durationInMinutes / 60) * PIXELS_PER_HOUR;\r\n    \r\n        if (hoursDifference > 0) {\r\n            const additionalPixels = hoursDifference * EXTRA_PIXELS_PER_HOUR;\r\n    \r\n            if (endTime.getMinutes() !== 0) {\r\n                lengthInPixels += EXTRA_PIXELS_PER_HOUR_MINUTES;\r\n            }\r\n    \r\n            if (endTime.getHours() === MAX_HOURS && endTime.getMinutes() === MAX_MINUTES) {\r\n                lengthInPixels += ADDITIONAL_PIXELS;\r\n            }\r\n    \r\n            return lengthInPixels + additionalPixels;\r\n        }\r\n    \r\n        if (endTime.getHours() === MAX_HOURS && endTime.getMinutes() === MAX_MINUTES) {\r\n            return lengthInPixels + ADDITIONAL_PIXELS;\r\n        }\r\n    \r\n        return lengthInPixels;\r\n        \r\n    },\r\n    \r\n    // Функция для вычисления левого позиционирования задачи в пикселях\r\n    calculateLeftPosition(task, currentWeek) {\r\n        const startTime = new Date(task.startTime);\r\n        const day = startTime.getDate();\r\n        const month = startTime.getMonth() + 1; \r\n        const year = startTime.getFullYear();\r\n\r\n        const date= [day, month, year];\r\n\r\n        for (let i = 0; i < currentWeek.length; i++) {\r\n            if (currentWeek[i][1] == date[0] && currentWeek[i][4] == date[1]) {\r\n                return i * 180 + 65;\r\n            }\r\n        }\r\n    },\r\n\r\n    // Функция для вычисления верхнего позиционирования задачи в пикселях\r\n    calculateTaskStartPosition(task) {\r\n        const startTime = new Date(task.startTime);\r\n        const startHour = startTime.getHours(); // Используем getHours() для локального времени\r\n        const startMinute = startTime.getMinutes(); // Используем getMinutes() для локального времени\r\n        const totalMinutes = (startHour) * 60 + startMinute;\r\n    \r\n        const startPosition = (totalMinutes / 60) * 89 - 20;\r\n        if (startMinute === 0) {\r\n            return startPosition + 5;\r\n        }\r\n        return startPosition;\r\n    }\r\n    \r\n\r\n};\r\n"],"mappings":"AAAA;;AAEA,eAAe;EACX;EACAA,kBAAkBA,CAACC,IAAI,EAAE;IACrB,IAAIA,IAAI,CAACC,IAAI,IAAI,UAAU,EAAE;MACzB,OAAO,SAAS;IACpB;IACA,IAAID,IAAI,CAACC,IAAI,IAAI,SAAS,EAAE;MACxB,OAAO,SAAS;IACpB;IACA,IAAID,IAAI,CAACC,IAAI,IAAI,UAAU,EAAE;MACzB,OAAO,SAAS;IACpB;EACJ,CAAC;EAED;EACAC,2BAA2BA,CAACF,IAAI,EAAE;IAC9B,MAAMG,eAAe,GAAG,EAAE;IAC1B,MAAMC,qBAAqB,GAAG,EAAE;IAChC,MAAMC,6BAA6B,GAAG,CAAC;IACvC,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,iBAAiB,GAAG,CAAC;IAE3B,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACV,IAAI,CAACS,SAAS,CAAC;IAC1C,MAAME,OAAO,GAAG,IAAID,IAAI,CAACV,IAAI,CAACW,OAAO,CAAC;IAEtC,MAAMC,iBAAiB,GAAG,CAACD,OAAO,GAAGF,SAAS,KAAK,IAAI,GAAG,EAAE,CAAC;IAC7D,MAAMI,eAAe,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC,GAAGL,SAAS,CAACK,QAAQ,CAAC,CAAC;IAEjE,IAAIC,cAAc,GAAIH,iBAAiB,GAAG,EAAE,GAAIT,eAAe;IAE/D,IAAIU,eAAe,GAAG,CAAC,EAAE;MACrB,MAAMG,gBAAgB,GAAGH,eAAe,GAAGT,qBAAqB;MAEhE,IAAIO,OAAO,CAACM,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE;QAC5BF,cAAc,IAAIV,6BAA6B;MACnD;MAEA,IAAIM,OAAO,CAACG,QAAQ,CAAC,CAAC,KAAKR,SAAS,IAAIK,OAAO,CAACM,UAAU,CAAC,CAAC,KAAKV,WAAW,EAAE;QAC1EQ,cAAc,IAAIP,iBAAiB;MACvC;MAEA,OAAOO,cAAc,GAAGC,gBAAgB;IAC5C;IAEA,IAAIL,OAAO,CAACG,QAAQ,CAAC,CAAC,KAAKR,SAAS,IAAIK,OAAO,CAACM,UAAU,CAAC,CAAC,KAAKV,WAAW,EAAE;MAC1E,OAAOQ,cAAc,GAAGP,iBAAiB;IAC7C;IAEA,OAAOO,cAAc;EAEzB,CAAC;EAED;EACAG,qBAAqBA,CAAClB,IAAI,EAAEmB,WAAW,EAAE;IACrC,MAAMV,SAAS,GAAG,IAAIC,IAAI,CAACV,IAAI,CAACS,SAAS,CAAC;IAC1C,MAAMW,GAAG,GAAGX,SAAS,CAACY,OAAO,CAAC,CAAC;IAC/B,MAAMC,KAAK,GAAGb,SAAS,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC;IACtC,MAAMC,IAAI,GAAGf,SAAS,CAACgB,WAAW,CAAC,CAAC;IAEpC,MAAMC,IAAI,GAAE,CAACN,GAAG,EAAEE,KAAK,EAAEE,IAAI,CAAC;IAE9B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,WAAW,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IAAIR,WAAW,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,IAAIP,WAAW,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,EAAE;QAC9D,OAAOC,CAAC,GAAG,GAAG,GAAG,EAAE;MACvB;IACJ;EACJ,CAAC;EAED;EACAE,0BAA0BA,CAAC7B,IAAI,EAAE;IAC7B,MAAMS,SAAS,GAAG,IAAIC,IAAI,CAACV,IAAI,CAACS,SAAS,CAAC;IAC1C,MAAMqB,SAAS,GAAGrB,SAAS,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxC,MAAMiB,WAAW,GAAGtB,SAAS,CAACQ,UAAU,CAAC,CAAC,CAAC,CAAC;IAC5C,MAAMe,YAAY,GAAIF,SAAS,GAAI,EAAE,GAAGC,WAAW;IAEnD,MAAME,aAAa,GAAID,YAAY,GAAG,EAAE,GAAI,EAAE,GAAG,EAAE;IACnD,IAAID,WAAW,KAAK,CAAC,EAAE;MACnB,OAAOE,aAAa,GAAG,CAAC;IAC5B;IACA,OAAOA,aAAa;EACxB;AAGJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}