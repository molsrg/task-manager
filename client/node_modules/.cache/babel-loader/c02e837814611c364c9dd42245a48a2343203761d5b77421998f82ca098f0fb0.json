{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-task\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"form-title\"\n}, \"Создание списка задач\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_5 = [\"min\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_7 = {\n  class: \"form-color-select\"\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"form-title\"\n}, \"Цвет\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ColorPicker = _resolveComponent(\"ColorPicker\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    action: \"\",\n    type: \"post\",\n    onSubmit: _cache[6] || (_cache[6] = (...args) => $options.addTaskList && $options.addTaskList(...args)),\n    style: {\n      \"display\": \"flex\",\n      \"flex-direction\": \"column\",\n      \"row-gap\": \"20px\"\n    }\n  }, [_createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Название списка\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.taskListTitle = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListTitle]]), $setup.v$.taskListTitle.$invalid && $setup.v$.taskListTitle.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Заполните поле\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Описание списка\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.taskListInfo = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.taskListInfo]]), $setup.v$.taskListInfo.$invalid && $setup.v$.taskListInfo.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \"Заполните поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    ref: \"taskDate\",\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Дата выполнения\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.taskStartDate = $event),\n    min: this.formattedDate,\n    onfocus: \"(this.type='date')\",\n    onblur: \"(this.type='text')\"\n  }, null, 8 /* PROPS */, _hoisted_5), [[_vModelText, _ctx.taskStartDate]]), $setup.v$.taskStartDate.$invalid && $setup.v$.taskStartDate.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"Введите дату\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _createCommentVNode(\" <div class=\\\"form-color-button\\\" @click=\\\"selectColor()\\\"><ColorPicker v-model=\\\"color\\\" /></div> \"), !$data.isSelectColor ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"form-button-color\",\n    onClick: _cache[3] || (_cache[3] = $event => this.isSelectColor = !this.isSelectColor)\n  }, \"Выберите цвет\")) : (_openBlock(), _createBlock(_component_ColorPicker, {\n    key: 1,\n    modelValue: $data.taskListColor,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.taskListColor = $event)\n  }, null, 8 /* PROPS */, [\"modelValue\"]))]), _createElementVNode(\"button\", {\n    class: _normalizeClass([\"form-submit\", {\n      'form-submit_filled': !this.v$.$invalid\n    }]),\n    type: \"submit\"\n  }, \" Создать \", 2 /* CLASS */), _createElementVNode(\"button\", {\n    class: \"form-submit_exit\",\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.UPDATE_IS_ADDED_TASKLIST())\n  }, \" Отмена \")], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","action","type","onSubmit","_cache","args","$options","addTaskList","style","placeholder","$data","taskListTitle","$event","$setup","v$","$invalid","$dirty","_hoisted_3","taskListInfo","_hoisted_4","ref","_ctx","taskStartDate","min","formattedDate","onfocus","onblur","_hoisted_6","_hoisted_7","_hoisted_8","_createCommentVNode","isSelectColor","onClick","_createBlock","_component_ColorPicker","taskListColor","_normalizeClass","UPDATE_IS_ADDED_TASKLIST"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\ModalWindows\\AddTaskList.vue"],"sourcesContent":["<template>\r\n    <div class=\"form-task\">\r\n        <h3 class=\"form-title\">Создание списка задач</h3>\r\n\r\n        <form\r\n            action=\"\"\r\n            type=\"post\"\r\n            @submit=\"addTaskList\"\r\n            style=\"display: flex; flex-direction: column; row-gap: 20px\"\r\n        >\r\n            <div>\r\n                <input\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Название списка\"\r\n                    v-model=\"taskListTitle\"\r\n                />\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskListTitle.$invalid && v$.taskListTitle.$dirty\"\r\n                    >Заполните поле</span\r\n                >\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Описание списка\"\r\n                    v-model=\"taskListInfo\"\r\n                />\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskListInfo.$invalid && v$.taskListInfo.$dirty\"\r\n                    >Заполните поле\r\n                </span>\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    ref=\"taskDate\"\r\n                    class=\"form-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Дата выполнения\"\r\n                    v-model=\"taskStartDate\"\r\n                    :min=\"this.formattedDate\"\r\n                    onfocus=\"(this.type='date')\" onblur=\"(this.type='text')\"\r\n                />\r\n\r\n                <span\r\n                    class=\"invalid-span\"\r\n                    v-if=\"v$.taskStartDate.$invalid && v$.taskStartDate.$dirty\"\r\n                    >Введите дату</span\r\n                >\r\n            </div>\r\n\r\n            <div class=\"form-color-select\">\r\n                <h4 class=\"form-title\">Цвет</h4>\r\n                <!-- <div class=\"form-color-button\" @click=\"selectColor()\"><ColorPicker v-model=\"color\" /></div> -->\r\n                <div class=\"form-button-color\" v-if=\"!isSelectColor\" @click=\"this.isSelectColor = !this.isSelectColor\">Выберите цвет</div>\r\n                <ColorPicker v-model=\"taskListColor\"  v-else/>\r\n            </div>\r\n\r\n            <button\r\n                class=\"form-submit\"\r\n                type=\"submit\"\r\n                :class=\"{ 'form-submit_filled': !this.v$.$invalid }\"\r\n            >\r\n                Создать\r\n            </button>\r\n            <button\r\n                class=\"form-submit_exit\"\r\n                @click=\"UPDATE_IS_ADDED_TASKLIST()\"\r\n            >\r\n                Отмена\r\n            </button>\r\n        </form>\r\n    </div>\r\n</template>\r\n<script>\r\n// const dateValid = () => {\r\n\r\n//     console.log(this.$refs.taskListDate)\r\n//     if(this.$refs.taskListDate.value.length > 0){\r\n//         return true\r\n//     }\r\n//     else {\r\n//         dateValid.$message = 'Выберите дату';\r\n//         return false;\r\n//     }\r\n// }\r\n\r\nimport axios from \"axios\";\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport ColorPicker from \"primevue/colorpicker\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { required } from \"@vuelidate/validators\";\r\n\r\nexport default {\r\n    setup() {\r\n        return {\r\n            v$: useVuelidate(),\r\n        };\r\n    },\r\n    mounted() {\r\n        this.formattedDate =\r\n            this.USER_REGISTRATIONS.split(\"-\").reverse().join(\"-\") + \"T00:00\";\r\n    },\r\n    data() {\r\n        return {\r\n            taskListTitle: \"\",\r\n            taskListInfo: \"\",\r\n            taskListDate: \"\",\r\n\r\n            taskListColor: \"#15616D\",\r\n            taskListStartTime: \"\",\r\n            taskListEndTime: \"\",\r\n\r\n            formattedDate: \"\",\r\n\r\n            isSelectColor: false,\r\n        };\r\n    },\r\n    validations: {\r\n        taskListTitle: { required },\r\n        taskListInfo: { required },\r\n        taskListDate: { required },\r\n        // taskListColor: { required }\r\n    },\r\n    methods: {\r\n        ...mapActions([\"ADD_TASK\", \"GET_TASKLIST\"]),\r\n        ...mapMutations([\"UPDATE_IS_ADDED_TASKLIST\"]),\r\n        splitDateRange(dateRange) {\r\n            const [startDate, endDate] = dateRange.split(\" - \");\r\n            return { startDate, endDate };\r\n        },\r\n\r\n        formatToISODate(dateString) {\r\n            const date = new Date(dateString);\r\n            if (!isNaN(date.getTime())) {\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n                return `${year}-${month}-${day}T00:00:00Z`;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        async addTaskList(event) {\r\n            event.preventDefault();\r\n\r\n            const taskDateInput = this.$refs.taskListDate;\r\n            this.taskListDate = taskDateInput.value;\r\n\r\n            const isFormCorrect = await this.v$.$validate();\r\n            if (!isFormCorrect) return;\r\n\r\n            const { startDate, endDate } = this.splitDateRange(\r\n                this.taskListDate\r\n            );\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: \"http://localhost:5000/task/createTaskList\",\r\n                headers: {\r\n                    authorization: `Bearer ${localStorage.getItem(\r\n                        \"AccessToken\"\r\n                    )}`,\r\n                },\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.formatToISODate(startDate),\r\n                    endTime: this.formatToISODate(endDate),\r\n                    // taskListColor: this.taskListColor\r\n                },\r\n            })\r\n                .then(() => {\r\n                    this.UPDATE_IS_ADDED_TASKLIST();\r\n                    this.GET_TASKLIST();\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        },\r\n    },\r\n    computed: {\r\n        ...mapGetters([\"USER_REGISTRATIONS\"]),\r\n    },\r\n\r\n    components: {\r\n        ColorPicker,\r\n    },\r\n};\r\n</script>"],"mappings":";;EACSA,KAAK,EAAC;AAAW;gCAClBC,mBAAA,CAAiD;EAA7CD,KAAK,EAAC;AAAY,GAAC,uBAAqB;;;EAgBhCA,KAAK,EAAC;;;;EAcNA,KAAK,EAAC;;;;;EAkBNA,KAAK,EAAC;;;EAMTA,KAAK,EAAC;AAAmB;gCAC1BC,mBAAA,CAAgC;EAA5BD,KAAK,EAAC;AAAY,GAAC,MAAI;;;;uBAxDvCE,mBAAA,CA4EM,OA5ENC,UA4EM,GA3EFC,UAAiD,EAEjDH,mBAAA,CAwEO;IAvEHI,MAAM,EAAC,EAAE;IACTC,IAAI,EAAC,MAAM;IACVC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IACpBG,KAA4D,EAA5D;MAAA;MAAA;MAAA;IAAA;MAEAX,mBAAA,CAYM,c,gBAXFA,mBAAA,CAKE;IAJED,KAAK,EAAC,YAAY;IAClBM,IAAI,EAAC,MAAM;IACXO,WAAW,EAAC,iBAAiB;+DACpBC,KAAA,CAAAC,aAAa,GAAAC,MAAA;iDAAbF,KAAA,CAAAC,aAAa,E,GAIhBE,MAAA,CAAAC,EAAE,CAACH,aAAa,CAACI,QAAQ,IAAIF,MAAA,CAAAC,EAAE,CAACH,aAAa,CAACK,MAAM,I,cAF9DlB,mBAAA,CAIC,QAJDmB,UAIC,EADI,gBAAc,K,qCAIvBpB,mBAAA,CAYM,c,gBAXFA,mBAAA,CAKE;IAJED,KAAK,EAAC,YAAY;IAClBM,IAAI,EAAC,MAAM;IACXO,WAAW,EAAC,iBAAiB;+DACpBC,KAAA,CAAAQ,YAAY,GAAAN,MAAA;iDAAZF,KAAA,CAAAQ,YAAY,E,GAIfL,MAAA,CAAAC,EAAE,CAACI,YAAY,CAACH,QAAQ,IAAIF,MAAA,CAAAC,EAAE,CAACI,YAAY,CAACF,MAAM,I,cAF5DlB,mBAAA,CAIO,QAJPqB,UAIO,EADF,iBACL,K,qCAGJtB,mBAAA,CAgBM,c,gBAfFA,mBAAA,CAQE;IAPEuB,GAAG,EAAC,UAAU;IACdxB,KAAK,EAAC,YAAY;IAClBM,IAAI,EAAC,MAAM;IACXO,WAAW,EAAC,iBAAiB;+DACpBY,IAAA,CAAAC,aAAa,GAAAV,MAAA;IACrBW,GAAG,OAAOC,aAAa;IACxBC,OAAO,EAAC,oBAAoB;IAACC,MAAM,EAAC;sDAF3BL,IAAA,CAAAC,aAAa,E,GAOhBT,MAAA,CAAAC,EAAE,CAACQ,aAAa,CAACP,QAAQ,IAAIF,MAAA,CAAAC,EAAE,CAACQ,aAAa,CAACN,MAAM,I,cAF9DlB,mBAAA,CAIC,QAJD6B,UAIC,EADI,cAAY,K,qCAIrB9B,mBAAA,CAKM,OALN+B,UAKM,GAJFC,UAAgC,EAChCC,mBAAA,uGAAoG,E,CAC9DpB,KAAA,CAAAqB,aAAa,I,cAAnDjC,mBAAA,CAA0H;;IAArHF,KAAK,EAAC,mBAAmB;IAAwBoC,OAAK,EAAA5B,MAAA,QAAAA,MAAA,MAAAQ,MAAA,SAAOmB,aAAa,SAASA,aAAa;KAAE,eAAa,M,cACpHE,YAAA,CAA8CC,sBAAA;;gBAAxBxB,KAAA,CAAAyB,aAAa;+DAAbzB,KAAA,CAAAyB,aAAa,GAAAvB,MAAA;8CAGvCf,mBAAA,CAMS;IALLD,KAAK,EAAAwC,eAAA,EAAC,aAAa;MAAA,4BAEmBtB,EAAE,CAACC;IAAQ;IADjDb,IAAI,EAAC;KAER,WAED,kBACAL,mBAAA,CAKS;IAJLD,KAAK,EAAC,kBAAkB;IACvBoC,OAAK,EAAA5B,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAAES,IAAA,CAAAgB,wBAAwB;KACnC,UAED,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}