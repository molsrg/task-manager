{"ast":null,"code":"import moment from \"moment\";\nimport SelectArrow from './CALENDAR/SelectArrow.vue';\nimport CurrentWeek from './CALENDAR/CurrentWeek.vue';\nimport CalendarApp from './CALENDAR/CalendarApp.vue';\nimport LoaderApp from './CALENDAR/LoaderApp.vue';\nimport { mapGetters, mapActions } from 'vuex';\nmoment.locale(\"ru\");\nexport default {\n  components: {\n    SelectArrow,\n    CurrentWeek,\n    CalendarApp,\n    LoaderApp\n  },\n  data() {\n    return {\n      // загрузка данных с сервера\n      showLoader: false\n    };\n  },\n  computed: {\n    ...mapGetters(['USER_REGISTRATIONS', 'CURRENT_WEEK', 'PRESENT_DAY', 'SHOW_LOADER'])\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.scrollToCurrentHour();\n    });\n    this.CHANGE_WEEK(moment());\n    this.GET_HOURS();\n    this.GET_PRESENT_DAY();\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n    this.GET_TASKLIST(); // other\n  },\n\n  methods: {\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS', 'GET_THIS_DAY_TASKS', 'GET_TASKLIST']),\n    isTaskOverflowed(task) {\n      const taskElement = this.$refs[`${task.id}`];\n      console.log(taskElement);\n    },\n    // автоматически скролит к нужному времени при открытии страницы\n    scrollToCurrentHour() {\n      //     const taskboardContainer = document.querySelector('.calendar__taskboard'); \n      //     if (taskboardContainer) {\n      //       const currentHour = `${Number(moment().format('HH'))}:00`; \n      //       const hourElements = taskboardContainer.querySelectorAll('.time__name');\n\n      //       for (let i = 0; i < hourElements.length; i++) {\n      //         if (hourElements[i].textContent === currentHour) {\n      //           const containerRect = taskboardContainer.getBoundingClientRect();\n      //           const hourRect = hourElements[i].getBoundingClientRect();\n      //           const scrollTop = hourRect.top - containerRect.top;\n      //           taskboardContainer.scrollTop = scrollTop;\n      //           return; // Выходим из цикла, когда нашли нужный час\n      //         }\n      //   }\n\n      //   console.error(\"Час не найден в .calendar__taskboard.\");\n      // } else {\n      //   console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\n      // }\n    }\n  }\n};","map":{"version":3,"names":["moment","SelectArrow","CurrentWeek","CalendarApp","LoaderApp","mapGetters","mapActions","locale","components","data","showLoader","computed","mounted","$nextTick","scrollToCurrentHour","CHANGE_WEEK","GET_HOURS","GET_PRESENT_DAY","GET_MONTHS","USER_REGISTRATIONS","GET_THIS_WEEK_TASKS","CURRENT_WEEK","GET_THIS_DAY_TASKS","PRESENT_DAY","GET_TASKLIST","methods","isTaskOverflowed","task","taskElement","$refs","id","console","log"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CalendarComponent.vue"],"sourcesContent":["<template>\r\n  <div>\r\n        <SelectArrow></SelectArrow>\r\n\r\n\r\n    <div class=\"calendar\">\r\n      <CurrentWeek></CurrentWeek>\r\n      <CalendarApp v-if=\"!SHOW_LOADER\"></CalendarApp>\r\n      <LoaderApp v-else></LoaderApp>\r\n  </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport SelectArrow from './CALENDAR/SelectArrow.vue'\r\nimport CurrentWeek from './CALENDAR/CurrentWeek.vue'\r\nimport CalendarApp from './CALENDAR/CalendarApp.vue'\r\nimport LoaderApp from './CALENDAR/LoaderApp.vue';\r\nimport { mapGetters, mapActions} from 'vuex';\r\n\r\nmoment.locale(\"ru\");\r\n\r\nexport default {\r\n  components: {\r\n    SelectArrow, \r\n    CurrentWeek,\r\n    CalendarApp, \r\n    LoaderApp\r\n  },\r\n  data() {\r\n    return {\r\n      // загрузка данных с сервера\r\n      showLoader: false,\r\n\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS', 'CURRENT_WEEK', 'PRESENT_DAY', 'SHOW_LOADER']), \r\n    \r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scrollToCurrentHour();\r\n    });\r\n\r\n    this.CHANGE_WEEK(moment())\r\n    this.GET_HOURS();\r\n    this.GET_PRESENT_DAY()\r\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\r\n\r\n\r\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n    this.GET_TASKLIST() // other\r\n  \r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS','GET_THIS_DAY_TASKS', 'GET_TASKLIST']), \r\n    \r\n\r\n    isTaskOverflowed(task) {\r\n      const taskElement = this.$refs[`${task.id}`]; \r\n      console.log(taskElement)\r\n    },\r\n\r\n\r\n    // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n  //     const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n  //     if (taskboardContainer) {\r\n  //       const currentHour = `${Number(moment().format('HH'))}:00`; \r\n  //       const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n        \r\n  //       for (let i = 0; i < hourElements.length; i++) {\r\n  //         if (hourElements[i].textContent === currentHour) {\r\n  //           const containerRect = taskboardContainer.getBoundingClientRect();\r\n  //           const hourRect = hourElements[i].getBoundingClientRect();\r\n  //           const scrollTop = hourRect.top - containerRect.top;\r\n  //           taskboardContainer.scrollTop = scrollTop;\r\n  //           return; // Выходим из цикла, когда нашли нужный час\r\n  //         }\r\n  //   }\r\n    \r\n  //   console.error(\"Час не найден в .calendar__taskboard.\");\r\n  // } else {\r\n  //   console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n  // }\r\n    },\r\n    \r\n  },\r\n  \r\n\r\n};\r\n</script>\r\n\r\n\r\n<style>\r\n.calendar {\r\n  display: flex;\r\n    flex-direction: column;\r\n    place-items: center;\r\n\r\n    margin-left: 80px;\r\n    margin-top: 30px;\r\n}\r\n</style>"],"mappings":"AAeA,OAAOA,MAAK,MAAO,QAAQ;AAC3B,OAAOC,WAAU,MAAO,4BAA2B;AACnD,OAAOC,WAAU,MAAO,4BAA2B;AACnD,OAAOC,WAAU,MAAO,4BAA2B;AACnD,OAAOC,SAAQ,MAAO,0BAA0B;AAChD,SAASC,UAAU,EAAEC,UAAU,QAAO,MAAM;AAE5CN,MAAM,CAACO,MAAM,CAAC,IAAI,CAAC;AAEnB,eAAe;EACbC,UAAU,EAAE;IACVP,WAAW;IACXC,WAAW;IACXC,WAAW;IACXC;EACF,CAAC;EACDK,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,UAAU,EAAE;IAEd,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGN,UAAU,CAAC,CAAC,oBAAoB,EAAE,cAAc,EAAE,aAAa,EAAE,aAAa,CAAC;EAEpF,CAAC;EACDO,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,MAAM;MACnB,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACC,WAAW,CAACf,MAAM,CAAC,CAAC;IACzB,IAAI,CAACgB,SAAS,CAAC,CAAC;IAChB,IAAI,CAACC,eAAe,CAAC;IACrB,IAAI,CAACC,UAAU,CAAC,IAAI,CAACC,kBAAkB,CAAC;IAGxC,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACC,YAAY;IAC1C,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAACC,WAAW;IACxC,IAAI,CAACC,YAAY,CAAC,GAAE;EAEtB,CAAC;;EAEDC,OAAO,EAAE;IACP,GAAGnB,UAAU,CAAC,CAAC,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,aAAa,EAAE,qBAAqB,EAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;IAGxIoB,gBAAgBA,CAACC,IAAI,EAAE;MACrB,MAAMC,WAAU,GAAI,IAAI,CAACC,KAAK,CAAE,GAAEF,IAAI,CAACG,EAAG,EAAC,CAAC;MAC5CC,OAAO,CAACC,GAAG,CAACJ,WAAW;IACzB,CAAC;IAGD;IACAd,mBAAmBA,CAAA,EAAG;MACxB;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;IAAA;EAGA;AAGF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}