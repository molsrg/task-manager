{"ast":null,"code":"import moment from \"moment\";\nimport SelectArrow from './CALENDAR/SelectArrow.vue';\nimport CurrentWeek from './CALENDAR/CurrentWeek.vue';\nimport CalendarApp from './CALENDAR/CalendarApp.vue';\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\nmoment.locale(\"ru\");\nexport default {\n  components: {\n    SelectArrow,\n    CurrentWeek,\n    CalendarApp\n  },\n  data() {\n    return {\n      // загрузка данных с сервера\n      showLoader: false,\n      showCalendar: true\n    };\n  },\n  computed: {\n    ...mapGetters(['USER_REGISTRATIONS', 'CURRENT_WEEK', 'PRESENT_DAY'])\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.scrollToCurrentHour();\n    });\n    this.CHANGE_WEEK(moment());\n    this.GET_HOURS();\n    this.GET_PRESENT_DAY();\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK);\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY);\n    this.GET_TASKLIST(); // other\n  },\n\n  methods: {\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS', 'GET_THIS_DAY_TASKS', 'GET_TASKLIST']),\n    ...mapMutations(['UPDATE_CHECKED_TASK']),\n    isTaskOverflowed(task) {\n      const taskElement = this.$refs[`${task.id}`];\n      console.log(taskElement);\n    },\n    // обновляет выбранную задачу \n    showTask(task) {\n      this.UPDATE_CHECKED_TASK(task);\n    },\n    // автоматически скролит к нужному времени при открытии страницы\n    scrollToCurrentHour() {\n      const taskboardContainer = document.querySelector('.calendar__taskboard');\n      if (taskboardContainer) {\n        const currentHour = `${Number(moment().format('HH'))}:00`;\n        const hourElements = taskboardContainer.querySelectorAll('.time__name');\n        for (let i = 0; i < hourElements.length; i++) {\n          if (hourElements[i].textContent === currentHour) {\n            const containerRect = taskboardContainer.getBoundingClientRect();\n            const hourRect = hourElements[i].getBoundingClientRect();\n            const scrollTop = hourRect.top - containerRect.top;\n            taskboardContainer.scrollTop = scrollTop;\n            return; // Выходим из цикла, когда нашли нужный час\n          }\n        }\n\n        console.error(\"Час не найден в .calendar__taskboard.\");\n      } else {\n        console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\n      }\n    },\n    // старт загрузки\n    startLoading() {\n      this.showLoader = true;\n      this.showCalendar = false;\n    },\n    // процесс загрузки\n    async loading() {\n      return new Promise(resolve => {\n        // Здесь выполняются асинхронные действия, например, задержка в 1 секунду\n        setTimeout(() => {\n          this.showLoader = false;\n          this.showCalendar = true;\n          resolve(); // Разрешить промис после выполнения\n        }, 1000);\n      });\n    }\n  }\n};","map":{"version":3,"names":["moment","SelectArrow","CurrentWeek","CalendarApp","mapGetters","mapActions","mapMutations","locale","components","data","showLoader","showCalendar","computed","mounted","$nextTick","scrollToCurrentHour","CHANGE_WEEK","GET_HOURS","GET_PRESENT_DAY","GET_MONTHS","USER_REGISTRATIONS","GET_THIS_WEEK_TASKS","CURRENT_WEEK","GET_THIS_DAY_TASKS","PRESENT_DAY","GET_TASKLIST","methods","isTaskOverflowed","task","taskElement","$refs","id","console","log","showTask","UPDATE_CHECKED_TASK","taskboardContainer","document","querySelector","currentHour","Number","format","hourElements","querySelectorAll","i","length","textContent","containerRect","getBoundingClientRect","hourRect","scrollTop","top","error","startLoading","loading","Promise","resolve","setTimeout"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\Home\\CalendarComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"calendar__component\">\r\n    <div style=\"margin-top: 24px;\r\n    margin-left: 79px;\">\r\n        <SelectArrow></SelectArrow>\r\n    </div>\r\n\r\n    <div class=\"calendar\">\r\n      <CurrentWeek></CurrentWeek>\r\n    <!-- заглушка -->\r\n    <div class=\"wrapper\" v-if=\"showLoader\">\r\n      <span class=\"loader\"></span>\r\n    </div>\r\n    <CalendarApp></CalendarApp>\r\n  </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport SelectArrow from './CALENDAR/SelectArrow.vue'\r\nimport CurrentWeek from './CALENDAR/CurrentWeek.vue'\r\nimport CalendarApp from './CALENDAR/CalendarApp.vue'\r\n\r\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\r\nmoment.locale(\"ru\");\r\n\r\nexport default {\r\n  components: {\r\n    SelectArrow, \r\n    CurrentWeek,\r\n    CalendarApp\r\n  },\r\n  data() {\r\n    return {\r\n      // загрузка данных с сервера\r\n      showLoader: false,\r\n      showCalendar: true,\r\n\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS', 'CURRENT_WEEK', 'PRESENT_DAY']), \r\n    \r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.scrollToCurrentHour();\r\n    });\r\n\r\n    this.CHANGE_WEEK(moment())\r\n    this.GET_HOURS();\r\n    this.GET_PRESENT_DAY()\r\n    this.GET_MONTHS(this.USER_REGISTRATIONS);\r\n\r\n\r\n    this.GET_THIS_WEEK_TASKS(this.CURRENT_WEEK)\r\n    this.GET_THIS_DAY_TASKS(this.PRESENT_DAY)\r\n    this.GET_TASKLIST() // other\r\n  \r\n  },\r\n\r\n  methods: {\r\n    ...mapActions(['GET_HOURS', 'GET_MONTHS', 'GET_PRESENT_DAY', 'CHANGE_WEEK', 'GET_THIS_WEEK_TASKS','GET_THIS_DAY_TASKS', 'GET_TASKLIST']), \r\n    ...mapMutations(['UPDATE_CHECKED_TASK']),\r\n\r\n    isTaskOverflowed(task) {\r\n      const taskElement = this.$refs[`${task.id}`]; \r\n      console.log(taskElement)\r\n    },\r\n\r\n    // обновляет выбранную задачу \r\n    showTask(task){\r\n      this.UPDATE_CHECKED_TASK(task)\r\n    },\r\n    // автоматически скролит к нужному времени при открытии страницы\r\n    scrollToCurrentHour() { \r\n      const taskboardContainer = document.querySelector('.calendar__taskboard'); \r\n      if (taskboardContainer) {\r\n        const currentHour = `${Number(moment().format('HH'))}:00`; \r\n        const hourElements = taskboardContainer.querySelectorAll('.time__name');\r\n        \r\n        for (let i = 0; i < hourElements.length; i++) {\r\n          if (hourElements[i].textContent === currentHour) {\r\n            const containerRect = taskboardContainer.getBoundingClientRect();\r\n            const hourRect = hourElements[i].getBoundingClientRect();\r\n            const scrollTop = hourRect.top - containerRect.top;\r\n            taskboardContainer.scrollTop = scrollTop;\r\n            return; // Выходим из цикла, когда нашли нужный час\r\n          }\r\n    }\r\n    \r\n    console.error(\"Час не найден в .calendar__taskboard.\");\r\n  } else {\r\n    console.error(\"Элемент .calendar__taskboard не найден в DOM.\");\r\n  }\r\n},\r\n\r\n  \r\n    \r\n    // старт загрузки\r\n    startLoading() {\r\n      this.showLoader = true;\r\n      this.showCalendar = false;\r\n    },\r\n    // процесс загрузки\r\n    async loading() {\r\n  return new Promise((resolve) => {\r\n    // Здесь выполняются асинхронные действия, например, задержка в 1 секунду\r\n    setTimeout(() => {\r\n      this.showLoader = false;\r\n      this.showCalendar = true;\r\n      resolve(); // Разрешить промис после выполнения\r\n    }, 1000);\r\n  });\r\n},\r\n    \r\n  },\r\n  \r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.wrapper {\r\n  width: 1340px;\r\n  margin: 100px auto;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n.loader {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 5px solid black;\r\n  border-bottom-color: transparent;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n  box-sizing: border-box;\r\n  animation: rotation 1s linear infinite;\r\n}\r\n\r\n@keyframes rotation {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}