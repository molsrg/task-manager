{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"form-task\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"form-title\"\n}, \" Создание списка задач \", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"invalid-span\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    action: \"\",\n    type: \"post\",\n    onSubmit: _cache[5] || (_cache[5] = (...args) => _ctx.addTaskList && _ctx.addTaskList(...args)),\n    style: {\n      \"display\": \"flex\",\n      \"flex-direction\": \"column\",\n      \"gap\": \"20px\"\n    }\n  }, [_createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Название списка\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.taskListTitle = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListTitle]]), _ctx.v$.taskListTitle.$invalid && _ctx.v$.taskListTitle.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Заполните поле\")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Описание списка\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.taskListInfo = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListInfo]]), _ctx.v$.taskListInfo.$invalid && _ctx.v$.taskListInfo.$dirty ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \"Заполните поле \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"taskListDate\",\n    ref: \"taskListDate\",\n    class: \"form-input\",\n    type: \"text\",\n    placeholder: \"Дата выполнения\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.taskListDate = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.taskListDate]]), _createTextVNode(\" \" + _toDisplayString(_ctx.v$.taskListDate), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.show && _ctx.show(...args))\n  }, \"wefffff\"), _createElementVNode(\"button\", {\n    class: _normalizeClass([\"form-submit\", {\n      'form-submit_filled': !this.v$.$invalid\n    }]),\n    type: \"submit\"\n  }, \"Создать\", 2 /* CLASS */), _createElementVNode(\"button\", {\n    class: \"form-submit_exit\",\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.UPDATE_IS_ADDED_TASKLIST())\n  }, \"Отмена\")], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","action","type","onSubmit","_cache","args","_ctx","addTaskList","style","placeholder","taskListTitle","$event","v$","$invalid","$dirty","_hoisted_3","taskListInfo","_hoisted_4","id","ref","taskListDate","_toDisplayString","onClick","show","_normalizeClass","UPDATE_IS_ADDED_TASKLIST"],"sources":["C:\\Users\\Sergey\\Documents\\GitHub\\task-manager\\client\\src\\components\\AddSomething\\AddTaskList.vue"],"sourcesContent":["<template>\r\n        <div class=\"form-task\">\r\n            <h3 class=\"form-title\">\r\n                Создание списка задач\r\n            </h3>\r\n            <form action=\"\" type=\"post\" @submit=\"addTaskList\" style=\"display: flex; flex-direction: column; gap: 20px;\"> \r\n                <div>\r\n                    <input \r\n                        class=\"form-input\" \r\n                        type=\"text\" \r\n                        placeholder=\"Название списка\" \r\n                        v-model=\"taskListTitle\"\r\n                    > \r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListTitle.$invalid && v$.taskListTitle.$dirty\">Заполните поле</span>\r\n                </div>\r\n                \r\n                <div>\r\n                    <input class=\"form-input\" type=\"text\" placeholder=\"Описание списка\" v-model=\"taskListInfo\">\r\n                    <span class=\"invalid-span\" v-if=\"v$.taskListInfo.$invalid && v$.taskListInfo.$dirty\">Заполните поле </span>\r\n                </div>\r\n                \r\n\r\n                <div>\r\n                    <input  id=\"taskListDate\" ref=\"taskListDate\" class=\"form-input\" type=\"text\" placeholder=\"Дата выполнения\" v-model=\"taskListDate\">\r\n                    {{ v$.taskListDate }}\r\n                    \r\n                </div>\r\n                <button @click=\"show\">wefffff</button>\r\n                <button class=\"form-submit\" type=\"submit\" :class=\"{ 'form-submit_filled': !this.v$.$invalid }\">Создать</button>\r\n                <button class=\"form-submit_exit\" @click=\"UPDATE_IS_ADDED_TASKLIST()\">Отмена</button>\r\n            </form>\r\n    </div>\r\n</template>\r\n<script>\r\nconst dateValid = () => {\r\n\r\n    console.log(this.$refs.taskListDate)\r\n    if(this.$refs.taskListDate.value.length > 0){\r\n        return true\r\n    }\r\n    else {\r\n        dateValid.$message = 'Выберите дату';\r\n        return false;\r\n    }\r\n}\r\n\r\nimport axios from 'axios'\r\nimport { mapActions, mapMutations, mapGetters } from \"vuex\";\r\n\r\nimport { useVuelidate } from '@vuelidate/core'\r\nimport { required } from '@vuelidate/validators'\r\n\r\nimport 'air-datepicker/air-datepicker.css';\r\nimport AirDatepicker from 'air-datepicker';\r\n\r\n\r\nexport default {\r\n    setup () {\r\n        return {\r\n            v$: useVuelidate()\r\n        }\r\n    },\r\n    mounted() {\r\n        this.formattedDate = this.USER_REGISTRATIONS.split('-').reverse().join('-') + 'T00:00'\r\n\r\n        new AirDatepicker('#taskListDate',{\r\n            position: 'right center',\r\n            range: true,\r\n            multipleDatesSeparator: ' - ', \r\n            dateFormat: 'yyyy-MM-dd',\r\n            autoClose: true,\r\n        });\r\n        \r\n    },\r\n    data(){\r\n        return {\r\n            taskListTitle: '',\r\n            taskListInfo: '',\r\n            taskListDate:'',\r\n            taskListDate = this.$refs.taskListDate.value,\r\n\r\n            taskListStartTime: '',\r\n            taskListEndTime: '',\r\n\r\n            formattedDate: ''\r\n        }\r\n    }, \r\n    validations: {\r\n        taskListTitle: { required },\r\n        taskListInfo: { required },\r\n        taskListDate: { dateValid },\r\n\r\n    },\r\n    methods: {\r\n\r\n        ...mapActions(['ADD_TASK', 'GET_TASKLIST']), \r\n        ...mapMutations(['UPDATE_IS_ADDED_TASKLIST']),\r\n        splitDateRange(dateRange) {\r\n            const [startDate, endDate] = dateRange.split(' - ');\r\n            return { startDate, endDate };\r\n        },\r\n\r\n        formatToISODate(dateString) {\r\n            const date = new Date(dateString);\r\n            if (!isNaN(date.getTime())) {\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                const day = String(date.getDate()).padStart(2, '0');\r\n                return `${year}-${month}-${day}T00:00:00Z`;\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n        \r\n        async addTaskList(event) {\r\n            event.preventDefault();\r\n\r\n            this.taskListDate = this.$refs.taskListDate.value\r\n\r\n\r\n            const isFormCorrect = await this.v$.$validate()\r\n            if (!isFormCorrect) return\r\n\r\n            const { startDate, endDate } = this.splitDateRange(this.taskListDate);\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'http://localhost:5000/task/createTaskList',\r\n                headers: {'authorization': `Bearer ${localStorage.getItem('AccessToken')}`},\r\n                data: {\r\n                    title: this.taskListTitle,\r\n                    toggleCircle: false,\r\n                    isTasklistVisible: false,\r\n                    startTime: this.formatToISODate(startDate),\r\n                    endTime: this.formatToISODate(endDate),\r\n                },\r\n            })\r\n            .then(() => {\r\n                this.UPDATE_IS_ADDED_TASKLIST()\r\n                this.GET_TASKLIST()\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            }) \r\n        }\r\n    },\r\n    computed: {\r\n    ...mapGetters(['USER_REGISTRATIONS']),\r\n    },\r\n};\r\n</script>"],"mappings":";;EACaA,KAAK,EAAC;AAAW;gCAClBC,mBAAA,CAEK;EAFDD,KAAK,EAAC;AAAY,GAAC,yBAEvB;;;EAScA,KAAK,EAAC;;;;EAKNA,KAAK,EAAC;;;uBAjBxBE,mBAAA,CA8BE,OA9BFC,UA8BE,GA7BEC,UAEK,EACLH,mBAAA,CAyBO;IAzBDI,MAAM,EAAC,EAAE;IAACC,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,WAAA,IAAAD,IAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,KAAyD,EAAzD;MAAA;MAAA;MAAA;IAAA;MAC9CX,mBAAA,CAQM,c,gBAPFA,mBAAA,CAKC;IAJGD,KAAK,EAAC,YAAY;IAClBM,IAAI,EAAC,MAAM;IACXO,WAAW,EAAC,iBAAiB;+DACpBH,IAAA,CAAAI,aAAa,GAAAC,MAAA;iDAAbL,IAAA,CAAAI,aAAa,E,GAEOJ,IAAA,CAAAM,EAAE,CAACF,aAAa,CAACG,QAAQ,IAAIP,IAAA,CAAAM,EAAE,CAACF,aAAa,CAACI,MAAM,I,cAArFhB,mBAAA,CAA4G,QAA5GiB,UAA4G,EAArB,gBAAc,K,qCAGzGlB,mBAAA,CAGM,c,gBAFFA,mBAAA,CAA2F;IAApFD,KAAK,EAAC,YAAY;IAACM,IAAI,EAAC,MAAM;IAACO,WAAW,EAAC,iBAAiB;+DAAUH,IAAA,CAAAU,YAAY,GAAAL,MAAA;iDAAZL,IAAA,CAAAU,YAAY,E,GACxDV,IAAA,CAAAM,EAAE,CAACI,YAAY,CAACH,QAAQ,IAAIP,IAAA,CAAAM,EAAE,CAACI,YAAY,CAACF,MAAM,I,cAAnFhB,mBAAA,CAA2G,QAA3GmB,UAA2G,EAAtB,iBAAe,K,qCAIxGpB,mBAAA,CAIM,c,gBAHFA,mBAAA,CAAiI;IAAzHqB,EAAE,EAAC,cAAc;IAACC,GAAG,EAAC,cAAc;IAACvB,KAAK,EAAC,YAAY;IAACM,IAAI,EAAC,MAAM;IAACO,WAAW,EAAC,iBAAiB;+DAAUH,IAAA,CAAAc,YAAY,GAAAT,MAAA;iDAAZL,IAAA,CAAAc,YAAY,E,oBAAE,GACjI,GAAAC,gBAAA,CAAGf,IAAA,CAAAM,EAAE,CAACQ,YAAY,iB,GAGtBvB,mBAAA,CAAsC;IAA7ByB,OAAK,EAAAlB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAiB,IAAA,IAAAjB,IAAA,CAAAiB,IAAA,IAAAlB,IAAA,CAAI;KAAE,SAAO,GAC7BR,mBAAA,CAA+G;IAAvGD,KAAK,EAAA4B,eAAA,EAAC,aAAa;MAAA,4BAAqDZ,EAAE,CAACC;IAAQ;IAA/DX,IAAI,EAAC;KAA8D,SAAO,kBACtGL,mBAAA,CAAoF;IAA5ED,KAAK,EAAC,kBAAkB;IAAE0B,OAAK,EAAAlB,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAAEL,IAAA,CAAAmB,wBAAwB;KAAI,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}